//-*-C-*-
/*******************************************************************************
*   ___   laboratory
*  ¦OUX¦  C+
*  ¦/C+¦  ‘gui’ sample
*   ---   ‟X window”
*         entry and raw labels
* ©overcq                on ‟Gentoo Linux 13.0” “x86_64”              2015‒1‒6 *
*******************************************************************************/
N E_main_Q_timer_S_hour;
N E_main_Q_timer_S_minute;
N E_main_Q_timer_S_second;
N E_main_Q_http_req_ret_count;
//=============================================================================
void
http_req_ret_func( N connection_i
){  E_main_Q_http_req_ret_count++;
    G_(); Gs0( E_net_http_S_connect[ connection_i ].file_name );
    V0( unlink( E_net_http_S_connect[ connection_i ].file_name ) ){}
    E_net_http_S_connect[ connection_i ].ret_func = 0;
}
void
http2_req_ret_func( N connection_i
, I stream_id
){  E_main_Q_http_req_ret_count++;
    struct E_net_http2_Z_stream *stream = E_mem_Q_tab_R( E_net_http2_S_connect[ connection_i ].stream, stream_id );
    G_(); Gs0( stream->file_name );
    V0( unlink( stream->file_name ) ){}
}
int
main(
  int argc
, Pc argv[]
){  E_base_M( argc, argv );
    E_gui_xcb_M();
    E_tui_M();
#ifndef C_line_report
    I out = E_io_Q_stream_out_M_fd( STDERR_FILENO );
#else
    I out = 0;
#endif
    E_io_Q_stream_out_P( out
    , "\n\"OUX/C+ 2\" test sample (c)2017‐2023 overcq"
    , 0
    );
    I_B();
#ifndef C_line_report
    E_io_Q_stream_out_W_(out);
#endif
    I_V()
        goto End;

    SSL_CTX *ssl_ctx = E_net_cli_Q_ssl_M();
    if( !ssl_ctx )
        goto End_3;
    B http2;
    N connection = E_net_cli_Q_ssl_I_connect( ssl_ctx, "gentoo", &http2 );
    if( !~connection )
        goto Skip;
    if(http2)
    {   N ret = E_net_http2_I_request( connection, "/", http2_req_ret_func );
        if(ret)
            goto Skip;
        ret = E_net_http2_I_request( connection, "/", http2_req_ret_func );
        if(ret)
            goto Skip;
    }else
    {   N ret = E_net_http_I_request( connection, "/", http_req_ret_func );
        if(ret)
            goto Skip;
    }
    X_M( net, ret );
    E_main_Q_http_req_ret_count = 0;
    O{  X_B( net, ret, 0 )
            break;
        if(( http2
          && ( !E_net_http2_S_connect_n
            || E_main_Q_http_req_ret_count == 2
          ))
        || ( !http2
          && ( !E_net_http_S_connect_n
            || E_main_Q_http_req_ret_count == 1
        )))
            break;
    }
Skip:
    E_net_cli_Q_ssl_W( ssl_ctx );
End_3:;
    //goto End;

    E_tui_data_Q_layout_I_add( E_tui_data_Q_field_S_text, "Text input ąę", 5 );
    for_n( i, 42 )
    {   E_tui_data_Q_layout_I_add( E_tui_data_Q_field_S_text, "Second text input ąę", 100 );
        struct E_tui_data_Q_field_Z *input = E_mem_Q_tab_R( E_tui_data_Q_layout_S, 1 + i );
        input->select_n = 50;
        Mt_( input->select, input->select_n );
        if( !input->select )
            goto End;
        for_n( i, input->select_n )
        {   N l = E_text_Z_n_N_s_G( i, sizeof(i), 10 );
            input->select[i] = M( l + J_s0_R_l( ". select select select select select select select select select select select select select select select select select select select select select select select select select select select select select select select" ) + 1 );
            if( !input->select[i] )
                goto End;
            E_text_Z_n_N_s( input->select[i] + l, i, sizeof(i), 10 );
            E_text_Z_s_P_copy_s0_0( input->select[i] + l, ". select select select select select select select select select select select select select select select select select select select select select select select select select select select select select select select" );
        }
    }
    E_tui_data_Q_layout_I_add( E_tui_data_Q_field_S_text, "44. text input ąę", 100 );
    E_ncurses_I_lay();

    X_M( x_window, close_window );
    if( E_gui_xcb_S_init )
    {   for_n_( i, 2 )
        {   D_M( main, timer_draw )
                goto End_1;
            Vr_( pthread_mutex_lock( &E_x_window_D_draw_S_mutex_display_window ));
            N display_id = E_gui_xcb_Q_display_M();
            if( !~display_id )
            {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                goto End_2;
            }
            struct E_gui_xcb_Q_display_Z *display = E_mem_Q_tab_R( E_gui_xcb_Q_display_S, display_id );
            for_each( screen_id, display->screen, E_mem_Q_tab )
            {   struct E_gui_xcb_Q_screen_Z *screen = E_mem_Q_tab_R( display->screen, screen_id );
                for_n( i, 2 )
                {   N window_id = E_gui_xcb_Q_window_M( display_id, screen_id
                    , 490, 480
                    );
                    if( !~window_id )
                    {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                        goto End;
                    }
                    struct E_gui_xcb_Q_window_Z *window = E_mem_Q_tab_R( display->window, window_id );
                    I object_id = E_gui_xcb_Q_object_Z_frame_M( display, window );
                    if( !~object_id )
                    {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                        goto End;
                    }
                    for_n( i, 3 )
                    {   I id = E_gui_xcb_Q_object_Z_frame_M( display, window );
                        if( !~id )
                        {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                            goto End;
                        }
                        if( !~E_gui_xcb_Q_object_I_add( display, window, object_id, id ))
                        {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                            goto End;
                        }
                        for_n( i, 5 )
                        {   I id_2 = E_gui_xcb_Q_object_Z_frame_M( display, window );
                            if( !~id_2 )
                            {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                                goto End;
                            }
                            if( !~E_gui_xcb_Q_object_I_add( display, window, id, id_2 ))
                            {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                                goto End;
                            }
                            for_n( i, 2 )
                            {   I id_3 = E_gui_xcb_Q_object_Z_frame_M( display, window );
                                if( !~id_3 )
                                {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                                    goto End;
                                }
                                if( !~E_gui_xcb_Q_object_I_add( display, window, id_2, id_3 ))
                                {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                                    goto End;
                                }
                                for_n( i, 3 )
                                {   I id_4 = E_gui_xcb_Q_object_Z_button_font_M( display, window, 0, "abc" );
                                    if( !~id_4 )
                                    {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                                        goto End;
                                    }
                                    if( !~E_gui_xcb_Q_object_I_add( display, window, id_3, id_4 ))
                                    {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                                        goto End;
                                    }
                                }
                            }
                            for_n_( i, 2 )
                            {   I id_3 = E_gui_xcb_Q_object_Z_button_font_M( display, window, 0, "abcde" );
                                if( !~id_3 )
                                {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                                    goto End;
                                }
                                if( !~E_gui_xcb_Q_object_I_add( display, window, id_2, id_3 ))
                                {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                                    goto End;
                                }
                            }
                        }
                        for_n_( i, 5 )
                        {   I id_2 = E_gui_xcb_Q_object_Z_frame_select_M( display, window, 0, "abcdefghijkl" );
                            if( !~id_2 )
                            {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                                goto End;
                            }
                            if( !~E_gui_xcb_Q_object_I_add( display, window, id, id_2 ))
                            {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                                goto End;
                            }
                            struct E_gui_xcb_Q_object_Z *object = E_mem_Q_tab_R( window->object, id_2 );
                            object = E_mem_Q_tab_R( window->object, object->child[0] );
                            struct E_gui_xcb_Q_object_Z_data_Z_select *object_data = object->data;
                            object_data->select_n = 5;
                            if( !E_mem_Q_blk_M_replace_tab( &object_data->select, sizeof( Pc ), object_data->select_n ))
                            {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                                goto End;
                            }
                            for_n( i, object_data->select_n )
                            {   N l = E_text_Z_n_N_s_G( i, sizeof(i), 10 );
                                object_data->select[i] = M( l + 218 + 1 );
                                if( !object_data->select[i] )
                                {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                                    goto End;
                                }
                                E_text_Z_n_N_s( object_data->select[i] + l, i, sizeof(i), 10 );
                                E_text_Z_s_P_copy_s0_0( object_data->select[i] + l, ". select select select select select select select select select select select select select select select select select select select select select select select select select select select select select select select" );
                            }
                        }
                    }
                    object_id = E_gui_xcb_Q_object_M( display, window
                    , 0
                    , 5, 5
                    , 61, 61
                    , 0
                    , E_main_Q_timer_I_draw
                    , 0
                    );
                    if( !~object_id )
                    {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                        goto End;
                    }
                    struct E_gui_xcb_Q_object_Z *object = E_mem_Q_tab_R( window->object, object_id );
                    U_F( object->mode, draggable );
                    object_id = E_gui_xcb_Q_object_M( display, window
                    , 0
                    , 55, 53
                    , 171, 191
                    , 0
                    , E_main_Q_timer_I_draw
                    , 0
                    );
                    if( !~object_id )
                    {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                        goto End;
                    }
                    object = E_mem_Q_tab_R( window->object, object_id );
                    U_F( object->mode, draggable );
                    object_id = E_gui_xcb_Q_object_M( display, window
                    , 0
                    , 151, 191
                    , 21, 21
                    , 0
                    , E_main_Q_timer_I_draw
                    , 0
                    );
                    if( !~object_id )
                    {   Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
                        goto End;
                    }
                    object = E_mem_Q_tab_R( window->object, object_id );
                    U_F( object->mode, draggable );
                    E_gui_xcb_Q_object_I_lay( display, window );
                }
            }
            Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
            //D_M( main, cursor );
            X_B( x_window, close_window, 0 )
                U_F( E_base_S->E_flow_S_signal, exit );
            //D_W( main, cursor );
            Vr_( pthread_mutex_lock( &E_x_window_D_draw_S_mutex_display_window ));
            E_gui_xcb_Q_display_W( display_id );
            Vr_( pthread_mutex_unlock( &E_x_window_D_draw_S_mutex_display_window ));
End_2:      D_W( main, timer_draw );
            if( U_R( E_base_S->E_flow_S_signal, exit ))
                break;
        }
End_1:  ;
    }else
        X_B( x_window, close_window, 0 )
            U_F( E_base_S->E_flow_S_signal, exit );
    X_W( x_window, close_window );
End:E_tui_W();
    if( E_gui_xcb_S_init )
        E_gui_xcb_W();
    E_base_W();
    return 0;
}
//D( main, cursor )
//{   X_A( x_window, flush );
    //N cursor_no = 0;
    //I timer = Y_M(1500000);
    //O{  Y_B( timer, 0 )
            //break;
        //if( cursor_no == XC_num_glyphs )
            //cursor_no = 0;
        //G(); Gd( cursor_no );
        //for_each( display_id, E_gui_xcb_Q_display_S, E_mem_Q_tab )
        //{   struct E_gui_xcb_Q_display_Z *display = E_mem_Q_tab_R( E_gui_xcb_Q_display_S, display_id );
            //Cursor cursor = XCreateFontCursor( display->x_display, cursor_no );
            //for_each( window_id, display->window, E_mem_Q_tab )
            //{   struct E_gui_xcb_Q_window_Z *window = E_mem_Q_tab_R( display->window, window_id );
                //if( U_R( window->state, visible ))
                    //XDefineCursor( display->x_display, window->x_window, cursor );
            //}
            //XFreeCursor( display->x_display, cursor );
            //U_F( display->req, flush );
        //}
        //cursor_no += 2;
        //X_U( x_window, flush );
    //}
    //Y_W(timer);
//}
D( main, timer_draw )
{   time_t time_u = time(0);
    struct tm *time_s = localtime( &time_u );
    E_main_Q_timer_S_hour = time_s->tm_hour % 12;
    E_main_Q_timer_S_minute = time_s->tm_min;
    E_main_Q_timer_S_second = time_s->tm_sec;
    I timer = Y_M(1000000);
    O{  N timer_lost_count;
        Y_B( timer, &timer_lost_count )
            break;
        E_main_Q_timer_S_second += 1 + timer_lost_count;
        E_main_Q_timer_S_hour += E_main_Q_timer_S_second / 3600;
        E_main_Q_timer_S_second %= 3600;
        E_main_Q_timer_S_minute += E_main_Q_timer_S_second / 60;
        E_main_Q_timer_S_second %= 60;
        E_main_Q_timer_S_hour += E_main_Q_timer_S_minute / 60;
        E_main_Q_timer_S_minute %= 60;
        E_main_Q_timer_S_hour %= 12;
        E_gui_xcb_Q_object_I_draw_Z_draw_proc( E_main_Q_timer_I_draw, !!timer_lost_count );
    }
    Y_W(timer);
}
#define E_main_I_draw_Z_angle_line_(arc_i,arc_n,line_length_i,line_length_n)    E_main_I_draw_Z_angle_line( display, screen, window, object, arc_i, arc_n, line_length_i, line_length_n )
void
E_main_I_draw_Z_angle_line(
  struct E_gui_xcb_Q_display_Z *display
, struct E_gui_xcb_Q_screen_Z *screen
, struct E_gui_xcb_Q_window_Z *window
, struct E_gui_xcb_Q_object_Z *object
, N arc_i
, N arc_n
, N line_length_i
, N line_length_n
){  S16 x = line_length_i * ( object->width / 2 - 1 ) / line_length_n;
    S16 y = line_length_i * ( object->height / 2 - 1 ) / line_length_n;
    N l = 2 * ( object->width + object->height );
    N d = arc_i * l / arc_n;
    N a = d % ( l / 8 );
    switch( d / ( l / 8 ))
    { case 0:
            x = a;
            y = -y;
            break;
      case 1:
            y = a - y;
            break;
      case 2:
            y = a;
            break;
      case 3:
            x = x - a;
            break;
      case 4:
            x = -a;
            break;
      case 5:
            x = -x;
            y -= a;
            break;
      case 6:
            x = -x;
            y = -a;
            break;
      case 7:
            x = a - x;
            y = -y;
            break;
    }
    E_gui_xcb_Q_object_I_draw_Z_lines( display, screen, window, object
    , 2
    , ( xcb_point_t[] )
      { { object->width / 2
        , object->height / 2
        }
      , { object->width / 2 + x
        , object->height / 2 + y
        }
      }
    , !U_R( display->mode, draw_simple ) ? object->width * line_length_n / line_length_i * 0.1 : 1
    );
}
//NDFN konkretne stany wyglądu obiektów mające konkretne znaczenia.
void
E_main_Q_timer_I_draw(
  struct E_gui_xcb_Q_display_Z *display
, struct E_gui_xcb_Q_screen_Z *screen
, struct E_gui_xcb_Q_window_Z *window
, struct E_gui_xcb_Q_object_Z *object
){  E_gui_xcb_Q_object_I_draw_P_color( display, screen, object, E_x_Z_color_M( 0xff, 0xff, 0xff ));
    E_gui_xcb_Q_object_I_draw_Z_rectangles( display, screen, window, object
    , 1
    , ( xcb_rectangle_t[] )
      { 0
      , 0
      , object->width
      , object->height
      }
    , 1
    );
    E_gui_xcb_Q_object_I_draw_Z_font_Z_s( display, screen, window, object, 1, 1, 0, 0, "AĄBCĆDEĘFGHIJKLŁMNŃOÓPQRSŚTUVWXYZŹŻ\naąbcćdeęfghijklłmnńoópqrsśtuvwxyzźż\n0123456789\n!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\n′−¡‽²➪³№ ‒⁄÷°〃⇢×⁑⁂–—≈±⁃―‣•®℠©™µ❛❝❜❞⁅〈⁆〉 ¦‐՚‛‟‚„‘“’”⏎⁋✓·…‹«›» ¿€¢" );
    E_gui_xcb_Q_object_I_draw_P_color( display, screen, object, E_x_Z_color_M( 0, 0, 0x9f ));
    E_main_I_draw_Z_angle_line_(
      E_main_Q_timer_S_hour
    , 12
    , 1
    , 2
    );
    E_gui_xcb_Q_object_I_draw_P_color( display, screen, object, E_x_Z_color_M( 0, 0xbf, 0 ));
    E_main_I_draw_Z_angle_line_(
      E_main_Q_timer_S_minute
    , 60
    , 3
    , 4
    );
    E_gui_xcb_Q_object_I_draw_P_color( display, screen, object, E_x_Z_color_M( 0, 0, 0 ));
    E_main_I_draw_Z_angle_line_(
      E_main_Q_timer_S_second
    , 60
    , 1
    , 1
    );
}
//==============================================================================
void
E_flow_Q_process_call_I_func( P data
){
}
/******************************************************************************/
