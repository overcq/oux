/*******************************************************************************
*   ___   workplace
*  ¦OUX¦  C+
*  ¦/C+¦  bieżący integrator systemowy
*   ---   client/server
*         command‐line parser
* ©overcq                on ‟Gentoo Linux 13.0” “x86_64”             2015‒6‒27 *
*******************************************************************************/
// Zrobić z tego element globalny w module “flow”.
///TODO Czy przekazywać odczytane indeksy dozwolonych wartości, gdy “value_list” i nie ‟other_value”?
//==============================================================================
enum Z_arg_proc_ret
{	ARG_PROC_RET_ACCEPT,
	ARG_PROC_RET_REJECT,
	ARG_PROC_RET_IGNORE,
};
typedef
enum Z_arg_proc_ret
Z_arg_proc(
	int switch_,
	int argc,
	char *argv[]
);
typedef
enum Z_arg_proc_ret
Z_arg_def_proc(
	int argc,
	char *argv[]
);
struct Z_avail_arg
{	const char *const long_text;
	const char *const short_text;
	const unsigned switchable : 1;
	const unsigned value_list : 1;
	const unsigned other_value : 1;
	const unsigned values_count;
	const char *const *const values;
	Z_arg_proc *const proc;
	const char *const desc_text;
};
//==============================================================================
static
const char *long_arg_prefixes_false[] =
{	"disable-",
	"without-",
	"no-",
};
static
const char *long_arg_prefixes_true[] =
{	"enable-",
	"with-",
	"yes-",
};
//==============================================================================
static
void
help_cmd_arg(
	int avail_args_len,
	struct Z_avail_arg avail_args[]
)
{	for( int i = 0; i < avail_args_len; i++ )
	{	const char *const switchable_text = avail_args[i].switchable ? "[yes-,no-]" : "";
		const char *const param_text = avail_args[i].other_value || avail_args[i].values_count ? " ..." : "";
		if( *avail_args[i].long_text
			&& *avail_args[i].short_text
		)
			fprintf( stderr, "--%s%s, -%s%s", switchable_text, avail_args[i].long_text, avail_args[i].short_text, param_text );
		else if( *avail_args[i].long_text )
			fprintf( stderr, "--%s%s%s", switchable_text, avail_args[i].long_text, param_text );
		else if( *avail_args[i].short_text )
			fprintf( stderr, "-%s%s", avail_args[i].short_text, param_text );
		else
			continue;
		fprintf( stderr, "\t%s\n", avail_args[i].desc_text );
		if( avail_args[i].values_count )
		{	fprintf( stderr, "\t%s", avail_args[i].values[0] );
			for( int j = 1; j < avail_args[i].values_count; j++ )
				fprintf( stderr, ", %s", avail_args[i].values[j] );
			if( avail_args[i].other_value )
				fprintf( stderr, "; ..." );
			fprintf( stderr, "\n" );
		}
	}
	exit(1);
}
static
void
ign_cmd_arg(
	int argi,
	char *argv[]
)
{	fprintf( stderr, "%s: ignored %d. command line argument: \"%s\"\n", E_flow_S_exe_name, argi + 1, argv[argi] );
}
static
void
err_cmd_arg(
	int argi,
	char *argv[]
)
{	error( true, 0, "invalid %d. command line argument: \"%s\"", argi + 1, argv[argi] );
}
void
parse_cmd_args(
	int argc,
	char *argv[],
	Z_arg_def_proc *def_proc,
	int avail_args_len,
	struct Z_avail_arg avail_args[]
)
{	int arg_param_count = 0;
	char *arg, *arg_param;
	struct Z_avail_arg *arg_data;
	enum
	{	ARG_SWITCH_UNKNOWN = -1,
		ARG_SWITCH_NO,
		ARG_SWITCH_YES,
	} arg_switch;
	while( argc-- )
	{	arg = argv[argc];
		size_t len = strlen(arg);
		if( !len )
			continue;
		if( arg[0] == '-' )
		{	if( len == 1 )
				err_cmd_arg( argc, argv );
			arg++;
			if( arg[0] == '?' )
				help_cmd_arg( avail_args_len, avail_args );
			arg_data = NULL;
			arg_switch = ARG_SWITCH_UNKNOWN;
			if( arg[0] == '-' )
			{	arg++;
				for( int i = 0; i < sizeof( long_arg_prefixes_false ) / sizeof( const char * ); i++ )
					if( !strncmp( arg, long_arg_prefixes_false[i], strlen( long_arg_prefixes_false[i] )))
					{	arg_switch = ARG_SWITCH_NO;
						arg += strlen( long_arg_prefixes_false[i] );
						break;
					}
				if( arg_switch == ARG_SWITCH_UNKNOWN )
					for( int i = 0; i < sizeof( long_arg_prefixes_true ) / sizeof( const char * ); i++ )
						if( !strncmp( arg, long_arg_prefixes_true[i], strlen( long_arg_prefixes_true[i] )))
						{	arg_switch = ARG_SWITCH_YES;
							arg += strlen( long_arg_prefixes_true[i] );
							break;
						}
				for( int i = 0; i < avail_args_len; i++ )
					if( !strcmp( arg, avail_args[i].long_text ))
					{	arg_data = &avail_args[i];
						break;
					}
				if( !arg_data )
					err_cmd_arg( argc, argv );
				if( arg_switch != ARG_SWITCH_UNKNOWN
					&& !arg_data->switchable
				)
					err_cmd_arg( argc, argv );
			}else
			{	for( int i = 0; i < avail_args_len; i++ )
					if( !strncmp( arg, avail_args[i].short_text, strlen( avail_args[i].short_text )))
					{	arg_data = &avail_args[i];
						break;
					}
				if( !arg_data )
					err_cmd_arg( argc, argv );
			}
			if( arg_data->values_count
				|| arg_data->other_value
			)
				if( arg_data->value_list )
				{	if( arg_param_count < 1 )
						err_cmd_arg( argc, argv );
				}else
					if( arg_param_count != 1 )
						err_cmd_arg( argc, argv );
			int param_no;
			if( !arg_data->other_value )
				for( int i = 0; i < arg_param_count; i++ )
				{	int j = 0;
					for( ; j < arg_data->values_count; j++ )
						if( !strcmp( argv[ argc + 1 + i ], arg_data->values[j] ))
						{	param_no = j;
							break;
						}
					if( j == arg_data->values_count )
						err_cmd_arg( argc, argv );
				}
			enum Z_arg_proc_ret ret;
			if( arg_param_count > 1 )
				ret = arg_data->proc( arg_switch, arg_param_count, argv + argc + 1 );
			else
				ret = arg_data->proc( arg_switch, param_no, NULL );
			switch(ret)
			{	case ARG_PROC_RET_ACCEPT:
					break;
				case ARG_PROC_RET_REJECT:
					err_cmd_arg( argc, argv );
				case ARG_PROC_RET_IGNORE:
					ign_cmd_arg( argc, argv );
			}
			arg_param_count = 0;
		}else
		{	arg_param = arg;
			arg_param_count++;
		}
	}
	if( arg_param_count )
		switch( def_proc( arg_param_count, argv ))
		{	case ARG_PROC_RET_ACCEPT:
				break;
			case ARG_PROC_RET_REJECT:
				err_cmd_arg( 0, argv );
			case ARG_PROC_RET_IGNORE:
				ign_cmd_arg( 0, argv );
		}
}
/******************************************************************************/
