//-*-C-*-
/*******************************************************************************
*   ___   workplace
*  ¦OUX¦  C+
*  ¦/C+¦  terminal command
*   ---   backup list
*         main
* ©overcq                on ‟Gentoo Linux 17.1” “x86_64”              2023‒4‒9 O
*******************************************************************************/
#define E_main_S_user "inc"
Pc E_main_S_autobackup = ".autobackup";
//==============================================================================
N
E_main_Z_s_N_escape( Pc *s
){  C c[] = "*?[";
    for( unsigned i = 0; i != J_s0_R_l(c); i++ )
    {   Pc s_ = E_text_Z_s0_R_search_c( *s, c[i] );
        while( *s_ )
        {   N s_i = s_ - *s;
            if( !E_mem_Q_blk_I_insert( s, s_i, 2 ))
                return ~0;
            s_ = *s + s_i;
            s_[0] = '[';
            s_[1] = s_[2];
            s_[2] = ']';
            s_ = E_text_Z_s0_R_search_c( s_ + 3, c[i] );
        }
    }
    return 0;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
N
E_main_I_top_dirs( void
){  N dirs_n = 1;
    Pc *Mt_( dirs, dirs_n );
    if( !dirs )
        return ~0;
    dirs[0] = M( 1 + 1 );
    dirs[0][0] = '/';
    dirs[0][1] = '\0';
    do
    {   N dirs_current = dirs_n - 1;
        G_(); Gs0( dirs[ dirs_current ] );
        DIR *dir;
        int errno_;
        Vpe( dir = opendir( dirs[ dirs_current ] ), errno_ )
        {   G_(); Gs0( dirs[ dirs_current ] );
            if( errno_ == EACCES
            || errno_ == ENOENT
            || errno_ == ENOTDIR
            )
            {   W( dirs[ dirs_current ] );
                dirs_n--;
                if( !E_mem_Q_blk_I_remove( &dirs, dirs_current, 1 ))
                {   GV_(NA);
                    for( N i = 0; i != dirs_n; i++ )
                        W( dirs[i] );
                    W(dirs);
                    return ~0;
                }
                if( !dirs_n )
                    break;
                continue;
            }
            for( N i = 0; i != dirs_n; i++ )
                W( dirs[i] );
            W(dirs);
            return ~0;
        }
        O{  _errno = 0;
            struct dirent *dirent = readdir(dir);
            if( !dirent )
            {   if( _errno )
                {   Vp(dirent){}
                    V1( closedir(dir) ){}
                    for( N i = 0; i != dirs_n; i++ )
                        W( dirs[i] );
                    W(dirs);
                    return ~0;
                }
                W( dirs[ dirs_current ] );
                dirs_n--;
                if( !E_mem_Q_blk_I_remove( &dirs, dirs_current, 1 ))
                {   GV_(NA);
                    V1( closedir(dir) ){}
                    for( N i = 0; i != dirs_n; i++ )
                        W( dirs[i] );
                    W(dirs);
                    return ~0;
                }
                V1( closedir(dir) ){}
                break;
            }
            if( E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "." )
            || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], ".." )
            )
                continue;
            Pc pathname = M( E_text_Z_s0_R_l( dirs[ dirs_current ] ) + ( !E_text_Z_s0_T_eq_s0( dirs[ dirs_current ], "/" ) ? 1 : 0 ) + E_text_Z_s0_R_l( &dirent->d_name[0] ) + 1 );
            if( !pathname )
            {   GV_(NA);
                V1( closedir(dir) ){}
                for( N i = 0; i != dirs_n; i++ )
                    W( dirs[i] );
                W(dirs);
                return ~0;
            }
            Pc s = E_text_Z_s_P_copy_s0( pathname, dirs[ dirs_current ] );
            if( !E_text_Z_s0_T_eq_s0( dirs[ dirs_current ], "/" ))
                s = E_text_Z_s_P_copy_s0( s, "/" );
            E_text_Z_s_P_copy_s0_0( s, &dirent->d_name[0] );
            if( dirent->d_type == DT_REG
            && E_text_Z_s0_T_eq_s0( &dirent->d_name[0], E_main_S_autobackup )
            )
            {   I file = E_mem_Q_file_M( pathname, yes, 0 );
                if( !~file )
                {   W(pathname);
                    V1( closedir(dir) ){}
                    for( N i = 0; i != dirs_n; i++ )
                        W( dirs[i] );
                    W(dirs);
                    return ~0;
                }
                W(pathname);
                pathname = M( E_text_Z_s0_R_l_0( dirs[ dirs_current ] ));
                if( !pathname )
                {   GV_(NKN);
                    V1( closedir(dir) ){}
                    for( N i = 0; i != dirs_n; i++ )
                        W( dirs[i] );
                    W(dirs);
                    return ~0;
                }
                E_text_Z_s_P_copy_s0_0( pathname, dirs[ dirs_current ] );
                if( E_main_Z_s_N_escape( &pathname ))
                {   GV_(NKN);
                    W(pathname);
                    V1( closedir(dir) ){}
                    for( N i = 0; i != dirs_n; i++ )
                        W( dirs[i] );
                    W(dirs);
                    return ~0;
                }
                O{  Pc line = 0;
                    N ret = E_mem_Q_file_R_u_upto( file, "\n", &line );
                    if(ret)
                    {   if( ret == E_mem_Q_file_S_eof )
                            break;
                        W(pathname);
                        V1( closedir(dir) ){}
                        for( N i = 0; i != dirs_n; i++ )
                            W( dirs[i] );
                        W(dirs);
                        return ~0;
                    }
                    N line_l = E_text_Z_s0_R_l(line);
                    if( line_l < 2 )
                    {   GV_(NKN);
                        W(line);
                        W(pathname);
                        V1( closedir(dir) ){}
                        for( N i = 0; i != dirs_n; i++ )
                            W( dirs[i] );
                        W(dirs);
                        return ~0;
                    }
                    line[ line_l - 1 ] = '\0';
                    printf( "- %s/%s\n", pathname, line );
                    W(line);
                }
                if( E_mem_Q_file_W(file) )
                {   W(pathname);
                    V1( closedir(dir) ){}
                    for( N i = 0; i != dirs_n; i++ )
                        W( dirs[i] );
                    W(dirs);
                    return ~0;
                }
                printf( "+ %s\n", pathname );
                W(pathname);
                continue;
            }
            if( dirent->d_type == DT_UNKNOWN )
            {   struct stat stat;
                V1( lstat( pathname, &stat ))
                {   W(pathname);
                    V1( closedir(dir) ){}
                    for( N i = 0; i != dirs_n; i++ )
                        W( dirs[i] );
                    W(dirs);
                    return ~0;
                }
                W(pathname);
                if( S_ISDIR( stat.st_mode ))
                    dirent->d_type = DT_DIR;
            }
            if( dirent->d_type != DT_DIR )
            {   W(pathname);
                continue;
            }
            if( !E_mem_Q_blk_I_append( &dirs, dirs_n + 1 ))
            {   GV_(NA);
                W(pathname);
                V1( closedir(dir) ){}
                for( N i = 0; i != dirs_n; i++ )
                    W( dirs[i] );
                W(dirs);
                return ~0;
            }
            if(( E_text_Z_s0_T_eq_s0( dirs[ dirs_current ], "/" )
              && ( E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "boot" )
                || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "dev" )
                || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "etc" )
                || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "lost+found" )
                || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "media" )
                || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "mnt" )
                || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "opt" )
                || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "proc" )
                || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "run" )
                || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "sys" )
                || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "tmp" )
                || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "usr" )
                || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "var" )
              ))
            || ( E_text_Z_s0_T_eq_s0( dirs[ dirs_current ], "/home/inc" )
              && E_text_Z_s0_T_eq_s0( &dirent->d_name[0], ".local" )
              )
            || ( E_text_Z_s0_T_eq_s0( dirs[ dirs_current ], "/home/inc/moje/programy" )
              && E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "odgałęzione" )
              )
            || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], ".cache" )
            || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "caches" )
            || E_text_Z_s0_T_eq_s0( &dirent->d_name[0], "Sdk" )
            )
            {   W(pathname);
                continue;
            }
            dirs[ dirs_n ] = pathname;
            dirs_n++;
        }
    }while( dirs_n );
    W(dirs);
    return 0;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
int
main(
  int argc
, char *argv[]
){  E_base_M( argc, argv );
    if( !~E_main_I_top_dirs() )
        goto Error;
    E_base_W();
    return 0;
Error:
    E_base_W();
    return 1;
}
//==============================================================================
void
E_flow_Q_process_call_I_func( void *data
){
}
/******************************************************************************/
