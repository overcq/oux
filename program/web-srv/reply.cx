/*******************************************************************************
*   ___   workplace
*  ¦OUX¦  ‟Coux”
*  ¦Inc¦  server
*   ---   web server
*         ‘HTTP’ replies
* ©overcq                on ‟Gentoo Linux 17.1” “x86_64”             2020‒4‒13 M
*******************************************************************************/
struct E_reply_Z_status_msg
{ N code;
  Pc s;
}E_reply_S_status_msg[] =
{ { 200, "OK" }
, { 301, "Moved Permanently" }
, { 302, "Found" }
, { 400, "Bad Request" }
, { 403, "Forbidden" }
, { 404, "Not Found" }
, { 500, "Internal Server Error" }
};
N E_reply_S_status_msg_n = sizeof( E_reply_S_status_msg ) / sizeof( E_reply_S_status_msg[0] );
//==============================================================================
N
E_reply_I_data( SSL *ssl
, int fd
, Pc s
, N l
){  N l_;
    if(ssl)
        O{  if(( E_srv_S_ssl_ret = SSL_write_ex( ssl, s, l, &l_ )) != 1 )
                return ~0;
            if( !( l -= l_ ))
                break;
        }
    else
        O{  VO1( l_ = write( fd, s, l ))
                return ~0;
            if( !( l -= l_ ))
                break;
        }
    return 0;
}
N
E_reply_I_code_( SSL *ssl
, int fd
, N code
, B end
, B close
, B http_1
){  for_n( i, E_reply_S_status_msg_n )
        if( E_reply_S_status_msg[i].code == code )
        {   N l = 9 + 4 + E_text_Z_s0_R_l( E_reply_S_status_msg[i].s ) + 2;
            if( http_1 && close)
                l += E_text_Z_s0_R_l( "Connection: close\r\n" );
            if(end)
                l += 2;
            Pc s = M(l);
            if( !s )
                return ~0;
            Pc s_1 = E_text_Z_s_P_s0_copy( s, "HTTP/1." );
            if( http_1 )
                E_text_Z_s_P_s0_copy( s_1, "1 " );
            else
                E_text_Z_s_P_s0_copy( s_1, "0 " );
            E_text_Z_n_N_s( s + 9 + 3, E_reply_S_status_msg[i].code, sizeof( E_reply_S_status_msg[i].code ), 10 );
            *( s + 9 + 3 ) = ' ';
            s_1 = E_text_Z_s_P_s0_copy( E_text_Z_s_P_s0_copy( s + 9 + 4, E_reply_S_status_msg[i].s ), "\r\n" );
            if( http_1 && close )
                s_1 = E_text_Z_s_P_s0_copy( s_1, "Connection: close\r\n" );
            if(end)
                E_text_Z_s_P_s0_copy( s_1, "\r\n" );
            G_(); Gs_l( s, 9 + 4 + E_text_Z_s0_R_l( E_reply_S_status_msg[i].s ));
            if( !~E_reply_I_data( ssl, fd, s, l ))
            {   W(s);
                return ~0;
            }
            W(s);
            return 0;
        }
    E_reply_I_code_( ssl, fd, 500, end, close, http_1 );
    return ~0;
}
N
E_reply_I_code( SSL *ssl
, int fd
, N code
, B close
, B http_1
){  return E_reply_I_code_( ssl, fd, code, yes, close, http_1 );
}
/******************************************************************************/
