/*******************************************************************************
*   ___   workplace
*  ¦OUX¦  ‟Coux”
*  ¦Inc¦  server
*   ---   web server
*         server
* ©overcq                on ‟Gentoo Linux 17.1” “x86_64”             2020‒4‒11 P
*******************************************************************************/
//TODO set_cookie
#define S_server_name       "OUX/C+ web-srv"
#define S_php_index_file    "index.php"
#define S_html_index_file   "index.html"
#define S_listen_backlog    1024
#define S_request_buffer_l  4096
#define S_read_buffer_l     ( 1096 * 64 )
#define S_keepalive_timeout 5
#define S_system_idle_time  0
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
int E_srv_S_epoll_fd;
struct epoll_event *E_srv_S_ee_ready = 0;
N E_srv_S_ee_ready_n = 0;
struct E_srv_Z_srv
{ N virtualhost_i;
  Pc canonical;
  int *sfd;
  N sfd_n;
} *E_srv_S_srv;
N E_srv_S_srv_n = 0;
struct E_srv_Z_accept
{ int epoll_fd;
  int listen_sock;
  struct sockaddr peer_addr;
  int file;
  off_t file_size;
  Pc buf, buf_, buf_2;
  N buf_l;
  Z_clock_time keepalive_tv;
  off_t l;
  B stream;
} *E_srv_S_accept;
N E_srv_S_accept_n = 0;
int E_srv_S_epoll_pipe[2] = { -1, -1 };
int E_srv_S_subprocess_pipe[2];
//==============================================================================
N
E_srv_M( void
){ for_n( i, E_conf_S_virtualhost_n )
    {   struct addrinfo ai_hints =
        { .ai_flags = AI_CANONNAME | AI_NUMERICSERV
        , .ai_family = 0
        , .ai_socktype = SOCK_STREAM
        , .ai_protocol = 0
        };
        struct addrinfo *ai;
        N l = E_text_Z_n_N_s_G( E_conf_S_virtualhost[i].port, sizeof( E_conf_S_virtualhost[i].port ), 10 );
        C port[l];
        E_text_Z_n_N_s( &port[0] + l, E_conf_S_virtualhost[i].port, sizeof( E_conf_S_virtualhost[i].port ), 10 );
        port[l] = '\0';
        V0( getaddrinfo( E_conf_S_virtualhost[i].ip, &port[0], &ai_hints, &ai ))
        {   E_srv_W();
            return ~0;
        }
        if( !E_mem_Q_blk_I_append( &E_srv_S_srv, 1 ))
        {   freeaddrinfo(ai);
            E_srv_W();
            return ~0;
        }
        E_srv_S_srv_n++;
        E_srv_S_srv[ E_srv_S_srv_n - 1 ].virtualhost_i = i;
        l = E_text_Z_s0_R_0_l( ai->ai_canonname );
        E_srv_S_srv[ E_srv_S_srv_n - 1 ].canonical = M(l);
        if( !E_srv_S_srv[ E_srv_S_srv_n - 1 ].canonical )
        {   freeaddrinfo(ai);
            E_srv_W();
            return ~0;
        }
        E_text_Z_s0_P_copy_0( E_srv_S_srv[ E_srv_S_srv_n - 1 ].canonical, ai->ai_canonname );
        Mt_( E_srv_S_srv[ E_srv_S_srv_n - 1 ].sfd, 0 );
        if( !E_srv_S_srv[ E_srv_S_srv_n - 1 ].sfd )
        {   freeaddrinfo(ai);
            E_srv_W();
            return ~0;
        }
        E_srv_S_srv[ E_srv_S_srv_n - 1 ].sfd_n = 0;
        struct addrinfo *ai_1 = ai;
        do
        {   struct sockaddr_in *sa;
            struct sockaddr_in6 *sa6;
            if( ai_1->ai_family == AF_INET )
                sa = (P)ai_1->ai_addr;
            else
                sa6 = (P)ai_1->ai_addr;
            int sfd;
            V1( sfd = socket( ai_1->ai_family, SOCK_STREAM, 0 ))
            {   freeaddrinfo(ai);
                E_srv_W();
                return ~0;
            }
            if( !E_mem_Q_blk_I_append( &E_srv_S_srv[ E_srv_S_srv_n - 1 ].sfd, 1 ))
            {   freeaddrinfo(ai);
                E_srv_W();
                return ~0;
            }
            E_srv_S_srv[ E_srv_S_srv_n - 1 ].sfd_n++;
            E_srv_S_srv[ E_srv_S_srv_n - 1 ].sfd[ E_srv_S_srv[ E_srv_S_srv_n - 1 ].sfd_n - 1 ] = sfd;
            V0( bind( sfd, ai_1->ai_addr, ai_1->ai_family == AF_INET ? sizeof( *sa ) : sizeof( *sa6 )))
            {   freeaddrinfo(ai);
                E_srv_W();
                return ~0;
            }
            V0( listen( sfd, S_listen_backlog ))
            {   freeaddrinfo(ai);
                E_srv_W();
                return ~0;
            }
            ai_1 = ai_1->ai_next;
        }while( ai_1 );
        freeaddrinfo(ai);
        V1( E_srv_S_epoll_fd = epoll_create1(0) )
        {   E_srv_W();
            return ~0;
        }
        struct epoll_event ee;
        ee.events = EPOLLIN;
        for_n( i, E_srv_S_srv_n )
        {   for_n( j, E_srv_S_srv[i].sfd_n )
            {   ee.data.fd = E_srv_S_srv[i].sfd[j];
                V0( epoll_ctl( E_srv_S_epoll_fd, EPOLL_CTL_ADD, E_srv_S_srv[i].sfd[j], &ee ))
                {   E_srv_W();
                    return ~0;
                }
                E_srv_S_ee_ready_n++;
            }
        }
        V0( pipe( &E_srv_S_epoll_pipe[0] ))
        {   E_srv_W();
            return ~0;
        }
        ee.data.fd = E_srv_S_epoll_pipe[0];
        V0( epoll_ctl( E_srv_S_epoll_fd, EPOLL_CTL_ADD, E_srv_S_epoll_pipe[0], &ee ))
        {   V0( close( E_srv_S_epoll_pipe[0] )){}
            V0( close( E_srv_S_epoll_pipe[1] )){}
            E_srv_W();
            return ~0;
        }
        E_srv_S_ee_ready_n++;
        Mt_( E_srv_S_ee_ready, E_srv_S_ee_ready_n );
        if( !E_srv_S_ee_ready )
        {   V0( close( E_srv_S_epoll_pipe[0] )){}
            V0( close( E_srv_S_epoll_pipe[1] )){}
            E_srv_W();
            return ~0;
        }
    }
    return 0;
}
void
E_srv_W( void
){  for_n( i, E_srv_S_srv_n )
    {   W( E_srv_S_srv[i].canonical );
        for_n( j, E_srv_S_srv[i].sfd_n )
        {   V0( close( E_srv_S_srv[i].sfd[j] )){}
        }
        W( E_srv_S_srv[i].sfd );
    }
    W( E_srv_S_srv );
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
N
E_srv_Q_reply_I_add_header_1( Pc *headers
, N *headers_l
, Pc s
){  N l;
    if( !( l = E_text_Z_s0_I_append( headers, s )))
    {   E_mem_Q_blk_I_rem( headers, *headers_l, l );
        return 0;
    }
    *headers_l += l;
    return l;
}
N
E_srv_Q_reply_I_add_header_1_( Pc *headers
, N *headers_l
, Pc s
, Pc s_end
){  N l;
    if( !( l = E_text_Z_s_I_append( headers, s, s_end )))
    {   E_mem_Q_blk_I_rem( headers, *headers_l, l );
        return 0;
    }
    *headers_l += l;
    return l;
}
N
E_srv_Q_reply_I_add_header_2( Pc *headers
, N *headers_l
){  N l;
    if( !( l = E_text_Z_s0_I_append( headers, "\r\n" )))
        return 0;
    *headers_l += l;
    return l;
}
N
E_srv_Q_reply_I_add_header( Pc *headers
, N *headers_l
, Pc s
){  N headers_l_ = *headers_l;
    if( !E_srv_Q_reply_I_add_header_1( headers, headers_l, s ))
        return 0;
    if( !E_srv_Q_reply_I_add_header_2( headers, headers_l ))
    {   E_mem_Q_blk_I_rem( headers, headers_l_, *headers_l - headers_l_ );
        *headers_l = headers_l_;
        return 0;
    }
    return *headers_l - headers_l_;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void
E_srv_D_srv_I_unblock( P p
){  C c;
    VO1_( write( E_srv_S_epoll_pipe[1], &c, sizeof(C) ));
}
D( srv, srv )
{   Xh_A( E_srv_D_srv_I_unblock );
    I_D
    {   N n;
        Xh_B_();
        VO1_( n = epoll_wait( E_srv_S_epoll_fd, E_srv_S_ee_ready, E_srv_S_ee_ready_n, E_srv_S_accept_n ? S_system_idle_time : -1 ));
        Xh_B()
            break;
        for_n( i, n )
        {   for_n( j, E_srv_S_accept_n )
                if( E_srv_S_accept[j].epoll_fd == E_srv_S_ee_ready[i].data.fd )
                    break;
            if( j != E_srv_S_accept_n )
                continue;
            G_(); Gs_( "połączenie" ); Gd(i);
            int listen_sock;
            struct sockaddr peer_addr;
            socklen_t sock_l = sizeof( peer_addr );
            VO1( listen_sock = accept( E_srv_S_ee_ready[i].data.fd, &peer_addr, &sock_l ))
            {   E_srv_W();
                V();
            }
            if( !E_mem_Q_blk_I_append( &E_srv_S_accept, 1 ))
            {   E_reply_I_code( listen_sock, 500 );
                continue;
            }
            E_srv_S_accept_n++;
            E_srv_S_accept[ E_srv_S_accept_n - 1 ].epoll_fd = E_srv_S_ee_ready[i].data.fd;
            E_srv_S_accept[ E_srv_S_accept_n - 1 ].listen_sock = listen_sock;
            E_srv_S_accept[ E_srv_S_accept_n - 1 ].peer_addr = peer_addr;
            E_srv_S_accept[ E_srv_S_accept_n - 1 ].file = -1;
            E_srv_S_accept[ E_srv_S_accept_n - 1 ].buf = M( S_request_buffer_l );
            if( !E_srv_S_accept[ E_srv_S_accept_n - 1 ].buf )
            {   E_reply_I_code( listen_sock, 500 );
                continue;
            }
            E_srv_S_accept[ E_srv_S_accept_n - 1 ].buf_2 = 0;
            E_srv_S_accept[ E_srv_S_accept_n - 1 ].buf_l = 0;
            _gettime( &E_srv_S_accept[ E_srv_S_accept_n - 1 ].keepalive_tv );
            Z_clock_time tv;
            tv.tv_sec = S_keepalive_timeout;
            tv.Z_clock_time_minor_field = 0;
            _timeradd( &E_srv_S_accept[ E_srv_S_accept_n - 1 ].keepalive_tv, &tv, &E_srv_S_accept[ E_srv_S_accept_n - 1 ].keepalive_tv );
            G_(); Gs_( "połączenie przyjęte" );
        }
        for_n_( i, E_srv_S_accept_n )
        {   if( E_srv_S_accept[i].file == -1 )
            {   if( !E_srv_S_accept[i].buf_l )
                {   fd_set readfds;
Next:               FD_ZERO( &readfds );
                    FD_SET( E_srv_S_accept[i].listen_sock, &readfds );
                    struct timeval tv = { 0, 0 };
                    int e;
                    V1e( select( E_srv_S_accept[i].listen_sock + 1, &readfds, 0, 0, &tv ), e )
                    {   if( e == EINTR || e == EAGAIN )
                            goto Next;
                        goto End_1;
                    }
                    if( !FD_ISSET( E_srv_S_accept[i].listen_sock, &readfds ))
                    {   Z_clock_time tv;
                        _gettime( &tv );
                        if( _timercmp( &tv, <, &E_srv_S_accept[i].keepalive_tv ))
                            continue;
                        goto End_1;
                    }
                    VO1( E_srv_S_accept[i].buf_l = read( E_srv_S_accept[i].listen_sock, E_srv_S_accept[i].buf, S_request_buffer_l ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_1;
                    }
                    G_(); Gs_( "odczytano nagłówek" ); Gd( E_srv_S_accept[i].buf_l );
                    if( !E_srv_S_accept[i].buf_l )
                        goto End_1;
                }else
                {   fd_set readfds;
Next_1:             FD_ZERO( &readfds );
                    FD_SET( E_srv_S_accept[i].listen_sock, &readfds );
                    struct timeval tv = { 0, 0 };
                    int e;
                    V1e( select( E_srv_S_accept[i].listen_sock + 1, &readfds, 0, 0, &tv ), e )
                    {   if( e == EINTR || e == EAGAIN )
                            goto Next_1;
                        goto End_1;
                    }
                    if( FD_ISSET( E_srv_S_accept[i].listen_sock, &readfds ))
                    {   E_text_Z_s_P_copy_( E_srv_S_accept[i].buf, E_srv_S_accept[i].buf_, E_srv_S_accept[i].buf + E_srv_S_accept[i].buf_l );
                        N l;
                        VO1( l = read( E_srv_S_accept[i].listen_sock, E_srv_S_accept[i].buf + E_srv_S_accept[i].buf_l, S_request_buffer_l - E_srv_S_accept[i].buf_l ))
                        {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                            goto End_1;
                        }
                        G_(); Gs_( "doczytano nagłówek" ); Gd(l);
                        E_srv_S_accept[i].buf_l += l;
                    }
                }
                G_(); Gs_( "parsowanie nagłówka" );
                Pc s = E_text_Z_s_R_search_c( E_srv_S_accept[i].buf, E_srv_S_accept[i].buf + E_srv_S_accept[i].buf_l, '\n' );
                if( s == E_srv_S_accept[i].buf + E_srv_S_accept[i].buf_l
                || s == E_srv_S_accept[i].buf
                || *( s - 1 ) != '\r'
                ){  E_reply_I_code( E_srv_S_accept[i].listen_sock, 400 );
                    goto End_1;
                }
                G_(); Gd( E_srv_S_accept[i].buf_l ); Gs_l( E_srv_S_accept[i].buf, E_srv_S_accept[i].buf_l );
                *( s - 1 ) = '\0';
                s = E_text_Z_s0_R_search_c( E_srv_S_accept[i].buf, ' ' );
                if( !*s )
                {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 400 );
                    goto End_1;
                }
                *s = '\0';
                Pc path = s + 1;
                B post = E_text_Z_s0_T_eq( E_srv_S_accept[i].buf, "POST" );
                if( !post
                && !E_text_Z_s0_T_eq( E_srv_S_accept[i].buf, "GET" )
                ){  E_reply_I_code( E_srv_S_accept[i].listen_sock, 400 );
                    goto End_1;
                }
                Pc s_1 = E_text_Z_s0_R_search_last_c( path, ' ' );
                *s_1 = '\0';
                if( !E_text_Z_s0_T_eq( s_1 + 1, "HTTP/1.1" )
                //&& !E_text_Z_s0_T_eq( s_1 + 1, "HTTP/1.0" )
                )
                {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 400 );
                    goto End_1;
                }
                Pc query = E_text_Z_s0_R_search_c( s + 1, '?' );
                if( *query )
                {   *query = '\0';
                    query++;
                }
                ///unescape
                for( Pc s_1 = path, s; *( s = E_text_Z_s0_R_search_c( s_1, '+' )); s_1 = s + 1 )
                    *s_1 = ' ';
                for( Pc s_1 = path, s; *( s = E_text_Z_s0_R_search_c( s_1, '%' )); s_1 = s + 1 )
                {   if( !*( s + 1 )
                    || !*( s + 2 )
                    )
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 400 );
                        goto End_1;
                    }
                    C c = E_text_Z_s_R_n( s + 1, s + 3, &s_1, 16 );
                    if( s_1 != s + 3 )
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 400 );
                        goto End_1;
                    }
                    if( !E_mem_Q_blk_I_rem( &E_srv_S_accept[i].buf, s + 1 - E_srv_S_accept[i].buf, 2 ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_1;
                    }
                    if( !E_mem_Q_blk_I_append( &E_srv_S_accept[i].buf, 2 ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_1;
                    }
                    *s = c;
                }
                if( *( s + 1 ) != '/' )
                {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 400 );
                    goto End_1;
                }
                for_n( j, E_srv_S_srv_n )
                {   for_n( k, E_srv_S_srv[j].sfd_n )
                        if( E_srv_S_srv[j].sfd[k] == E_srv_S_ee_ready[i].data.fd )
                            goto End;
                }
End:            ;
                N l = E_text_Z_s0_R_0_l( E_conf_S_virtualhost[ E_srv_S_srv[j].virtualhost_i ].root_path ) + 1;
                s = path - 1;
                path = M(l);
                if( !path )
                {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                    goto End_1;
                }
                Pc path_ = E_text_Z_s0_P_copy( path, E_conf_S_virtualhost[ E_srv_S_srv[j].virtualhost_i ].root_path );
                *path_ = '/';
                N path_rel_i = path_ - path;
                path_++;
                ///Normalizacja ścieżki żądania: eliminacja powtórzonych separatorów, sprawdzenie, czy nie wychodzi poza root_path.
                Pc s_2 = path;
                N path_n = 0;
                while(( s_2 = E_text_Z_s_R_search_c( s_2 + 1, path_, '/' )) != path_ )
                    path_n++;
                N path_n_0 = path_n;
                O{  s_1 = E_text_Z_s0_R_search_c( s + 1, '/' );
                    if( !*s_1 )
                        break;
                    if( s_1 == s + 1 )
                    {   s = s_1;
                        continue;
                    }
                    for( s_2 = s + 1; s_2 != s_1; s_2++ )
                        if( *s_2 != '.' )
                            break;
                    if( s_2 == s_1 )
                    {   if( path_n < path_n_0 + ( s_1 - ( s + 1 ) - 1 ))
                        {   W(path);
                            E_reply_I_code( E_srv_S_accept[i].listen_sock, 400 );
                            goto End_1;
                        }
                        if( s_1 - ( s + 1 ) - 1 > 1 )
                        {   path_n -= s_1 - ( s + 1 ) - 1;
                            s_2 = path;
                            for_n( k, path_n )
                                s_2 = E_text_Z_s_R_search_c( s_2 + 1, path_, '/' );
                            if( !E_mem_Q_blk_I_rem( &path, s_2 + 1 - path, path_ - ( s_2 + 1 )))
                            {   W(path);
                                E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                                goto End_1;
                            }
                            path_ = s_2 + 1;
                        }
                    }else
                    {   N path_i = path_ - path;
                        if( !E_mem_Q_blk_I_append( &path, s_1 + 1 - ( s + 1 )))
                        {   W(path);
                            E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                            goto End_1;
                        }
                        path_ = path + path_i;
                        path_ = E_text_Z_s_P_copy_( path_, s + 1, s_1 + 1 );
                        path_n++;
                    }
                    s = s_1;
                }
                ///Dodanie ostatniego wpisu na ścieżce lub pliku index.
                if( s_1 - ( s + 1 ))
                {   N path_i = path_ - path;
                    if( !E_mem_Q_blk_I_append( &path, s_1 - ( s + 1 )))
                    {   W(path);
                        E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_1;
                    }
                    path_ = path + path_i;
                    path_ = E_text_Z_s_P_copy_( path_, s + 1, s_1 );
                    *path_ = '\0';
                }else
                {   N path_i = path_ - path;
                    if( !E_mem_Q_blk_I_append( &path, E_text_Z_s0_R_l( S_php_index_file )))
                    {   W(path);
                        E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_1;
                    }
                    path_ = path + path_i;
                    path_ = E_text_Z_s0_P_copy( path_, S_php_index_file );
                    *path_ = '\0';
                    V0( access( path, F_OK ))
                    {   if( !E_mem_Q_blk_I_rem( &path, path_i, E_text_Z_s0_R_l( S_php_index_file )))
                        {   W(path);
                            E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                            goto End_1;
                        }
                        if( !E_mem_Q_blk_I_append( &path, E_text_Z_s0_R_l( S_html_index_file )))
                        {   W(path);
                            E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                            goto End_1;
                        }
                        path_ = path + path_i;
                        path_ = E_text_Z_s0_P_copy( path_, S_html_index_file );
                        *path_ = '\0';
                    }
                }
                G_(); Gs(path);
                B gz = no;
                B keep_alive = yes;
                N post_l = 0;
                ///Przetworzenie przychodzących nagłówków.
                s = E_text_Z_s_R_search_c( E_srv_S_accept[i].buf, E_srv_S_accept[i].buf + E_srv_S_accept[i].buf_l, '\n' );
                Pc accept = 0, accept_charset = 0, accept_encoding = 0, accept_language = 0, connection = 0, cookie = 0, host = 0, referrer = 0, set_cookie = 0, user_agent = 0;
                O{  s_1 = E_text_Z_s_R_search_c( s + 1, E_srv_S_accept[i].buf + E_srv_S_accept[i].buf_l, '\n' );
                    if( s_1 == E_srv_S_accept[i].buf + E_srv_S_accept[i].buf_l )
                    {   W(path);
                        E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_1;
                    }
                    if( *( s_1 - 1 ) != '\r' )
                    {   W(path);
                        E_reply_I_code( E_srv_S_accept[i].listen_sock, 400 );
                        goto End_1;
                    }
                    if( s + 1 + 1 == s_1 )
                    {   E_srv_S_accept[i].buf_l -= s_1 + 1 - E_srv_S_accept[i].buf;
                        E_srv_S_accept[i].buf_ = s_1 + 1;
                        break;
                    }
                    s_2 = E_text_Z_s_R_search_c( s + 1, s_1, ':' );
                    if( s_2 == s_1 )
                    {   W(path);
                        E_reply_I_code( E_srv_S_accept[i].listen_sock, 400 );
                        goto End_1;
                    }
                    *( s_1 - 1 ) = '\0';
                    if( E_text_Z_s_T_eq( s + 1, s_2, "Accept" ))
                    {   accept = s_2 + 1;
                        while( *accept == ' ' )
                            accept++;
                    }else if( E_text_Z_s_T_eq( s + 1, s_2, "Accept-Charset" ))
                    {   accept_charset = s_2 + 1;
                        while( *accept_charset == ' ' )
                            accept_charset++;
                    }else if( E_text_Z_s_T_eq( s + 1, s_2, "Accept-Encoding" ))
                    {   accept_encoding = s_2 + 1;
                        while( *accept_encoding == ' ' )
                            accept_encoding++;
                        s_2 = E_text_Z_s0_R_search_s0( accept_encoding, "gzip" );
                        if( *s_2 )
                            gz = yes;
                    }else if( E_text_Z_s_T_eq( s + 1, s_2, "Accept-Language" ))
                    {   accept_language = s_2 + 1;
                        while( *accept_language == ' ' )
                            accept_language++;
                    }else if( E_text_Z_s_T_eq( s + 1, s_2, "Connection" ))
                    {   connection = s_2 + 1;
                        while( *connection == ' ' )
                            connection++;
                        s_2 = E_text_Z_s0_R_search_s0( connection, "close" );
                        if( *s_2 )
                            keep_alive = no;
                    }else if( E_text_Z_s_T_eq( s + 1, s_2, "Content-Type" ))
                    {   if(post)
                        {   s_2 = E_text_Z_s0_R_search_s0( s_2 + 1, "application/x-www-form-urlencoded" );
                            if( s_2 == s_1 - 1 )
                            {   W(path);
                                E_reply_I_code( E_srv_S_accept[i].listen_sock, 400 );
                                goto End_1;
                            }
                        }
                    }else if( E_text_Z_s_T_eq( s + 1, s_2, "Content-Length" ))
                    {   if(post)
                        {   while( *( s_2 + 1 ) == ' ' )
                                s_2++;
                            post_l = E_text_Z_s_R_n10( s_2 + 1, s_1 - 1, &s_2 );
                            if( s_2 != s_1 - 1 )
                            {   W(path);
                                E_reply_I_code( E_srv_S_accept[i].listen_sock, 400 );
                                goto End_1;
                            }
                        }
                    }else if( E_text_Z_s_T_eq( s + 1, s_2, "Cookie" ))
                    {   cookie = s_2 + 1;
                        while( *cookie == ' ' )
                            cookie++;
                    }else if( E_text_Z_s_T_eq( s + 1, s_2, "Host" ))
                    {   host = s_2 + 1;
                        while( *host == ' ' )
                            host++;
                    }else if( E_text_Z_s_T_eq( s + 1, s_2, "Referer" ))
                    {   referrer = s_2 + 1;
                        while( *referrer == ' ' )
                            referrer++;
                    }else if( E_text_Z_s_T_eq( s + 1, s_2, "Set-Cookie" ))
                    {   set_cookie = s_2 + 1;
                        while( *set_cookie == ' ' )
                            set_cookie++;
                    }else if( E_text_Z_s_T_eq( s + 1, s_2, "User-Agent" ))
                    {   user_agent = s_2 + 1;
                        while( *user_agent == ' ' )
                            user_agent++;
                    }
                    s = s_1;
                }
                Pc body = s_1 + 1;
                ///Przesunięcie o dane wysłane w formularzu.
                if(post)
                {   if( post_l > E_srv_S_accept[i].buf_l - ( E_srv_S_accept[i].buf_ - E_srv_S_accept[i].buf ) - 1 )
                    {   W(path);
                        E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_1;
                    }
                    E_srv_S_accept[i].buf_ += post_l;
                    E_srv_S_accept[i].buf_l -= post_l;
                }
                B php = E_text_Z_s0_T_ends( path, ".php" );
                if(php)
                {   gz = no; ///Nie obsługuje kompresji strumienia PHP.
                    V0( access( path, F_OK ))
                    {   W(path);
                        E_reply_I_code( E_srv_S_accept[i].listen_sock, 404 );
                        goto End_1;
                    }
                    N args_n = 1;
                    struct E_flow_Z_args *Mt_( args, args_n );
                    if( !args )
                    {   W(path);
                        E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_1;
                    }
                    V0( pipe( &E_srv_S_subprocess_pipe[0] ))
                    {   W(args);
                        W(path);
                        E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_1;
                    }
                    E_srv_S_accept[i].file = E_srv_S_subprocess_pipe[0];
                    pid_t pid = E_flow_I_fork_I_begin();
                    if( !pid )
                    {   E_flow_I_fork_I_start();
                        V0( close( STDIN_FILENO )){}
                        VO1_( dup2( E_srv_S_subprocess_pipe[1], STDOUT_FILENO ));
                        V0( close( E_srv_S_subprocess_pipe[1] )){}
                        environ = Mt( sizeof( Pc ), 22 );
                        if( !environ )
                        {   G_(); V();
                        }
                        environ[0] = "GATEWAY_INTERFACE=CGI/1.1";
                        //TODO Adres IP, a nie nazwa.
                        l = E_text_Z_s0_R_l( "SERVER_ADDR=" ) + E_text_Z_s0_R_l( E_srv_S_srv[j].canonical ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "SERVER_ADDR=" ), E_srv_S_srv[j].canonical );
                        environ[1] = s;
                        l = E_text_Z_s0_R_l( "SERVER_NAME=" ) + E_text_Z_s0_R_l( E_srv_S_srv[j].canonical ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "SERVER_NAME=" ), E_srv_S_srv[j].canonical );
                        environ[2] = s;
                        environ[3] = "SERVER_SOFTWARE=" S_server_name;
                        environ[4] = "SERVER_PROTOCOL=HTTP/1.1";
                        l = E_text_Z_s0_R_l( "REQUEST_METHOD=" ) + E_text_Z_s0_R_l( post ? "POST" : "GET" ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "REQUEST_METHOD=" ), post ? "POST" : "GET" );
                        environ[5] = s;
                        l = E_text_Z_s0_R_l( "QUERY_STRING=" ) + E_text_Z_s0_R_l(query) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "QUERY_STRING=" ), query );
                        environ[6] = s;
                        l = E_text_Z_s0_R_l( "HTTP_ACCEPT=" ) + ( accept ? E_text_Z_s0_R_l(accept) : 0 ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "HTTP_ACCEPT=" ), accept ? accept : "" );
                        environ[7] = s;
                        l = E_text_Z_s0_R_l( "HTTP_ACCEPT_CHARSET=" ) + ( accept_charset ? E_text_Z_s0_R_l( accept_charset ) : 0 ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "HTTP_ACCEPT_CHARSET=" ), accept_charset ? accept_charset : "" );
                        environ[8] = s;
                        l = E_text_Z_s0_R_l( "HTTP_ACCEPT_ENCODING=" ) + ( accept_encoding ? E_text_Z_s0_R_l( accept_encoding ) : 0 ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "HTTP_ACCEPT_ENCODING=" ), accept_encoding ? accept_encoding : "" );
                        environ[9] = s;
                        l = E_text_Z_s0_R_l( "HTTP_ACCEPT_LANGUAGE=" ) + ( accept_language ? E_text_Z_s0_R_l( accept_language ) : 0 ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "HTTP_ACCEPT_LANGUAGE=" ), accept_language ? accept_language : "" );
                        environ[10] = s;
                        l = E_text_Z_s0_R_l( "HTTP_CONNECTION=" ) + ( connection ? E_text_Z_s0_R_l(connection) : 0 ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "HTTP_CONNECTION=" ), connection ? connection : "" );
                        environ[11] = s;
                        l = E_text_Z_s0_R_l( "HTTP_COOKIE=" ) + ( cookie ? E_text_Z_s0_R_l(cookie) : 0 ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "HTTP_COOKIE=" ), cookie ? cookie : "" );
                        environ[12] = s;
                        l = E_text_Z_s0_R_l( "HTTP_HOST=" ) + ( host ? E_text_Z_s0_R_l(host) : 0 ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "HTTP_HOST=" ), host ? host : "" );
                        environ[13] = s;
                        l = E_text_Z_s0_R_l( "HTTP_REFERER=" ) + ( referrer ? E_text_Z_s0_R_l(referrer) : 0 ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "HTTP_REFERER=" ), referrer ? referrer : "" );
                        environ[14] = s;
                        l = E_text_Z_s0_R_l( "HTTP_SET_COOKIE=" ) + ( set_cookie ? E_text_Z_s0_R_l( set_cookie ) : 0 ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "HTTP_SET_COOKIE=" ), set_cookie ? set_cookie : "" );
                        environ[15] = s;
                        l = E_text_Z_s0_R_l( "HTTP_USER_AGENT=" ) + ( user_agent ? E_text_Z_s0_R_l( user_agent ) : 0 ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "HTTP_USER_AGENT=" ), user_agent ? user_agent : "" );
                        environ[16] = s;
                        l = E_text_Z_s0_R_l( "HTTPS=" ) + ( 0 ) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "HTTPS=" ), "" );
                        environ[17] = s;
                        C ip[INET6_ADDRSTRLEN];
                        N16 port;
                        if( E_srv_S_accept[i].peer_addr.sa_family == AF_INET )
                        {   struct sockaddr_in *sa = (P)&E_srv_S_accept[i].peer_addr;
                            Vp_( inet_ntop( E_srv_S_accept[i].peer_addr.sa_family, &sa->sin_addr, &ip[0], sizeof(ip) ));
                            port = ntohs( sa->sin_port );
                        }else
                        {   struct sockaddr_in6 *sa = (P)&E_srv_S_accept[i].peer_addr;
                            Vp_( inet_ntop( E_srv_S_accept[i].peer_addr.sa_family, &sa->sin6_addr, &ip[0], sizeof(ip) ));
                            port = ntohs( sa->sin6_port );
                        }
                        l = E_text_Z_s0_R_l( "REMOTE_ADDR=" ) + E_text_Z_s0_R_l(ip) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        E_text_Z_s0_P_copy_0( E_text_Z_s0_P_copy( s, "REMOTE_ADDR=" ), ip );
                        environ[18] = s;
                        N port_l = E_text_Z_n_N_s_G( port, sizeof(port), 10 );
                        l = E_text_Z_s0_R_l( "REMOTE_PORT=" ) + port_l + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        C port_s[ port_l ];
                        E_text_Z_n_N_s( &port_s[ port_l ], port, sizeof(port), 10 );
                        E_text_Z_s_P_copy_0_( E_text_Z_s0_P_copy( s, "REMOTE_PORT=" ), &port_s[0], &port_s[0] + port_l );
                        environ[19] = s;
                        l = E_text_Z_s0_R_l( "REQUEST_URI=" ) + E_text_Z_s0_R_l( path + path_rel_i ) + 1 + E_text_Z_s0_R_l(query) + 1;
                        s = M(l);
                        if( !s )
                        {   G_(); V();
                        }
                        s_1 = E_text_Z_s0_P_copy( E_text_Z_s0_P_copy( s, "REQUEST_URI=" ), path + path_rel_i );
                        if( *query )
                        {   *s_1 = '?';
                            s_1++;
                        }
                        E_text_Z_s0_P_copy_0( s_1, query );
                        environ[20] = s;
                        environ[21] = 0;
                        if( !post )
                        {   args[0].argc = 8;
                            args[0].argv = ( Pc[] ){ "php", "-f", "run.php", "--", path, query, path + path_rel_i, E_conf_S_virtualhost[ E_srv_S_srv[j].virtualhost_i ].root_path, 0 };
                        }else
                        {   *( body + post_l ) = '\0';
                            args[0].argc = 9;
                            args[0].argv = ( Pc[] ){ "php", "-f", "run.php", "--", path, query, path + path_rel_i, E_conf_S_virtualhost[ E_srv_S_srv[j].virtualhost_i ].root_path, body, 0 };
                        }
                        E_flow_I_fork_I_exec( 0, args, args_n );
                    }
                    E_flow_I_fork_I_end(pid);
                    W(args);
                    V0( close( E_srv_S_subprocess_pipe[1] )){}
                }else if( !gz
                || E_text_Z_s0_T_ends( path, ".gz" )
                )
                {   gz = no;
                    V1( E_srv_S_accept[i].file = open( path, O_RDONLY ))
                    {   *path_ = '\0';
                        W(path);
                        E_reply_I_code( E_srv_S_accept[i].listen_sock, 404 );
                        goto End_1;
                    }
                }else
                {   N path_i = path_ - path;
                    if( !E_mem_Q_blk_I_append( &path, 3 ))
                    {   W(path);
                        E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_1;
                    }
                    path_ = path + path_i;
                    E_text_Z_s0_P_copy_0( path_, ".gz" );
                    V1( E_srv_S_accept[i].file = open( path, O_RDONLY ))
                    {   gz = no;
                        *path_ = '\0';
                        V1( E_srv_S_accept[i].file = open( path, O_RDONLY ))
                        {   *path_ = '\0';
                            W(path);
                            E_reply_I_code( E_srv_S_accept[i].listen_sock, 404 );
                            goto End_1;
                        }
                    }
                }
                W(path);
                if( post
                && !php
                )
                {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 403 );
                    goto End_2;
                }
                E_srv_S_accept[i].stream = php;
                Pc headers = M(0);
                if( !headers )
                {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                    goto End_2;
                }
                N headers_l = 0;
                if( !E_srv_Q_reply_I_add_header_1( &headers, &headers_l, "Host: " ))
                {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                    goto End_2;
                }
                if( !E_srv_Q_reply_I_add_header_1( &headers, &headers_l, E_srv_S_srv[j].canonical ))
                {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                    goto End_2;
                }
                if( !E_srv_Q_reply_I_add_header_2( &headers, &headers_l ))
                {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                    goto End_2;
                }
                if( !E_srv_Q_reply_I_add_header( &headers, &headers_l, "Server: " S_server_name ))
                {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                    goto End_2;
                }
                E_srv_S_accept[i].l = 0;
                if( E_srv_S_accept[i].stream )
                {   if( !E_srv_Q_reply_I_add_header( &headers, &headers_l, "Transfer-Encoding: chunked" ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                }else
                {   struct stat stat;
                    V0( fstat( E_srv_S_accept[i].file, &stat ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                    E_srv_S_accept[i].file_size = stat.st_size;
                    if( !E_srv_Q_reply_I_add_header_1( &headers, &headers_l, "Content-Length: " ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                    l = E_text_Z_n_N_s_G( stat.st_size, sizeof( stat.st_size ), 10 );
                    s = M(l);
                    if( !s )
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                    E_text_Z_n_N_s( s + l, stat.st_size, sizeof( stat.st_size ), 10 );
                    if( !E_srv_Q_reply_I_add_header_1_( &headers, &headers_l, s, s + l ))
                    {   W(s);
                        E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                    W(s);
                    if( !E_srv_Q_reply_I_add_header_2( &headers, &headers_l ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                }
                if(gz)
                {   if( !E_srv_Q_reply_I_add_header( &headers, &headers_l, "Content-Encoding: gzip" ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                }
                if( keep_alive )
                {   if( !E_srv_Q_reply_I_add_header( &headers, &headers_l, "Connection: keep-alive" ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                    if( !E_srv_Q_reply_I_add_header( &headers, &headers_l, "Keep-alive: timeout=" J_s( S_keepalive_timeout ) ", max=1000" ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                }else
                    if( !E_srv_Q_reply_I_add_header( &headers, &headers_l, "Connection: close" ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                if(cookie)
                {   if( !E_srv_Q_reply_I_add_header_1( &headers, &headers_l, "Cookie: " ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                    if( !E_srv_Q_reply_I_add_header_1( &headers, &headers_l, cookie ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                    if( !E_srv_Q_reply_I_add_header_2( &headers, &headers_l ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                }
                if( set_cookie )
                {   if( !E_srv_Q_reply_I_add_header_1( &headers, &headers_l, "Set-Cookie: " ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                    if( !E_srv_Q_reply_I_add_header_1( &headers, &headers_l, set_cookie ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                    if( !E_srv_Q_reply_I_add_header_2( &headers, &headers_l ))
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                }
                if( !E_srv_Q_reply_I_add_header_2( &headers, &headers_l ))
                {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                    goto End_2;
                }
                E_reply_I_code( E_srv_S_accept[i].listen_sock, 200 );
                G_(); Gd( headers_l ); Gs_l( headers, headers_l );
                if( !~E_reply_I_data( E_srv_S_accept[i].listen_sock, headers, headers_l ))
                    goto End_2;
            }else
            {   if( !E_srv_S_accept[i].buf_2 )
                {   E_srv_S_accept[i].buf_2 = M( S_read_buffer_l );
                    if( !E_srv_S_accept[i].buf_2 )
                    {   E_reply_I_code( E_srv_S_accept[i].listen_sock, 500 );
                        goto End_2;
                    }
                }
                N l;
                VO1( l = read( E_srv_S_accept[i].file, E_srv_S_accept[i].buf_2, S_read_buffer_l ))
                    goto End_2;
                G_(); Gd(l);
                if( !E_srv_S_accept[i].stream
                && !l
                )
                    goto End_2;
                if( E_srv_S_accept[i].l + l > E_srv_S_accept[i].file_size )
                    l = E_srv_S_accept[i].file_size - E_srv_S_accept[i].l;
                E_srv_S_accept[i].l += l;
                if( E_srv_S_accept[i].stream )
                {   N l_1 = E_text_Z_n_N_s_G( l, sizeof(l), 16 ) + 2;
                    C s[ l_1 ];
                    E_text_Z_n_N_s( &s[ l_1 - 2 ], l, sizeof(l), 16 );
                    s[ l_1 - 2 ] = '\r';
                    s[ l_1 - 1 ] = '\n';
                    if( !~E_reply_I_data( E_srv_S_accept[i].listen_sock, &s[0], l_1 ))
                        goto End_2;
                }
                if( !~E_reply_I_data( E_srv_S_accept[i].listen_sock, E_srv_S_accept[i].buf_2, l ))
                    goto End_2;
                if( E_srv_S_accept[i].stream )
                {   Pc s = "\r\n";
                    if( !~E_reply_I_data( E_srv_S_accept[i].listen_sock, s, 2 ))
                        goto End_2;
                }
                if(( E_srv_S_accept[i].stream
                  && l
                )
                || ( !E_srv_S_accept[i].stream
                  && E_srv_S_accept[i].l < E_srv_S_accept[i].file_size
                ))
                    continue;
                V0( close( E_srv_S_accept[i].file )){}
                E_srv_S_accept[i].file = -1;
                _gettime( &E_srv_S_accept[i].keepalive_tv );
                Z_clock_time tv;
                tv.tv_sec = S_keepalive_timeout;
                tv.Z_clock_time_minor_field = 0;
                _timeradd( &E_srv_S_accept[i].keepalive_tv, &tv, &E_srv_S_accept[i].keepalive_tv );
                G_(); Gs_( "koniec transmisji" );
            }
            continue;
End_2:      ;
            V0( close( E_srv_S_accept[i].file )){}
End_1:      W( E_srv_S_accept[i].buf_2 );
            W( E_srv_S_accept[i].buf );
            V0( close( E_srv_S_accept[i].listen_sock )){}
            if( !E_mem_Q_blk_I_rem( &E_srv_S_accept, i, 1 ))
            {   E_srv_W();
                V();
            }
            E_srv_S_accept_n--;
            i--;
            G_(); Gs_( "koniec połączenia" );
        }
    }
}
/******************************************************************************/
