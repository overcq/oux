//-*-C-*-
/*******************************************************************************
*   ___   workplace
*  ¦OUX¦  C+
*  ¦/C+¦  bieżący integrator systemowy
*   ---   server
*         ‟rox filer” file commands
* ©overcq                on ‟Gentoo Linux 13.0” “x86_64”              2015‒7‒4 *
*******************************************************************************/
struct E_rox_filer_Z_mime_def
{ Pc *mime;
  Pc def;
}*E_rox_filer_S_mime_def;
struct E_rox_filer_Z_mime_db
{ Pc *argv;
  E_cmd_Z_argv_Z_proc *argv_proc;
  Pc *mime;
}*E_rox_filer_S_mime_db;
//==============================================================================
N
E_rox_filer_M( void
){  struct E_rox_filer_Z_mime_db *E_rox_filer_S_mime_db_ = ( struct E_rox_filer_Z_mime_db [] )
    { { ( Pc [] ){ "mplayer", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_terminal_mplayer
      , ( Pc [] )
        { "audio/play"
        , "video/play"
        , "application_vnd.rn-realmedia/play"
        , 0
        }
      }
    , { ( Pc [] ){ "timidity", "-A100a", "-a", "-C", "1", "-Ewpvseoz", "-EFchorus=n", "-EFreverb=n", "-EFvlpf=d", "-EFns=0", "-EFresamp=g", "-in", "-j", "-N", "34", "-OsSs1l", "-q", "2/100", "-s", "48kHz", "-U", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_terminal //NDFN Utworzyć procedurę listy plików ‘midi’.
      , ( Pc [] )
        { "audio_midi/play"
         //, "inode_directory/play midi"
        //, "inode_mount-point/play midi"
        , 0
        }
      }
    , { ( Pc [] ){ "mikmod", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_terminal
      , ( Pc [] )
        { "audio_x-mod/play"
        , "audio_x-it/play"
        , "audio_x-xm/play"
        , 0
        }
      }
    , { ( Pc [] ){ "mplayer", "--", 0 } //NDFN Utworzyć procedurę dołączania osobno pobranej ścieżki ‘audio’.
      , E_cmd_Z_argv_I_exec_I_terminal_mplayer
      , ( Pc [] )
        { "video_webm/play"
        , "video_x-mp4/play"
        , 0
        }
      }
    , { ( Pc [] ){ "mplayer", "-playlist", 0 }
      , E_cmd_Z_argv_I_exec_I_terminal
      , ( Pc [] )
        { "audio_x-scpls/play"
        , 0
        }
      }
    , { ( Pc [] ){ "H_func_E_desk_I_func", "play-fs", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "video/play fullscreen"
        , "application_vnd.rn-realmedia/play fullscreen"
        , 0
        }
      }
    , { ( Pc [] ){ "cr3", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "application_epub+zip/view"
        , 0
        }
      }
    , { ( Pc [] ){ "ocq", "www", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "application_xml/view"
        , "application_xml-dtd/view"
        , "application_xhtml+xml/view"
        , "application_x-mimearchive/view"
        , "message_rfc822/view"
        , "text_html/view"
        , "text_markdown/view"
        , 0
        }
      }
    , { ( Pc [] ){ "mcomix", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "application_vnd.comicbook-rar/view"
        , "application_x-cbr/view"
        , "application_x-cbz/view"
        , 0
        }
      }
    , { ( Pc [] ){ "qpdfview", 0 } //NDFN funkcja zabezpieczająca “H_bash_E_security_Q_filename_R_no_option”.
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "application_pdf/view"
        , 0
        }
      }
    , { ( Pc [] ){ "evince", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "application_postscript/view"
        , 0
        }
      }
    , { ( Pc [] ){ "qiv", "-DeilnRt", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_terminal
      , ( Pc [] )
        { "image/preview"
        , 0
        }
      }
    , { ( Pc [] ){ "gthumb", "-n", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "image/view"
        , 0
        }
      }
    , { ( Pc [] ){ "less", "-+F", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_terminal
      , ( Pc [] )
        { "application/preview"
        , "audio/preview"
        , "message/preview"
        , "text/preview"
        , "video/preview"
        , "application_x-cd-image/preview"
        , 0
        }
      }
    , { ( Pc [] ){ "xchm", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "application_x-chm/view"
        , 0
        }
      }
    , { ( Pc [] ){ "ocq", "text", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "text/edit"
        , "application_javascript/edit"
        , "application_json/edit"
        , "application_x-asp/edit"
        , "application_x-gtk-builder/edit"
        , "application_x-perl/edit"
        , "application_x-php/edit"
        , "application_x-shellscript/edit"
        , "application_xml/edit"
        , "application_xml-dtd/edit"
        , "application_x-mimearchive/edit"
        , "application_xslt+xml/edit"
        , "application_xhtml+xml/edit"
        , "application_x-zerosize/edit"
        , "message/edit"
        , 0
        }
      }
    , { ( Pc [] ){ "gimp", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "image_vnd.microsoft.icon/edit"
        , "image_x-xcf/edit"
        , 0
        }
      }
    , { ( Pc [] ){ "dia", "-n", "--integrated", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "application_x-dia-diagram/edit"
        , 0
        }
      }
    , { ( Pc [] ){ "env", "LANG=pl", "libreoffice", "--nologo", "-o", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "application_x-ole-storage/edit"
        , "application_vnd.oasis.opendocument.text/edit"
        , "application_vnd.oasis.opendocument.spreadsheet/edit"
        , "application_vnd.ms-excel/edit"
        , "application_vnd.sun.xml.base/edit"
        , "application_vnd.openxmlformats-officedocument.wordprocessingml.document/edit"
        , "application_vnd.openxmlformats-officedocument.presentationml.presentation/edit"
        , "application_msword/edit"
        , "application_mswrite/edit"
        , "application_vnd.ms-powerpoint/edit"
        , "application_rtf/edit"
        , 0
        }
      }
    , { ( Pc [] ){ "inscape", "-f", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "image_svg+xml/edit"
        , 0
        }
      }
    , { ( Pc [] ){ "H_func_E_desk_I_func", "note", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "application_notecase-plain/edit"
        , 0
        }
      }
    , { ( Pc [] ){ "xournal", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "application_x-xoj/edit"
        , 0
        }
      }
    , { ( Pc [] ){ "H_func_E_desk_I_func", "background", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "image_jpeg/set wallpaper"
        , "image_png/set wallpaper"
        , "inode_directory/set wallpaper"
        , "inode_mount-point/set wallpaper"
        , 0
        }
      }
    , { ( Pc [] ){ "ghex", "--", 0 }
      , E_cmd_Z_argv_I_exec_I_0
      , ( Pc [] )
        { "application/edit as binary"
        , "audio/edit as binary"
        , "image/edit as binary"
        , "message/edit as binary"
        , "text/edit as binary"
        , "video/edit as binary"
        , 0
        }
      }
    , { 0, 0, 0 }
    };
    struct E_rox_filer_Z_mime_def *E_rox_filer_S_mime_def_ = ( struct E_rox_filer_Z_mime_def [] )
    { { ( Pc [] )
        { "audio"
        , "audio_x-scpls"
        , "audio_midi"
        , "audio_x-mod"
        , "audio_x-it"
        , "audio_x-xm"
        , "video"
        , "video_webm"
        , "video_x-mp4"
        , "application_vnd.rn-realmedia"
        , 0
        }
      , "play"
      }
    , { ( Pc [] )
        { "application_javascript"
        , "application_notecase-plain"
        , "application_x-dia-diagram"
        , "application_x-gtk-builder"
        , "application_x-ole-storage"
        , "application_x-perl"
        , "application_x-php"
        , "application_x-shellscript"
        , "application_vnd.oasis.opendocument.text"
        , "application_vnd.openxmlformats-officedocument.wordprocessingml.document"
        , "application_msword"
        , "application_x-mswrite"
        , "application_rtf"
        , "application_vnd.oasis.opendocument.spreadsheet"
        , "application_vnd.ms-excel"
        , "application_vnd.openxmlformats-officedocument.presentationml.presentation"
        , "application_vnd.ms-powerpoint"
        , "application_vnd.sun.xml.base"
        , "image_x-xcf"
        , "application_x-xoj"
        , "application_x-zerosize"
        , 0
        }
      , "edit"
      }
    , { ( Pc [] )
        { "application_epub+zip"
        , "application_xml"
        , "application_xml-dtd"
        , "application_xhtml+xml"
        , "text_html"
        , "application_pdf"
        , "application_x-gzpdf"
        , "application_x-bzpdf"
        , "application_postscript"
        , "application_x-gzpostscript"
        , "application_x-bzpostscript"
        , "application_x-cbr"
        , "application_x-cbz"
        , "application_x-chm"
        , "application_x-mimearchive"
        , "message_rfc822"
        , "text_markdown"
        , "text_vnd.graphviz"
        , 0
        }
      , "view"
      }
    , { ( Pc [] )
        { "application_x-xz"
        , "application_x-lzma"
        , "application_gzip"
        , "application_x-bzip"
        , "application_x-7z-compressed"
        , "application_x-xz-compressed-tar"
        , "application_x-lzma-compressed-tar"
        , "application_x-compressed-tar"
        , "application_x-bzip-compressed-tar"
        , "application_x-tar"
        , "application_zip"
        , "application_x-rar"
        , "application_x-java-archive"
        , 0
        }
      , "unpack"
      }
    , { ( Pc [] )
        { "application"
        , "application_x-cd-image"
        , "image"
        , "message"
        , "text"
        , 0
        }
      , "preview"
      }
    , { 0, 0 }
    };
    N l = 0;
    for( struct E_rox_filer_Z_mime_db *p = E_rox_filer_S_mime_db_; p->mime; p++ )
        l++;
    Mt_( E_rox_filer_S_mime_db, l + 1 );
    if( !E_rox_filer_S_mime_db )
        return ~0;
    for_n( i, l )
    {   N l_ = 0;
        for( Pc *p = E_rox_filer_S_mime_db_[i].argv; *p; p++ )
            l_++;
        Mt_( E_rox_filer_S_mime_db[i].argv, l_ + 1 );
        if( !E_rox_filer_S_mime_db[i].argv )
            return ~0;
        for( N i_ = 0; i_ < l_; i_++ )
        {   E_rox_filer_S_mime_db[i].argv[ i_ ] = E_mem_Q_blk_M( E_text_Z_s0_R_0_l( E_rox_filer_S_mime_db_[i].argv[ i_ ] ));
            E_text_Z_s_P_s0_copy_0( E_rox_filer_S_mime_db[i].argv[ i_ ], E_rox_filer_S_mime_db_[i].argv[ i_ ] );
        }
        E_rox_filer_S_mime_db[i].argv[ l_ ] = E_rox_filer_S_mime_db_[i].argv[ l_ ];
        E_rox_filer_S_mime_db[i].argv_proc = E_rox_filer_S_mime_db_[i].argv_proc;
        l_ = 0;
        for( Pc *p = E_rox_filer_S_mime_db_[i].mime; *p; p++ )
            l_++;
        Mt_( E_rox_filer_S_mime_db[i].mime, l_ + 1 );
        if( !E_rox_filer_S_mime_db[i].mime )
            return ~0;
        for( N i_ = 0; i_ < l_; i_++ )
        {   E_rox_filer_S_mime_db[i].mime[ i_ ] = E_mem_Q_blk_M( E_text_Z_s0_R_0_l( E_rox_filer_S_mime_db_[i].mime[ i_ ] ));
            E_text_Z_s_P_s0_copy_0( E_rox_filer_S_mime_db[i].mime[ i_ ], E_rox_filer_S_mime_db_[i].mime[ i_ ] );
        }
        E_rox_filer_S_mime_db[i].mime[ l_ ] = E_rox_filer_S_mime_db_[i].mime[ l_ ];
    }
    E_rox_filer_S_mime_db[l] = E_rox_filer_S_mime_db_[l];
    l = 0;
    for( struct E_rox_filer_Z_mime_def *p = E_rox_filer_S_mime_def_; p->mime; p++ )
        l++;
    Mt_( E_rox_filer_S_mime_def, l + 1 );
    if( !E_rox_filer_S_mime_def )
        return ~0;
    for_n_( i, l )
    {   N l_ = 0;
        for( Pc *p = E_rox_filer_S_mime_def_[i].mime; *p; p++ )
            l_++;
        Mt_( E_rox_filer_S_mime_def[i].mime, l_ + 1 );
        if( !E_rox_filer_S_mime_def[i].mime )
            return ~0;
        for( N i_ = 0; i_ < l_; i_++ )
        {   E_rox_filer_S_mime_def[i].mime[ i_ ] = E_mem_Q_blk_M( E_text_Z_s0_R_0_l( E_rox_filer_S_mime_def_[i].mime[ i_ ] ));
            E_text_Z_s_P_s0_copy_0( E_rox_filer_S_mime_def[i].mime[ i_ ], E_rox_filer_S_mime_def_[i].mime[ i_ ] );
        }
        E_rox_filer_S_mime_def[i].mime[ l_ ] = E_rox_filer_S_mime_def_[i].mime[ l_ ];
        E_rox_filer_S_mime_def[i].def = E_mem_Q_blk_M( E_text_Z_s0_R_0_l( E_rox_filer_S_mime_def_[i].def ));
        E_text_Z_s_P_s0_copy_0( E_rox_filer_S_mime_def[i].def, E_rox_filer_S_mime_def_[i].def );
    }
    E_rox_filer_S_mime_def[l] = E_rox_filer_S_mime_def_[l];
    return 0;
}
void
E_rox_filer_W( void
){  for( struct E_rox_filer_Z_mime_def *p_0 = E_rox_filer_S_mime_def; p_0->mime; p_0++ )
    {   for( Pc *p_1 = p_0->mime; *p_1; p_1++ )
            E_mem_Q_blk_W( *p_1 );
        E_mem_Q_blk_W( p_0->mime );
        E_mem_Q_blk_W( p_0->def );
    }
    E_mem_Q_blk_W( E_rox_filer_S_mime_def );
    for( struct E_rox_filer_Z_mime_db *p_0 = E_rox_filer_S_mime_db; p_0->argv; p_0++ )
    {   for( Pc *p_1 = p_0->argv; *p_1; p_1++ )
            E_mem_Q_blk_W( *p_1 );
        E_mem_Q_blk_W( p_0->argv );
        for( Pc *p_1 = p_0->mime; *p_1; p_1++ )
            E_mem_Q_blk_W( *p_1 );
        E_mem_Q_blk_W( p_0->mime );
    }
    E_mem_Q_blk_W( E_rox_filer_S_mime_db );
}
//==============================================================================
N
E_rox_filer_I_func( P data
){  Pc cwd = data;
    data = E_text_Z_s0_R_0_end(data);
    Pc data_c = data;
    Pc mime = 0;
    Pc mime_action = data_c;
    Pc s, s_;
    for( s_ = data_c; *( s = E_text_Z_s0_R_c_search( s_, '/' )); s_ = s + 1 )
    {   if( s == s_ )
            continue;
        mime = mime_action;
        mime_action = s_;
    }
    if( s_ != data_c
    && *( s_ + 1 ) != '\0'
    ){  mime = mime_action;
        mime_action = s_; // Może pozostać z ukośnikami na końcu, a wtedy wyszukiwanie nie znajdzie tekstu.
    }
    data_c = E_text_Z_s0_R_0_end( data_c );
    if( !mime
    || *mime != '.'
    )
    {   mime = mime_action;
        if( E_text_Z_s0_T_s0_eq( mime, "application_octet-stream" ) //NDFN Instalować plik tego typu niezależnie od tego, czy nie ma wpisów na listach akcji.
        && *( s = E_text_Z_s0_R_c_search_last( data_c, '.' ))
        )
        {   s++;
            if( E_text_Z_s0_T_s0_eq( s, "ts" ))
                mime = "video";
        }
        for( struct E_rox_filer_Z_mime_def *p_0 = E_rox_filer_S_mime_def; p_0->mime; p_0++ )
            for( Pc *p_1 = p_0->mime; *p_1; p_1++ )
                if( E_text_Z_s0_T_s0_eq( mime, *p_1 ))
                {   mime_action = p_0->def;
                    goto End_mime_action;
                }
        return 1;
End_mime_action:;
    }else
    {   mime++;
        Pc s = E_text_Z_s_R_c_search_( mime, '/' );
        *s = '\0';
    }
    N mime_length = E_text_Z_s0_R_0_l(mime);
    s = E_mem_Q_blk_M( mime_length + E_text_Z_s0_R_0_l( mime_action ));
    E_text_Z_s_P_s0_copy( s, mime );
    *( s + mime_length - 1 ) = '/';
    E_text_Z_s_P_s0_copy_0( s + mime_length, mime_action );
    mime = s;
    if( E_text_Z_s0_T_s0_eq( mime, "video_webm/play" ))
        return yes;
    for( struct E_rox_filer_Z_mime_db *p_0 = E_rox_filer_S_mime_db; p_0->mime; p_0++ )
        for( Pc *p_1 = p_0->mime; *p_1; p_1++ )
            if( E_text_Z_s0_T_s0_eq( mime, *p_1 ))
            {   pid_t pid = E_flow_I_fork_I_begin();
                if( !pid )
                {   E_flow_I_fork_I_start();
                    Pc *argv = Mt( sizeof(P), 1 + 1 );
                    argv[0] = data_c;
                    argv[1] = 0;
                    p_0->argv_proc( cwd, p_0->argv, argv, 1 );
                }
                E_flow_I_fork_I_end(pid);
                return ~pid ? no : yes;
            }
    return yes;
}
/******************************************************************************/
