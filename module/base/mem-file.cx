//-*-C-*-
/*******************************************************************************
*   ___   publicplace
*  ¦OUX¦  C+
*  ¦/C+¦  component
*   ---   base
*         storage memory
* ©overcq                on ‟Gentoo Linux 13.0” “x86_64”              2016‒2‒5 U
*******************************************************************************/
// Obsługę plików zrobić jako obiekt pamięci implementujący niegdyś wymyślone pojęcie dostępu do bloków pamięci masowej bez obecności tzw. “wymiatania na dysk”. Teraz byłby to raczej obiekt pamięci operacyjnej do umieszczania w nim danych zachowywanych w postaci integralnej pomiędzy ‘wywaleniami’ programu. Czyli bazować na automatycznych mechanizmach systemu operacyjnego zapisujących zawartość pamięci do wcześniej gwarantowanego miejsca na dysku— dopiero w momencie konieczności, np. ‘wywalenia’ programu.
// Trzeba podjąć decyzje strukturalne co do sposobu bezpośredniego indeksowania bloków, bloku bieżącego— w przepływie wykonania funkcji ‹modułu›.
// Odczyt dostępnego bloku pamięci do podanej wielkości rozmiaru danych.
//==============================================================================
struct E_mem_Q_rel_map_blk_Z
{ N pos;
  N l;
  Pc data;
};
struct E_mem_Z_range
{ N pos;
  N pos_end;
};
struct E_mem_Q_file_Z
{ struct E_mem_Q_rel_map_blk_Z *blk; // Tablica bloków danych wczytanych uporządkowana wg pozycji danych w pliku.
  N blk_n;
  struct E_mem_Z_range *unsaved; // Tablica zakresów danych nie zapisanych uporządkowana wg pozycji danych w pliku.
  N unsaved_n;
  N pos;
  N current_blk;
  N current_blk_pos;
  int fd;
  N l;
  N st_mode;
  unsigned U_R( mode, readonly )        :1;
  unsigned U_R( mode, opened_by_fd )    :1;
  unsigned U_R( current_blk, valid )    :1;
  unsigned U_R( current_blk, valid_sob ):1;
  unsigned U_R( current_blk, valid_eob ):1;
};
//==============================================================================
_internal
B
E_mem_Q_file_Q_cache_T_pos_in( struct E_mem_Q_file_Z *file
, N pos
){  if( !file->blk_n )
        return no;
    if( U_E( file->current_blk, valid_sob ))
        return yes;
    if( U_E( file->current_blk, valid_eob ))
        return no;
    for( struct E_mem_Q_rel_map_blk_Z *blk = file->blk; blk != file->blk + file->blk_n; blk++ )
    {   if( pos < blk->pos )
            break;
        if( pos < blk->pos + blk->l )
        {   file->current_blk = blk - file->blk;
            file->current_blk_pos = pos - blk->pos;
            return yes;
        }
    }
    return no;
}
_internal
N
E_mem_Q_file_Q_cache_I_put( struct E_mem_Q_file_Z *file
, N data_pos
, N l
){  if( !file->blk_n )
    {   struct E_mem_Q_rel_map_blk_Z *new_blk = E_mem_Q_blk_I_append( &file->blk, file->blk_n = 1 );
        if( !new_blk )
            return ~0;
        new_blk->pos = data_pos;
        new_blk->data = M( new_blk->l = l );
        E_mem_Q_blk_I_copy( new_blk->data, E_base_S->E_mem_Q_file_S_buffer, l );
        file->current_blk = 0;
        file->current_blk_pos = file->pos - data_pos;
        return 0;
    }
    // Scalenie bloków danych wczytanych zawartych w bloku odczytanym z pliku.
    struct E_mem_Q_rel_map_blk_Z *blk;
    for( blk = file->blk; blk != file->blk + file->blk_n; blk++ )
        if( data_pos < blk->pos )
            break;
    if(( blk == file->blk
      && data_pos + l < blk->pos
    ) || ( blk == file->blk + file->blk_n
      && data_pos > ( blk - 1 )->pos + ( blk - 1 )->l )
    )
    {   N i = blk - file->blk;
        struct E_mem_Q_rel_map_blk_Z *new_blk = E_mem_Q_blk_I_insert( &file->blk, i, 1 );
        if( !new_blk )
            return ~0;
        file->blk_n++;
        new_blk->pos = data_pos;
        new_blk->data = M( new_blk->l = l );
        E_mem_Q_blk_I_copy( new_blk->data, E_base_S->E_mem_Q_file_S_buffer, l );
        file->current_blk = i;
        file->current_blk_pos = file->pos - data_pos;
        return 0;
    }
    struct E_mem_Q_rel_map_blk_Z *blk_begin, *blk_end;
    blk_begin = blk;
    if( blk != file->blk
    && data_pos <= ( blk - 1 )->pos + ( blk - 1 )->l
    )
        blk_begin--;
    for( ; blk != file->blk + file->blk_n; blk++ )
        if( data_pos + l < blk->pos )
            break;
    blk_end = blk - 1;
    struct E_mem_Q_rel_map_blk_Z new_blk;
    N pos_begin = J_min( blk_begin->pos, data_pos );
    N pos_end = J_max( blk_end->pos + blk_end->l, data_pos + l );
    new_blk.pos = pos_begin;
    new_blk.data = M( new_blk.l = pos_end - pos_begin );
    if( !new_blk.data )
        return ~0;
    E_mem_Q_blk_I_copy( new_blk.data + ( data_pos - new_blk.pos ), E_base_S->E_mem_Q_file_S_buffer, l );
    blk = blk_begin;
    O{  E_mem_Q_blk_I_copy( new_blk.data + ( blk->pos - new_blk.pos ), blk->data, blk->l );
        if( blk == blk_end )
            break;
        blk++;
    }
    N i = blk_begin - file->blk;
    N n = blk_end - blk_begin;
    if(n)
    {   if( !E_mem_Q_blk_I_remove( &file->blk, i + 1, n ))
            return ~0;
        file->blk_n -= n;
    }
    file->blk[i] = new_blk;
    file->current_blk = i;
    file->current_blk_pos = file->pos - pos_begin;
    return 0;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
I
E_mem_Q_file_M( Pc path
, B readonly
, mode_t create_mode
){  int fd;
    if(readonly)
        if( create_mode )
                #ifdef __gnu_linux__
        {   VO1( fd = open( path, O_CREAT | O_RDONLY | O_DIRECT, create_mode ))
                #else
        {   VO1( fd = open( path, O_CREAT | O_RDONLY, create_mode ))
                #endif
                return ~0;
        }else
                #ifdef __gnu_linux__
        {   VO1( fd = open( path, O_RDONLY | O_DIRECT ))
                #else
        {   VO1( fd = open( path, O_RDONLY ))
                #endif
                return ~0;
        }
    else
        if( create_mode )
                #ifdef __gnu_linux__
        {   VO1( fd = open( path, O_CREAT | O_RDWR | O_DIRECT, create_mode ))
                #else
        {   VO1( fd = open( path, O_CREAT | O_RDWR, create_mode ))
                #endif
                return ~0;
        }else
                #ifdef __gnu_linux__
        {   VO1( fd = open( path, O_RDWR | O_DIRECT ))
                #else
        {   VO1( fd = open( path, O_RDWR ))
                #endif
                return ~0;
        }
    I id = E_mem_Q_tab_I_add( E_base_S->E_mem_Q_file_S );
    if( !~id )
    {   V0( close(fd) ){}
        return ~0;
    }
    struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
    Mt_( file->blk, file->blk_n = 0 );
    if( !file->blk )
    {   V0( close( file->fd )){}
        E_mem_Q_tab_I_remove( E_base_S->E_mem_Q_file_S, id );
        return ~0;
    }
    Mt_( file->unsaved, file->unsaved_n = 0 );
    if( !file->unsaved )
    {   W( file->blk );
        V0( close( file->fd )){}
        E_mem_Q_tab_I_remove( E_base_S->E_mem_Q_file_S, id );
        return ~0;
    }
    U_R( file->mode, readonly ) = readonly;
    file->pos = 0;
    file->fd = fd;
    V1( file->l = lseek( fd, 0, SEEK_END ))
    {   W( file->unsaved );
        W( file->blk );
        V0( close( file->fd )){}
        E_mem_Q_tab_I_remove( E_base_S->E_mem_Q_file_S, id );
        return ~0;
    }
    struct stat st;
    V1( fstat( file->fd, &st ))
    {   W( file->unsaved );
        W( file->blk );
        V0( close( file->fd )){}
        E_mem_Q_tab_I_remove( E_base_S->E_mem_Q_file_S, id );
        return ~0;
    }
    file->st_mode = st.st_mode;
    U_L( file->mode, opened_by_fd );
    U_L( file->current_blk, valid );
    U_L( file->current_blk, valid_sob );
    U_L( file->current_blk, valid_eob );
    return id;
}
I
E_mem_Q_file_M_fd( int fd
){  I id = E_mem_Q_tab_I_add( E_base_S->E_mem_Q_file_S );
    if( !~id )
        return ~0;
    struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
    Mt_( file->blk, file->blk_n = 0 );
    if( !file->blk )
    {   E_mem_Q_tab_I_remove( E_base_S->E_mem_Q_file_S, id );
        return ~0;
    }
    Mt_( file->unsaved, file->unsaved_n = 0 );
    if( !file->unsaved )
    {   W( file->blk );
        E_mem_Q_tab_I_remove( E_base_S->E_mem_Q_file_S, id );
        return ~0;
    }
    U_R( file->mode, readonly ) = no;
    file->pos = 0;
    file->fd = fd;
    V1( file->l = lseek( fd, 0, SEEK_END ))
    {   W( file->unsaved );
        W( file->blk );
        E_mem_Q_tab_I_remove( E_base_S->E_mem_Q_file_S, id );
        return ~0;
    }
    struct stat st;
    V1( fstat( file->fd, &st ))
    {   W( file->unsaved );
        W( file->blk );
        E_mem_Q_tab_I_remove( E_base_S->E_mem_Q_file_S, id );
        return ~0;
    }
    file->st_mode = st.st_mode;
    U_F( file->mode, opened_by_fd );
    U_L( file->current_blk, valid );
    U_L( file->current_blk, valid_sob );
    U_L( file->current_blk, valid_eob );
    return id;
}
N
E_mem_Q_file_W( I id
){  struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
    if( !U_R( file->mode, readonly ))
    {   if(( file->st_mode & S_IFMT ) == S_IFREG )
        {   VO1( ftruncate( file->fd, file->l ))
                return ~0;
        }
        if( file->unsaved_n )
        {   struct E_mem_Z_range *range = file->unsaved;
            if(( file->st_mode & S_IFMT ) == S_IFBLK )
            {   N last_pos_end = 0;
                for_n( unsaved_i, file->unsaved_n )
                {   for_n( blk_i, file->blk_n )
                        if( range->pos < file->blk[ blk_i ].pos )
                            break;
                    blk_i--;
                    if( range->pos_end < last_pos_end )
                    {   range++;
                        continue;
                    }
                    last_pos_end = E_simple_Z_n_I_align_up_to_v2( range->pos_end, E_base_S->E_mem_Q_file_S_buffer_l );
                    if( blk_i != file->blk_n - 1 )
                    {   N pos;
                        for( pos = E_simple_Z_n_I_align_down_to_v2( range->pos, E_base_S->E_mem_Q_file_S_buffer_l ); pos != E_simple_Z_n_I_align_up_to_v2( range->pos_end, E_base_S->E_mem_Q_file_S_buffer_l ); pos += E_base_S->E_mem_Q_file_S_buffer_l )
                        {   E_mem_Q_blk_I_copy( E_base_S->E_mem_Q_file_S_buffer, file->blk[ blk_i ].data + pos - file->blk[ blk_i ].pos, E_base_S->E_mem_Q_file_S_buffer_l );
                            N l = E_mem_Q_file_I_write_pos_blk( file->fd
                            , pos
                            , E_base_S->E_mem_Q_file_S_buffer
                            , E_base_S->E_mem_Q_file_S_buffer_l
                            );
                            if( l != E_base_S->E_mem_Q_file_S_buffer_l )
                                return ~0;
                        }
                    }else
                    {   N pos;
                        for( pos = E_simple_Z_n_I_align_down_to_v2( range->pos, E_base_S->E_mem_Q_file_S_buffer_l ); pos != E_simple_Z_n_I_align_up_to_v2( range->pos_end, E_base_S->E_mem_Q_file_S_buffer_l ) - E_base_S->E_mem_Q_file_S_buffer_l; pos += E_base_S->E_mem_Q_file_S_buffer_l )
                        {   E_mem_Q_blk_I_copy( E_base_S->E_mem_Q_file_S_buffer, file->blk[ blk_i ].data + pos - file->blk[ blk_i ].pos, E_base_S->E_mem_Q_file_S_buffer_l );
                            N l = E_mem_Q_file_I_write_pos_blk( file->fd
                            , pos
                            , E_base_S->E_mem_Q_file_S_buffer
                            , E_base_S->E_mem_Q_file_S_buffer_l
                            );
                            if( l != E_base_S->E_mem_Q_file_S_buffer_l )
                                return l;
                        }
                        N buffer_l = J_min( E_simple_Z_n_I_align_up_to_v2( range->pos_end, E_base_S->E_mem_Q_file_S_buffer_l ), file->l ) - pos;
                        E_mem_Q_blk_I_copy( E_base_S->E_mem_Q_file_S_buffer, file->blk[ blk_i ].data + pos - file->blk[ blk_i ].pos, buffer_l );
                        N l = E_mem_Q_file_I_write_pos_blk( file->fd
                        , pos
                        , E_base_S->E_mem_Q_file_S_buffer
                        , E_base_S->E_mem_Q_file_S_buffer_l
                        );
                        if( l != buffer_l )
                            return ~0;
                    }
                    range++;
                }
            }else
            {
                    #ifdef __gnu_linux__
                V0( fcntl( file->fd, F_SETFL, 0 ))
                    return ~0;
                    #endif
                for_n( unsaved_i, file->unsaved_n )
                {   for_n_rev( blk_i, file->blk_n )
                        if( range->pos >= file->blk[ blk_i ].pos )
                            break;
                    N l = E_mem_Q_file_I_write_pos( file->fd
                    , range->pos
                    , file->blk[ blk_i ].data + range->pos - file->blk[ blk_i ].pos
                    , range->pos_end - range->pos
                    );
                    if( !~l )
                        return l;
                    range++;
                }
            }
        }
    }
    W( file->unsaved );
    for_n( blk_i, file->blk_n )
        W( file->blk[ blk_i ].data );
    W( file->blk );
    V0( close( file->fd ))
        return ~0;
    if( E_mem_Q_tab_I_remove( E_base_S->E_mem_Q_file_S, id ))
        return ~0;
    return 0;
}
N
E_mem_Q_file_W_nosave( I id
){  struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
    W( file->unsaved );
    for_n( blk_i, file->blk_n )
        W( file->blk[ blk_i ].data );
    W( file->blk );
    V0( close( file->fd ))
        return ~0;
    if( E_mem_Q_tab_I_remove( E_base_S->E_mem_Q_file_S, id ))
        return ~0;
    return 0;
}
//------------------------------------------------------------------------------
N
E_mem_Q_file_I_truncate( I id
){  struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
    VO1( ftruncate( file->fd, file->l ))
        return ~0;
    file->pos = file->l = 0;
    return 0;
}
N
E_mem_Q_file_I_save( I id
){  struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
    if( !U_R( file->mode, readonly ))
    {   if(( file->st_mode & S_IFMT ) == S_IFREG )
        {   VO1( ftruncate( file->fd, file->l ))
                return ~0;
        }
        if( file->unsaved_n )
        {   struct E_mem_Z_range *range = file->unsaved;
            if(( file->st_mode & S_IFMT ) == S_IFBLK )
            {   N last_pos_end = 0;
                for_n( unsaved_i, file->unsaved_n )
                {   for_n( blk_i, file->blk_n )
                        if( range->pos < file->blk[ blk_i ].pos )
                            break;
                    if( range->pos_end < last_pos_end )
                    {   range++;
                        continue;
                    }
                    blk_i--;
                    last_pos_end = E_simple_Z_n_I_align_up_to_v2( range->pos_end, E_base_S->E_mem_Q_file_S_buffer_l );
                    if( blk_i != file->blk_n - 1 )
                    {   N pos;
                        for( pos = E_simple_Z_n_I_align_down_to_v2( range->pos, E_base_S->E_mem_Q_file_S_buffer_l ); pos != E_simple_Z_n_I_align_up_to_v2( range->pos_end, E_base_S->E_mem_Q_file_S_buffer_l ); pos += E_base_S->E_mem_Q_file_S_buffer_l )
                        {   E_mem_Q_blk_I_copy( E_base_S->E_mem_Q_file_S_buffer, file->blk[ blk_i ].data + pos - file->blk[ blk_i ].pos, E_base_S->E_mem_Q_file_S_buffer_l );
                            N l = E_mem_Q_file_I_write_pos_blk( file->fd
                            , pos
                            , E_base_S->E_mem_Q_file_S_buffer
                            , E_base_S->E_mem_Q_file_S_buffer_l
                            );
                            if( l != E_base_S->E_mem_Q_file_S_buffer_l )
                                return ~0;
                        }
                    }else
                    {   N pos;
                        for( pos = E_simple_Z_n_I_align_down_to_v2( range->pos, E_base_S->E_mem_Q_file_S_buffer_l ); pos != E_simple_Z_n_I_align_up_to_v2( range->pos_end, E_base_S->E_mem_Q_file_S_buffer_l ) - E_base_S->E_mem_Q_file_S_buffer_l; pos += E_base_S->E_mem_Q_file_S_buffer_l )
                        {   E_mem_Q_blk_I_copy( E_base_S->E_mem_Q_file_S_buffer, file->blk[ blk_i ].data + pos - file->blk[ blk_i ].pos, E_base_S->E_mem_Q_file_S_buffer_l );
                            N l = E_mem_Q_file_I_write_pos_blk( file->fd
                            , pos
                            , E_base_S->E_mem_Q_file_S_buffer
                            , E_base_S->E_mem_Q_file_S_buffer_l
                            );
                            if( l != E_base_S->E_mem_Q_file_S_buffer_l )
                                return ~0;
                        }
                        N buffer_l = J_min( E_simple_Z_n_I_align_up_to_v2( range->pos_end, E_base_S->E_mem_Q_file_S_buffer_l ), file->l ) - pos;
                        E_mem_Q_blk_I_copy( E_base_S->E_mem_Q_file_S_buffer, file->blk[ blk_i ].data + pos - file->blk[ blk_i ].pos, buffer_l );
                        N l = E_mem_Q_file_I_write_pos_blk( file->fd
                        , pos
                        , E_base_S->E_mem_Q_file_S_buffer
                        , E_base_S->E_mem_Q_file_S_buffer_l
                        );
                        if( l != buffer_l )
                            return ~0;
                    }
                    range++;
                }
            }else
            {
                    #ifdef __gnu_linux__
                V0( fcntl( file->fd, F_SETFL, 0 ))
                    return ~0;
                    #endif
                for_n( unsaved_i, file->unsaved_n )
                {   for_n_rev( blk_i, file->blk_n )
                        if( range->pos >= file->blk[ blk_i ].pos )
                            break;
                    N l = E_mem_Q_file_I_write_pos( file->fd
                    , range->pos
                    , file->blk[ blk_i ].data + range->pos - file->blk[ blk_i ].pos
                    , range->pos_end - range->pos
                    );
                    if( !~l )
                        return l;
                    range++;
                }
                    #ifdef __gnu_linux__
                if( !U_R( file->mode, opened_by_fd ))
                {   V0( fcntl( file->fd, F_SETFL, O_DIRECT ))
                        return ~0;
                }
                    #endif
            }
            if( !E_mem_Q_blk_I_remove( &file->unsaved, 0, file->unsaved_n ))
                return ~0;
            file->unsaved_n = 0;
        }
    }
    return 0;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_internal
N
E_mem_Q_file_I_read_pos( int fd
, N pos
){  V1( lseek( fd, pos, SEEK_SET ))
        return ~0;
        #ifdef __gnu_linux__
    N l;
    VO1( l = read( fd, E_base_S->E_mem_Q_file_S_buffer, E_base_S->E_mem_Q_file_S_buffer_l ))
        return ~0;
        #else
    N l = 0;
    N l_;
    O{  VO1( l_ = read( fd, E_base_S->E_mem_Q_file_S_buffer + l, E_base_S->E_mem_Q_file_S_buffer_l - l ))
            return ~0;
        if( !l_
        || !~l_
        )
            break;
        l += l_;
        if( l == E_base_S->E_mem_Q_file_S_buffer_l )
            break;
    }
        #endif
    return l;
}
_internal
N
E_mem_Q_file_I_write_pos( int fd
, N pos
, Pc data
, N data_l
){  V1( lseek( fd, pos, SEEK_SET ))
        return ~0;
    N l = 0;
    N l_;
    O{  VO1( l_ = write( fd, data + l, data_l - l ))
            return ~0;
        if( !l_ )
            break;
        l += l_;
        if( l == data_l )
            break;
    }
    return l;
}
_internal
N
E_mem_Q_file_I_write_pos_blk( int fd
, N pos
, Pc data
, N data_l
){  V1( lseek( fd, pos, SEEK_SET ))
        return ~0;
    N l;
    VO1( l = write( fd, data, data_l ))
        return ~0;
    return l;
}
//------------------------------------------------------------------------------
_internal
N
E_mem_Q_file_R_current_blk( struct E_mem_Q_file_Z *file
){  if( U_R( file->current_blk, valid ))
        return 0;
    if( E_mem_Q_file_Q_cache_T_pos_in( file, file->pos ))
    {   U_F( file->current_blk, valid );
        return 0;
    }
    N data_pos = E_simple_Z_n_I_align_down_to_v2( file->pos, E_base_S->E_mem_Q_file_S_buffer_l );
    N l = E_mem_Q_file_I_read_pos( file->fd, data_pos );
    if( !~l )
        return l;
    if( l
    && data_pos + l > file->l )
        l = file->l - data_pos;
    if( l <= file->pos - data_pos )
        return E_mem_Q_file_S_eof;
    if( !~E_mem_Q_file_Q_cache_I_put( file, data_pos, l ))
        return ~0;
    U_F( file->current_blk, valid );
    return l;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
N
E_mem_Q_file_P_pos( I id
, N pos
){  struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
    if( pos > file->l )
        return ~0;
    file->pos = pos;
    U_L( file->current_blk, valid );
    U_L( file->current_blk, valid_sob );
    U_L( file->current_blk, valid_eob );
    return 0;
}
//------------------------------------------------------------------------------
N
E_mem_Q_file_R_c( I id
, C *c
){  struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
    N ret = E_mem_Q_file_R_current_blk(file);
    if( !~ret
    || ret == E_mem_Q_file_S_eof
    )
        return ret;
    *c = file->blk[ file->current_blk ].data[ file->current_blk_pos++ ];
    file->pos++;
    if( file->current_blk_pos == file->blk[ file->current_blk ].l )
    {   U_L( file->current_blk, valid );
        U_F( file->current_blk, valid_eob );
    }
    return 0;
}
N
E_mem_Q_file_R_rev_c( I id
, C *c
){  struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
    N ret = E_mem_Q_file_R_current_blk(file);
    if( !~ret
    || ret == E_mem_Q_file_S_eof
    )
        return ret;
    *c = file->blk[ file->current_blk ].data[ file->current_blk_pos-- ];
    file->pos--;
    if( file->current_blk_pos == -1 )
    {   U_L( file->current_blk, valid );
        U_F( file->current_blk, valid_sob );
    }
    return 0;
}
N
E_mem_Q_file_R_s( I id
, Pc s
, N l
){  for_n( i, l )
    {   C c;
        N ret = E_mem_Q_file_R_c( id, &c );
        if(ret)
            return ret;
        s[i] = c;
    }
    return 0;
}
N
E_mem_Q_file_R_N( I id
, N *v
, N n
){  *v = 0;
    for_n( i, n )
    {   C c;
        N ret = E_mem_Q_file_R_c( id, &c );
        if(ret)
            return ret;
        *v |= (N)(N8)c << ( i * 8 );
    }
    return 0;
}
N // Ile bajtów przeczytano lub błąd.
E_mem_Q_file_R_u( I id
, U *u
){  C c;
    N ret = E_mem_Q_file_R_c( id, &c );
    if( !~ret
    || ret == E_mem_Q_file_S_eof
    )
        return ret;
    if( (S8)c >= 0 )
    {   *u = c;
        return 1;
    }
    N n = E_asm_I_bsr( ~(S8)c );
    if( n == ~0
    || n == 6
    )
        return ~0;
    U v = c & ( _v( v, 1 ) << n ) - 1;
    for_n( i, 6 - n )
    {   ret = E_mem_Q_file_R_c( id, &c );
        if( !~ret
        || ret == E_mem_Q_file_S_eof
        )
            return ret;
        if(( c & 0xc0 ) != 0x80 )
            return ~0;
        v <<= 6;
        v |= c & 0x3f;
    }
    *u = v;
    return 7 - n;
}
N
E_mem_Q_file_R_u_upto( I id
, Pc upto
, Pc *s // Nowo alokowany ciąg znaków “utf-8”.
){  U u;
    *s = M(1);
    if( !*s )
        return ~0;
    N s_i = 0;
    O{  N i = E_mem_Q_file_R_u( id, &u );
        if( !~i )
        {   W( *s );
            return i;
        }
        if( i == E_mem_Q_file_S_eof )
        {   (*s)[ s_i ] = '\0';
            return i;
        }
        if( !E_mem_Q_blk_I_append( s, i ))
        {   W( *s );
            return ~0;
        }
        E_text_Z_u_R_su( u, *s + s_i );
        s_i += i;
        Pc upto_1 = upto;
        while( *upto_1 )
        {   U u_1;
            Pc upto_2 = E_text_Z_su_R_u( upto_1, &u_1 );
            if( upto_1 == upto_2 )
            {   W( *s );
                return ~0;
            }
            upto_1 = upto_2;
            if( u == u_1 )
            {   (*s)[ s_i ] = '\0';
                return 0;
            }
        }
    }
}
N
E_mem_Q_file_R_u_upto_0( I id
, Pc *s // Nowo alokowany ciąg znaków “utf-8”.
){  U u;
    *s = M(0);
    if( !*s )
        return ~0;
    N s_i = 0;
    do
    {   N i = E_mem_Q_file_R_u( id, &u );
        if( !~i )
        {   W( *s );
            return i;
        }
        if( i == E_mem_Q_file_S_eof )
            return i;
        if( !E_mem_Q_blk_I_append( s, i ))
        {   W( *s );
            return ~0;
        }
        E_text_Z_u_R_su( u, *s + s_i );
        s_i += i;
    }while(u);
    return 0;
}
N
E_mem_Q_file_R_u_outof( I id
, Pc outof
, Pc *s // Nowo alokowany ciąg znaków “utf-8”.
){  U u;
    *s = M(1);
    if( !*s )
        return ~0;
    N s_i = 0;
Cont:
    ;
    N i = E_mem_Q_file_R_u( id, &u );
    if( !~i )
    {   W( *s );
        return i;
    }
    if( i == E_mem_Q_file_S_eof )
    {   (*s)[ s_i ] = '\0';
        return i;
    }
    if( !E_mem_Q_blk_I_append( s, i ))
    {   W( *s );
        return ~0;
    }
    E_text_Z_u_R_su( u, *s + s_i );
    s_i += i;
    Pc outof_1 = outof;
    while( *outof_1 )
    {   U u_1;
        Pc outof_2 = E_text_Z_su_R_u( outof_1, &u_1 );
        if( outof_1 == outof_2 )
        {   W( *s );
            return ~0;
        }
        outof_1 = outof_2;
        if( u == u_1 )
            goto Cont;
    }
    (*s)[ s_i ] = '\0';
    return 0;
}
N
E_mem_Q_file_R_u_outof_0( I id
, N *l // Liczba przeskoczonych znaków '\0'.
, U *u // Ostatni odczytany znak.
){  *l = ~0;
    do
    {   (*l)++;
        N i = E_mem_Q_file_R_u( id, u );
        if(i)
            return i;
    }while( !*u );
    return 0;
}
//------------------------------------------------------------------------------
N
E_mem_Q_file_P_c( I id
, C c
){  struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
    J_assert( !U_R( file->mode, readonly ));
    if(( file->st_mode & S_IFMT ) == S_IFBLK )
        if( file->pos >= file->l )
            return ~0;
    N ret = E_mem_Q_file_R_current_blk(file);
    if( !~ret
    || ret == E_mem_Q_file_S_eof
    )
        return ret;
    // Czy da się skleić zakresy danych nie zapisanych.
    B blk_exists = no;
    for_n_rev( unsaved_i, file->unsaved_n )
    {   if( file->pos > file->unsaved[ unsaved_i ].pos_end )
            break;
        if( file->pos + 1 == file->unsaved[ unsaved_i ].pos ) // przed blokiem
        {   blk_exists = yes;
            if( unsaved_i
            && file->unsaved[ unsaved_i - 1 ].pos_end + 1 >= file->unsaved[ unsaved_i ].pos
            )
            {   file->unsaved[ unsaved_i - 1 ].pos_end = file->unsaved[ unsaved_i ].pos_end;
                if( !E_mem_Q_blk_I_remove( &file->unsaved, unsaved_i, 1 ))
                    return ~0;
                file->unsaved_n--;
            }else
                file->unsaved[ unsaved_i ].pos = file->pos;
            break;
        }
        if( file->pos >= file->unsaved[ unsaved_i ].pos
        && file->pos < file->unsaved[ unsaved_i ].pos_end
        )
        {   blk_exists = yes;
            break;
        }
        if( file->pos == file->unsaved[ unsaved_i ].pos_end ) // po bloku
        {   blk_exists = yes;
            if( unsaved_i + 1 != file->unsaved_n
            && file->unsaved[ unsaved_i + 1 ].pos <= file->unsaved[ unsaved_i ].pos_end + 1
            )
            {   file->unsaved[ unsaved_i ].pos_end = file->unsaved[ unsaved_i + 1 ].pos_end;
                if( !E_mem_Q_blk_I_remove( &file->unsaved, unsaved_i + 1, 1 ))
                    return ~0;
                file->unsaved_n--;
            }else
                file->unsaved[ unsaved_i ].pos_end++;
            break;
        }
    }
    if( !blk_exists )
    {   for_n( unsaved_i, file->unsaved_n )
            if( file->unsaved[ unsaved_i ].pos > file->pos )
                break;
        if( unsaved_i != file->unsaved_n )
        {   P new_blk = E_mem_Q_blk_I_insert( &file->unsaved, unsaved_i, 1 );
            if( !new_blk )
                return ~0;
        }else
        {   P new_blk = E_mem_Q_blk_I_append( &file->unsaved, 1 );
            if( !new_blk )
                return ~0;
        }
        file->unsaved[ unsaved_i ].pos = file->pos;
        file->unsaved[ unsaved_i ].pos_end = file->pos + 1;
        file->unsaved_n++;
    }
    // Ustawienie nowej pozycji w pliku.
    if( U_R( file->current_blk, valid ))
    {   if( file->current_blk_pos + 1 == file->blk[ file->current_blk ].l )
        {   U_L( file->current_blk, valid );
            U_F( file->current_blk, valid_eob );
        }
    }else if( U_R( file->current_blk, valid_eob ))
    {   if( file->current_blk != file->blk_n
        && file->blk[ file->current_blk + 1 ].pos - ( file->blk[ file->current_blk ].pos + file->blk[ file->current_blk ].l ) <= 1
        )
        {   N l = file->blk[ file->current_blk + 1 ].pos - ( file->blk[ file->current_blk ].pos + file->blk[ file->current_blk ].l );
            Pc pos = E_mem_Q_blk_I_append( &file->blk[ file->current_blk ].data, l + file->blk[ file->current_blk + 1 ].l );
            if( !pos )
                return ~0;
            file->blk[ file->current_blk ].l += l + file->blk[ file->current_blk + 1 ].l;
            E_mem_Q_blk_I_copy( pos + l, file->blk[ file->current_blk + 1 ].data, file->blk[ file->current_blk + 1 ].l );
            W( file->blk[ file->current_blk + 1 ].data );
            if( !E_mem_Q_blk_I_remove( &file->blk, file->current_blk + 1, 1 ))
                return ~0;
            file->blk_n--;
            U_F( file->current_blk, valid );
            U_L( file->current_blk, valid_eob );
        }else
        {   if( !E_mem_Q_blk_I_append( &file->blk[ file->current_blk ].data, 1 ))
                return ~0;
            file->blk[ file->current_blk ].l++;
        }
    }else if( U_R( file->current_blk, valid_sob ))
    {   if( file->current_blk
        && file->blk[ file->current_blk ].pos - ( file->blk[ file->current_blk - 1 ].pos + file->blk[ file->current_blk - 1 ].l ) <= 1
        )
        {   N l = file->blk[ file->current_blk ].pos - ( file->blk[ file->current_blk - 1 ].pos + file->blk[ file->current_blk - 1 ].l );
            file->current_blk--;
            file->current_blk_pos = file->blk[ file->current_blk ].l;
            file->blk[ file->current_blk ].l += l + file->blk[ file->current_blk + 1 ].l;
            Pc pos = E_mem_Q_blk_I_append( &file->blk[ file->current_blk ].data, l + file->blk[ file->current_blk + 1 ].l );
            if( !pos )
                return ~0;
            E_mem_Q_blk_I_copy( pos + l, file->blk[ file->current_blk + 1 ].data, file->blk[ file->current_blk + 1 ].l );
            W( file->blk[ file->current_blk + 1 ].data );
            if( !E_mem_Q_blk_I_remove( &file->blk, file->current_blk + 1, 1 ))
                return ~0;
            file->blk_n--;
            U_F( file->current_blk, valid );
        }else
        {   E_mem_Q_blk_I_prepend( &file->blk[ file->current_blk ].data, 1 );
            file->blk[ file->current_blk ].l++;
            if( file->current_blk_pos + 1 == file->blk[ file->current_blk ].l )
                U_F( file->current_blk, valid_eob );
            else
                U_F( file->current_blk, valid );
        }
        U_L( file->current_blk, valid_sob );
    }else
    {   for_n( blk_i, file->blk_n )
            if( file->pos >= file->blk[ blk_i ].pos )
                break;
        P p;
        if( blk_i != file->blk_n )
            p = E_mem_Q_blk_I_insert( &file->blk, blk_i, 1 );
        else
            p = E_mem_Q_blk_I_append( &file->blk, 1 );
        if( !p )
            return ~0;
        file->blk_n++;
        file->current_blk = blk_i;
        file->current_blk_pos = 0;
        file->blk[ file->current_blk ].data = M( file->blk[ file->current_blk ].l = 1 );
        file->blk[ file->current_blk ].pos = file->pos;
        U_F( file->current_blk, valid_eob );
    }
    file->pos++;
    *( file->blk[ file->current_blk ].data + file->current_blk_pos ) = c;
    file->current_blk_pos++;
    return 0;
}
N
E_mem_Q_file_P_c_n( I id
, C c
, N n
){  J_assert(n);
    for_n( i, n )
    {   N ret;
        if( ret = E_mem_Q_file_P_c( id, c ))
            return ret;
    }
    return 0;
}
N
E_mem_Q_file_P_s( I id
, Pc s
, N l
){  J_assert(l);
    for_n( i, l )
    {   N ret;
        if( ret = E_mem_Q_file_P_c( id, s[i] ))
            return ret;
    }
    return 0;
}
N
E_mem_Q_file_P_s_n( I id
, Pc s
, N l
, N n
){  J_assert(l);
    J_assert(n);
    for_n( i_n, n )
    {   for_n( i, l )
        {   N ret;
            if( ret = E_mem_Q_file_P_c( id, s[i] ))
                return ret;
        }
    }
    return 0;
}
N
E_mem_Q_file_P_N( I id
, N v
, N n
){  C s[n];
    for_n( i, n )
        s[i] = ( v >> ( i * 8 )) & 0xff;
    return E_mem_Q_file_P_s( id, &s[0], n );
}
N
E_mem_Q_file_P_insert_s( I id
, Pc s
, N l
){  J_assert(l); // Nieoptymalne użycie tej procedury.
    struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
    J_assert( !U_R( file->mode, readonly ));
    if(( file->st_mode & S_IFMT ) == S_IFBLK )
        return ~0;
    if( !file->blk_n )
    {   file->current_blk = 0;
        file->current_blk_pos = 0;
        struct E_mem_Q_rel_map_blk_Z *new_blk = E_mem_Q_blk_I_append( &file->blk, file->blk_n = 1 );
        if( !new_blk )
            return ~0;
        new_blk->pos = file->l;
        new_blk->data = M( new_blk->l = 0 );
    }else if( file->blk[ file->blk_n - 1 ].pos > file->pos
    || file->blk[ file->blk_n - 1 ].pos + file->blk[ file->blk_n - 1 ].l != file->l
    )
    {   N pos = file->pos;
        while(( file->pos += E_base_S->E_mem_Q_file_S_buffer_l ) < file->l )
        {   U_L( file->current_blk, valid );
            U_L( file->current_blk, valid_sob );
            U_L( file->current_blk, valid_eob );
            E_mem_Q_file_R_current_blk(file);
        }
        U_L( file->current_blk, valid );
        U_L( file->current_blk, valid_sob );
        U_L( file->current_blk, valid_eob );
        file->pos = pos;
        E_mem_Q_file_R_current_blk(file);
    }else
    {   U_L( file->current_blk, valid );
        U_L( file->current_blk, valid_sob );
        U_L( file->current_blk, valid_eob );
        N ret = E_mem_Q_file_R_current_blk(file);
        if( !~ret )
            return ret;
    }
    if( !E_mem_Q_blk_I_append( &file->blk[ file->current_blk ].data, l ))
        return ~0;
    E_mem_Q_blk_I_copy_rev( file->blk[ file->current_blk ].data + file->current_blk_pos + l, file->blk[ file->current_blk ].data + file->current_blk_pos, file->blk[ file->current_blk ].l - file->current_blk_pos );

    file->blk[ file->current_blk ].l += l;
    file->l += l;
    E_mem_Q_blk_I_copy( file->blk[ file->current_blk ].data + file->current_blk_pos, s, l );
    B blk_exists = no;
    N unsaved_i = file->unsaved_n;
    while( ~--unsaved_i )
    {   if( file->pos < file->unsaved[ unsaved_i ].pos )
            break;
        if( file->pos <= file->unsaved[ unsaved_i ].pos_end )
        {   blk_exists = yes;
            if( file->unsaved[ unsaved_i ].pos_end < file->pos + l )
                file->unsaved[ unsaved_i ].pos_end = file->pos + l;
        }
    }
    if( !blk_exists )
    {   struct E_mem_Z_range *unsaved = E_mem_Q_blk_I_append( &file->unsaved, 1 );
        if( !unsaved )
            return ~0;
        file->unsaved_n++;
        unsaved->pos = file->pos;
        unsaved->pos_end = file->pos + file->blk[ file->current_blk ].l;
    }
    file->current_blk_pos += l;
    return 0;
}
N
E_mem_Q_file_P_insert_N( I id
, N v
, N n
){  C s[n];
    for_n( i, n )
        s[i] = ( v >> ( i * 8 )) & 0xff;
    return E_mem_Q_file_P_insert_s( id, &s[0], n );
}
//------------------------------------------------------------------------------
N
E_mem_Q_file_P_rem_s( I id
, N l
){  J_assert(l); // Nieoptymalne użycie tej procedury.
    struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
    J_assert( !U_R( file->mode, readonly ));
    if(( file->st_mode & S_IFMT ) == S_IFBLK )
        return ~0;
    U_L( file->current_blk, valid );
    U_L( file->current_blk, valid_sob );
    U_L( file->current_blk, valid_eob );
    N ret = E_mem_Q_file_R_current_blk(file);
    if( !~ret
    || ret == E_mem_Q_file_S_eof
    )
        return ret;
    if( !file->blk_n
    || file->blk[ file->blk_n - 1 ].pos > file->pos
    || file->blk[ file->blk_n - 1 ].pos + file->blk[ file->blk_n - 1 ].l != file->l
    )
    {   N pos = file->pos;
        while(( file->pos += E_base_S->E_mem_Q_file_S_buffer_l ) < file->l )
        {   U_L( file->current_blk, valid );
            U_L( file->current_blk, valid_sob );
            U_L( file->current_blk, valid_eob );
            E_mem_Q_file_R_current_blk(file);
        }
        U_L( file->current_blk, valid );
        U_L( file->current_blk, valid_sob );
        U_L( file->current_blk, valid_eob );
        file->pos = pos;
        E_mem_Q_file_R_current_blk(file);
    }
    N blk_l = file->blk[ file->current_blk ].l - l;
    if( blk_l )
    {   E_mem_Q_blk_I_copy( file->blk[ file->current_blk ].data + file->current_blk_pos, file->blk[ file->current_blk ].data + file->current_blk_pos + l, file->blk[ file->current_blk ].l - file->current_blk_pos - l );
        if( !E_mem_Q_blk_I_remove( &file->blk[ file->current_blk ].data, file->blk[ file->current_blk ].l - l, l ))
            return ~0;
        file->blk[ file->current_blk ].l = blk_l;
    }else
    {   W( file->blk[ file->current_blk ].data );
        if( !E_mem_Q_blk_I_remove( &file->blk, file->current_blk, 1 ))
            return ~0;
        file->blk_n--;
    }
    file->l -= l;
    B blk_exists = no;
    N unsaved_i = file->unsaved_n;
    while( ~--unsaved_i )
        if( file->pos >= file->unsaved[ unsaved_i ].pos )
        {   if( file->pos < file->unsaved[ unsaved_i ].pos_end )
            {   blk_exists = yes;
                if( blk_l - file->current_blk_pos )
                    file->unsaved[ unsaved_i ].pos_end = file->pos + blk_l - file->current_blk_pos;
                else
                {   if( !E_mem_Q_blk_I_remove( &file->unsaved, unsaved_i, 1 ))
                        return ~0;
                    file->unsaved_n--;
                }
            }else
            {   if( !E_mem_Q_blk_I_remove( &file->unsaved, unsaved_i, 1 ))
                    return ~0;
                file->unsaved_n--;
            }
        }else
            break;
    if( !blk_exists
    && blk_l - file->current_blk_pos
    )
    {   struct E_mem_Z_range *unsaved = E_mem_Q_blk_I_append( &file->unsaved, 1 );
        if( !unsaved )
            return ~0;
        file->unsaved_n++;
        unsaved->pos = file->pos;
        unsaved->pos_end = file->pos + blk_l - file->current_blk_pos;
    }
    return 0;
}
D( mem, file_save )
{   I timer = Y_M(1000000000);
    I_D
    {   Y_B( timer, 0 )
            break;
        for_each( id, E_base_S->E_mem_Q_file_S, E_mem_Q_tab )
            E_mem_Q_file_I_save(id);
    }
    Y_W(timer);
}
/******************************************************************************/
