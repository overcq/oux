//-*-C-*-
/*******************************************************************************
*   ___   publicplace
*  ¦OUX¦  C+
*  ¦/C+¦  component
*   ---   base
*         text
* ©overcq                on ‟Gentoo Linux 13.0” “x86_64”             2015‒4‒28 *
*******************************************************************************/
B
E_text_Z_c_T_alpha( C c
){  return ( c >= '0' && c <= '9' )
    || ( c >= 'A' && c <= 'Z' )
    || ( c >= 'a' && c <= 'z' );
}
B
E_text_Z_c_T_quote( C c
){  return c < 43 || c > 122
    || c == ';'
    || c == '<'
    || c == '>'
    || c == '?'
    || c == '\\'
    || c == '`';
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C
E_text_Z_c_I_lower( C c
){  if( c >= 'A'
    && c <= 'Z'
    )
        c += 32;
    return c;
}
C
E_text_Z_c_I_upper( C c
){  if( c >= 'a'
    && c <= 'z'
    )
        c -= 32;
    return c;
}
//==============================================================================
// Szkic standardu:
// Adres wynikowy procedur obiektów “s”:
// •na początku znalezionych albo
// •po wszystkich danych.
//------------------------------------------------------------------------------
Pc
E_text_Z_s0_I_lower( Pc s
){  while( *s )
    {   *s = E_text_Z_c_I_lower( *s );
        s++;
    }
    return s;
}
Pc
E_text_Z_s0_I_upper( Pc s
){  while( *s )
    {   *s = E_text_Z_c_I_upper( *s );
        s++;
    }
    return s;
}
Pc
E_text_Z_s_I_lower( Pc s
, Pc s_end
){  while( s != s_end )
    {   *s = E_text_Z_c_I_lower( *s );
        s++;
    }
    return s;
}
Pc
E_text_Z_s_I_upper( Pc s
, Pc s_end
){  while( s != s_end )
    {   *s = E_text_Z_c_I_upper( *s );
        s++;
    }
    return s;
}
B
E_text_Z_s0_T_s0_eq( Pc s
, Pc t
){  while( *s
    && *t
    && *s == *t
    )
    {   s++;
        t++;
    }
    return !*s && !*t;
}
B
E_text_Z_s0_T_s0_eq_case( Pc s
, Pc t
){  while( *s
    && *t
    && E_text_Z_c_I_upper( *s ) == E_text_Z_c_I_upper( *t )
    )
    {   s++;
        t++;
    }
    return !*s && !*t;
}
B
E_text_Z_s0_T_s0_starts( Pc s
, Pc t
){  while( *s
    && *t
    && *s == *t
    )
    {   s++;
        t++;
    }
    return !*t;
}
B
E_text_Z_s0_T_s0_starts_case( Pc s
, Pc t
){  while( *s
    && *t
    && E_text_Z_c_I_upper( *s ) == E_text_Z_c_I_upper( *t )
    )
    {   s++;
        t++;
    }
    return !*t;
}
B
E_text_Z_s0_T_s0_ends( Pc s
, Pc t
){  Pc s_end = E_text_Z_s0_R_end(s);
    N t_l = E_text_Z_s0_R_l(t);
    if( s_end - s < t_l )
        return no;
    s = s_end - t_l;
    while( *t
    && *s == *t
    )
    {   s++;
        t++;
    }
    return !*t;
}
B
E_text_Z_s_T_s0_ends( Pc s
, Pc s_end
, Pc t
){  N t_l = E_text_Z_s0_R_l(t);
    if( s_end - s < t_l )
        return no;
    s = s_end - t_l;
    while( *t
    && *s == *t
    )
    {   s++;
        t++;
    }
    return !*t;
}
B
E_text_Z_s_T_s0_starts( Pc s
, Pc s_end
, Pc t
){  while( s != s_end
    && *t
    && *s == *t
    )
    {   s++;
        t++;
    }
    return !*t;
}
B
E_text_Z_s_T_s0_starts_case( Pc s
, Pc s_end
, Pc t
){  while( s != s_end
    && *t
    && *s == *t
    )
    {   s++;
        t++;
    }
    return !*t;
}
B
E_text_Z_s_T_s0_eq( Pc s
, Pc s_end
, Pc t
){  J_assert( s_end >= s );
    while( s != s_end
    && *t
    && *s == *t
    )
    {   s++;
        t++;
    }
    return s == s_end
    && !*t;
}
B
E_text_Z_s_T_s0_eq_case( Pc s
, Pc s_end
, Pc t
){  J_assert( s_end >= s );
    while( s != s_end
    && *t
    && E_text_Z_c_I_upper( *s ) == E_text_Z_c_I_upper( *t )
    )
    {   s++;
        t++;
    }
    return s == s_end
    && !*t;
}
B
E_text_Z_s_T_s_eq( Pc s
, Pc s_end
, Pc t
, Pc t_end
){  J_assert( s_end >= s && t_end >= t );
    if( s_end - s != t_end - t )
        return no;
    while( s != s_end
    && *s == *t
    )
    {   s++;
        t++;
    }
    return s == s_end;
}
B
E_text_Z_s_T_s_eq_case( Pc s
, Pc s_end
, Pc t
, Pc t_end
){  J_assert( s_end >= s && t_end >= t );
    if( s_end - s != t_end - t )
        return no;
    while( s != s_end
    && E_text_Z_c_I_upper( *s ) == E_text_Z_c_I_upper( *t )
    )
    {   s++;
        t++;
    }
    return s == s_end;
}
B
E_text_Z_sl_T_eq( Pc s
, Pc t
, N l
){  while( l
    && *s == *t
    )
    {   s++;
        t++;
        l--;
    }
    return !l;
}
B
E_text_Z_sl_T_eq_case( Pc s
, Pc t
, N l
){  while( l
    && E_text_Z_c_I_upper( *s ) == E_text_Z_c_I_upper( *t )
    )
    {   s++;
        t++;
        l--;
    }
    return !l;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Less or equal end.
Pc
E_text_Z_s0_R_end_le( Pc s
, N l
){  J_assert(l);
    while( *s )
    {   if( !--l )
            break;
        s++;
    }
    return s;
}
B
E_text_Z_s0_T_l_le( Pc s
, N l
){  J_assert(l);
    while( *s )
    {   if( !--l )
            break;
        s++;
    }
    return !*s;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Pc
E_text_Z_s_R_0_search( Pc s
, Pc s_end
){  J_assert( s_end >= s );
    while( s != s_end )
    {   if( !*s )
            break;
        s++;
    }
    return s;
}
Pc
E_text_Z_s_R_c_search( Pc s
, Pc s_end
, C c
){  J_assert( s_end >= s );
    while( s != s_end )
    {   if( *s == c )
            break;
        s++;
    }
    return s;
}
Pc
E_text_Z_s_R_c_search_( Pc s
, C c
){  while( *s != c )
        s++;
    return s;
}
Pc
E_text_Z_s0_R_c_search( Pc s
, C c
){  while( *s )
    {   if( *s == c )
            break;
        s++;
    }
    return s;
}
Pc
E_text_Z_s_R_c_search_last( Pc s
, Pc s_end
, C c
){  J_assert( s_end >= s );
    while( s_end != s )
    {   if( *--s_end == c )
            break;
    }
    return s_end;
}
Pc
E_text_Z_s0_R_c_search_last_( Pc s_end
, C c
){  while( *s_end != c )
        s_end--;
    return s_end;
}
//------------------------------------------------------------------------------
Pc
E_text_Z_s_R_s_search( Pc s
, Pc s_end
, Pc t
, Pc t_end
){  J_assert( s_end >= s );
    J_assert( t_end >= t );
    if( t == t_end )
        return s;
    if( t_end - t <= s_end - s )
    {   Pc r = s, t_ = t;
        while( s != s_end )
        {   if( *s == *t_ )
            {   if( t_ == t )
                    r = s;
                if( ++t_ == t_end )
                    return r;
            }else
            {   if( s >= s_end - ( t_end - t ))
                    break;
                if( t_ != t )
                    t_ = t;
            }
            s++;
        }
    }
    return s_end;
}
Pc
E_text_Z_s_R_s0_search( Pc s
, Pc s_end
, Pc t
){  J_assert( s_end >= s );
    if( !*t )
        return s;
    Pc r = s, t_ = t;
    while( s != s_end )
    {   if( *s == *t_ )
        {   if( t_ == t )
                r = s;
            if( !*++t_ )
                return r;
        }else if( t_ != t )
            t_ = t;
        s++;
    }
    return s;
}
Pc
E_text_Z_s0_R_s0_search( Pc s
, Pc t
){  if( !*t )
        return s;
    Pc r = s, t_ = t;
    while( *s )
    {   if( *s == *t_ )
        {   if( t_ == t )
                r = s;
            if( !*++t_ )
                return r;
        }else if( t_ != t )
            t_ = t;
        s++;
    }
    return s;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
N
E_text_Z_s_Z_10_N_n( Pc s
, Pc s_end
, Pc *ret_s
){  J_assert( s <= s_end );
    N n = 0;
    while( s != s_end )
    {   n *= 10;
        if( *s >= '0' && *s <= '9' )
            n += *s - '0';
        else
            break;
        s++;
    }
    *ret_s = s;
    return n;
}
N
E_text_Z_s0_Z_10_N_n( Pc s
, Pc *ret_s
){  N n = 0;
    while( *s )
    {   n *= 10;
        if( *s >= '0' && *s <= '9' )
            n += *s - '0';
        else
            break;
        s++;
    }
    *ret_s = s;
    return n;
}
//------------------------------------------------------------------------------
N
E_text_Z_s_N_n( Pc s
, Pc s_end
, Pc *ret_s
, N base
){  J_assert( s_end >= s );
    J_assert( base >= 2 && base <= 36 );
    N n = 0, n_prev = 0;
    while( s != s_end )
    {   n *= base;
        if( *s >= '0' && *s <= '9' )
            n += *s - '0';
        else if( *s >= 'A' && *s < 'A' + base - 10 )
            n += 10 + *s - 'A';
        else if( *s >= 'a' && *s < 'a' + base - 10 )
            n += 10 + *s - 'a';
        else
            break;
        if( n < n_prev )
        {   n = n_prev;
            break;
        }
        n_prev = n;
        s++;
    }
    *ret_s = s;
    return n;
}
N
E_text_Z_s0_N_n( Pc s
, Pc *ret_s
, N base
){  J_assert( base >= 2 && base <= 36 );
    N n = 0, n_prev = 0;
    while( *s )
    {   n *= base;
        if( *s >= '0' && *s <= '9' )
            n += *s - '0';
        else if( *s >= 'A' && *s < 'A' + base - 10 )
            n += 10 + *s - 'A';
        else if( *s >= 'a' && *s < 'a' + base - 10 )
            n += 10 + *s - 'a';
        else
            break;
        if( n < n_prev )
        {   n = n_prev;
            break;
        }
        n_prev = n;
        s++;
    }
    *ret_s = s;
    return n;
}
//------------------------------------------------------------------------------
S
E_text_Z_s_N_sn( Pc s
, Pc s_end
, Pc *ret_s
, N base
){  J_assert( s_end >= s );
    J_assert( base >= 2 && base <= 36 );
    B sign = no;
    if( *s == '-' )
    {   sign = yes;
        s++;
    }
    S n = 0, n_prev = 0;
    while( s != s_end )
    {   n *= base;
        if( *s >= '0' && *s <= '9' )
            n += *s - '0';
        else if( *s >= 'A' && *s < 'A' + base - 10 )
            n += 10 + *s - 'A';
        else if( *s >= 'a' && *s < 'a' + base - 10 )
            n += 10 + *s - 'a';
        else
            break;
        if( n < n_prev
        || !~n
        )
        {   n = n_prev;
            break;
        }
        n_prev = n;
        s++;
    }
    if(sign)
        n = -n;
    *ret_s = s;
    return n;
}
S
E_text_Z_s0_N_sn( Pc s
, Pc *ret_s
, N base
){  J_assert( base >= 2 && base <= 36 );
    B sign = no;
    if( *s == '-' )
    {   sign = yes;
        s++;
    }
    S n = 0, n_prev = 0;
    while( *s )
    {   n *= base;
        if( *s >= '0' && *s <= '9' )
            n += *s - '0';
        else if( *s >= 'A' && *s < 'A' + base - 10 )
            n += 10 + *s - 'A';
        else if( *s >= 'a' && *s < 'a' + base - 10 )
            n += 10 + *s - 'a';
        else
            break;
        if( n < n_prev
        || !~n
        )
        {   n = n_prev;
            break;
        }
        n_prev = n;
        s++;
    }
    if(sign)
        n = -n;
    *ret_s = s;
    return n;
}
//------------------------------------------------------------------------------
F
E_text_Z_s_N_f( Pc s
, Pc s_end
, Pc *ret_s
, N base
){  J_assert( s_end >= s );
    J_assert( base >= 2 && base <= 36 );
    B sign = no;
    if( *s == '-' )
    {   sign = yes;
        s++;
    }
    F n = 0, n_prev = 0;
    N floating_point = ~0;
    while( s != s_end )
    {   n *= base;
        if( *s >= '0' && *s <= '9' )
            n += *s - '0';
        else if( *s >= 'A' && *s < 'A' + base - 10 )
            n += 10 + *s - 'A';
        else if( *s >= 'a' && *s < 'a' + base - 10 )
            n += 10 + *s - 'a';
        else if( *s == '.'
        && !~floating_point
        )
            floating_point = 0;
        else
        {   if( ~floating_point )
                floating_point--;
            break;
        }
        if( isless( n, n_prev ))
        {   n = n_prev;
            if( ~floating_point )
                floating_point--;
            break;
        }
        n_prev = n;
        if( ~floating_point )
            floating_point++;
        s++;
    }
    if( ~floating_point )
        n /= pow( base, floating_point );
    if(sign)
        n = -n;
    *ret_s = s;
    return n;
}
F
E_text_Z_s0_N_f( Pc s
, Pc *ret_s
, N base
){  J_assert( base >= 2 && base <= 36 );
    B sign = no;
    if( *s == '-' )
    {   sign = yes;
        s++;
    }
    F n = 0, n_prev = 0;
    N floating_point = ~0;
    while( *s )
    {   n *= base;
        if( *s >= '0' && *s <= '9' )
            n += *s - '0';
        else if( *s >= 'A' && *s < 'A' + base - 10 )
            n += 10 + *s - 'A';
        else if( *s >= 'a' && *s < 'a' + base - 10 )
            n += 10 + *s - 'a';
        else if( *s == '.'
        && !~floating_point
        )
            floating_point = 0;
        else
        {   if( ~floating_point )
                floating_point--;
            break;
        }
        if( isless( n, n_prev ))
        {   n = n_prev;
            if( ~floating_point )
                floating_point--;
            break;
        }
        n_prev = n;
        if( ~floating_point )
            floating_point++;
        s++;
    }
    if( ~floating_point )
        n /= pow( base, floating_point );
    if(sign)
        n = -n;
    *ret_s = s;
    return n;
}
//------------------------------------------------------------------------------
struct E_math_Z_bignum *
E_text_Z_s_N_bignum( Pc s
, Pc s_end
, Pc *ret_s
, N base
, N min_prec
){  J_assert( s_end >= s );
    J_assert( base >= 2 && base <= 36 );
    B sign = no;
    if( *s == '-' )
    {   sign = yes;
        s++;
    }
    struct E_math_Z_bignum *n = E_math_Q_bignum_M(), *n_prev = E_math_Q_bignum_M(), *add = E_math_Q_bignum_M();
    N floating_point = ~0;
    while( s != s_end )
    {   E_math_Q_bignum_I_multiply_n( n, base );
        if( *s >= '0' && *s <= '9' )
        {   add->digits[0] = *s - '0';
            E_math_Q_bignum_I_add( n, add );
        }else if( *s >= 'A' && *s < 'A' + base - 10 )
        {   add->digits[0] = 10 + *s - 'A';
            E_math_Q_bignum_I_add( n, add );
        }else if( *s >= 'a' && *s < 'a' + base - 10 )
        {   add->digits[0] = 10 + *s - 'a';
            E_math_Q_bignum_I_add( n, add );
        }else if( *s == '.'
        && !~floating_point
        )
            floating_point = 0;
        else
            break;
        if( E_math_Q_bignum_I_compare( n, n_prev ) == -2 )
        {   J_swap( struct E_math_Z_bignum *, n, n_prev );
            break;
        }
        E_math_Q_bignum_W( n_prev );
        n_prev = E_math_Q_bignum_M_copy(n);
        if( ~floating_point )
            floating_point++;
        s++;
    }
    E_math_Q_bignum_W(add);
    E_math_Q_bignum_W( n_prev );
    if( ~floating_point )
        while( --floating_point )
        {   struct E_math_Z_bignum *tmp = E_math_Q_bignum_M();
            tmp->digits[0] = base;
            E_math_Q_bignum_I_divide_modulo_min_prec( n, tmp, min_prec + floating_point - 1 );
            E_math_Q_bignum_W(tmp);
        }
    if(sign)
        E_math_Q_bignum_I_negate(n);
    *ret_s = s;
    return n;
}
struct E_math_Z_bignum *
E_text_Z_s0_N_bignum( Pc s
, Pc *ret_s
, N base
, N min_prec
){  J_assert( base >= 2 && base <= 36 );
    B sign = no;
    if( *s == '-' )
    {   sign = yes;
        s++;
    }
    struct E_math_Z_bignum *n = E_math_Q_bignum_M(), *n_prev = E_math_Q_bignum_M(), *add = E_math_Q_bignum_M();
    N floating_point = ~0;
    while( *s )
    {   E_math_Q_bignum_I_multiply_n( n, base );
        if( *s >= '0' && *s <= '9' )
        {   add->digits[0] = *s - '0';
            E_math_Q_bignum_I_add( n, add );
        }else if( *s >= 'A' && *s < 'A' + base - 10 )
        {   add->digits[0] = 10 + *s - 'A';
            E_math_Q_bignum_I_add( n, add );
        }else if( *s >= 'a' && *s < 'a' + base - 10 )
        {   add->digits[0] = 10 + *s - 'a';
            E_math_Q_bignum_I_add( n, add );
        }else if( *s == '.'
        && !~floating_point
        )
            floating_point = 0;
        else
            break;
        if( E_math_Q_bignum_I_compare( n, n_prev ) == -2 )
        {   J_swap( struct E_math_Z_bignum *, n, n_prev );
            break;
        }
        E_math_Q_bignum_W( n_prev );
        n_prev = E_math_Q_bignum_M_copy(n);
        if( ~floating_point )
            floating_point++;
        s++;
    }
    E_math_Q_bignum_W(add);
    E_math_Q_bignum_W( n_prev );
    if( ~floating_point )
        while( --floating_point )
        {   struct E_math_Z_bignum *tmp = E_math_Q_bignum_M();
            tmp->digits[0] = base;
            E_math_Q_bignum_I_divide_modulo_min_prec( n, tmp, min_prec + floating_point - 1 );
            E_math_Q_bignum_W(tmp);
        }
    if(sign)
        E_math_Q_bignum_I_negate(n);
    *ret_s = s;
    return n;
}
//------------------------------------------------------------------------------
struct E_datetime_Z
E_text_Z_s_N_datetime( Pc s
, Pc s_end
, Pc *ret_s
){  struct E_datetime_Z datetime = {0};
    datetime.year = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( *ret_s != s_end )
        return datetime;
    s = *ret_s + 1;
    datetime.month = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( datetime.month < 1
    || datetime.month > 12
    )
    {   *ret_s = s;
        datetime.month = 0;
        return datetime;
    }
    if( *ret_s != s_end )
        return datetime;
    s = *ret_s + 1;
    datetime.day = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( datetime.day < 1
    || datetime.day > 31
    )
    {   *ret_s = s;
        datetime.month = 0;
        return datetime;
    }else
        switch(datetime.month)
        { case 2:
          {     N days = datetime.year % 100 == 0 && datetime.year % 400 != 0 ? 29 : 28;
                if( datetime.day > days )
                {   *ret_s = s;
                    datetime.day = 0;
                    return datetime;
                }
                break;
          }
          case 4:
          case 6:
          case 9:
          case 11:
                if( datetime.day == 31 )
                {   *ret_s = s;
                    datetime.day = 0;
                    return datetime;
                }
                break;
        }
    if( *ret_s != s_end )
        return datetime;
    s = *ret_s + 1;
    N v = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( v > 23 )
    {   *ret_s = s;
        return datetime;
    }
    datetime.millisecond = 1000 * 60 * 60 * v;
    if( *ret_s != s_end )
        return datetime;
    s = *ret_s + 1;
    v = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( v > 59 )
    {   *ret_s = s;
        return datetime;
    }
    datetime.millisecond += 1000 * 60 * v;
    if( *ret_s != s_end )
        return datetime;
    s = *ret_s + 1;
    v = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( v > 59 )
    {   *ret_s = s;
        return datetime;
    }
    datetime.millisecond += 1000 * v;
    if( *ret_s != s_end )
        return datetime;
    s = *ret_s + 1;
    v = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( v > 999 )
    {   *ret_s = s;
        return datetime;
    }
    datetime.millisecond += v;
    return datetime;
}
struct E_datetime_Z
E_text_Z_s0_N_datetime( Pc s
, Pc *ret_s
){  struct E_datetime_Z datetime = {0};
    datetime.year = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( !**ret_s )
        return datetime;
    s = *ret_s + 1;
    datetime.month = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( datetime.month < 1
    || datetime.month > 12
    )
    {   *ret_s = s;
        datetime.month = 0;
        return datetime;
    }
    if( !**ret_s )
        return datetime;
    s = *ret_s + 1;
    datetime.day = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( datetime.day < 1
    || datetime.day > 31
    )
    {   *ret_s = s;
        datetime.month = 0;
        return datetime;
    }else
        switch(datetime.month)
        { case 2:
          {     N days = datetime.year % 100 == 0 && datetime.year % 400 != 0 ? 29 : 28;
                if( datetime.day > days )
                {   *ret_s = s;
                    datetime.day = 0;
                    return datetime;
                }
                break;
          }
          case 4:
          case 6:
          case 9:
          case 11:
                if( datetime.day == 31 )
                {   *ret_s = s;
                    datetime.day = 0;
                    return datetime;
                }
                break;
        }
    if( !**ret_s )
        return datetime;
    s = *ret_s + 1;
    N v = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( v > 23 )
    {   *ret_s = s;
        return datetime;
    }
    datetime.millisecond = 1000 * 60 * 60 * v;
    if( !**ret_s )
        return datetime;
    s = *ret_s + 1;
    v = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( v > 59 )
    {   *ret_s = s;
        return datetime;
    }
    datetime.millisecond += 1000 * 60 * v;
    if( !**ret_s )
        return datetime;
    s = *ret_s + 1;
    v = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( v > 59 )
    {   *ret_s = s;
        return datetime;
    }
    datetime.millisecond += 1000 * v;
    if( !**ret_s )
        return datetime;
    s = *ret_s + 1;
    v = E_text_Z_s0_Z_10_N_n( s, ret_s );
    if( v > 999 )
    {   *ret_s = s;
        return datetime;
    }
    datetime.millisecond += v;
    return datetime;
}
//------------------------------------------------------------------------------
Pc
E_text_Z_n_N_s( Pc s_end
, N n
, N l
, N base
){  J_assert( base <= 36 );
    n = E_simple_Z_n_I_mod_i2( n, l * 8 );
    do
    {   N k = n % base;
        *--s_end = k < 10
        ? '0' + k
        : 'A' + k - 10;
    }while( n /= base );
    return s_end;
}
N
E_text_Z_n_N_s_G( N n
, N l
, N base
){  J_assert( base <= 36 );
    N i = 0;
    n = E_simple_Z_n_I_mod_i2( n, l * 8 );
    do
    {   i++;
    }while( n /= base );
    return i;
}
//------------------------------------------------------------------------------
Pc
E_text_Z_ns_N_s( Pc s_end
, S sn
, N l
, N base
){  s_end = E_text_Z_n_N_s( s_end, J_abs(sn), l, base );
    if( sn < 0 )
        *--s_end = '-';
    return s_end;
}
N
E_text_Z_ns_N_s_G( S sn
, N l
, N base
){  return E_text_Z_n_N_s_G( J_abs(sn), l, base ) + ( sn < 0 ? 1 : 0 );
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Pc
E_text_Z_s_P_c_fill( Pc s
, Pc s_end
, C c
){  J_assert( s_end >= s );
    while( s < s_end )
        *s++ = c;
    return s;
}
void
E_text_Z_s0_P_lower( Pc s
){  while( *s )
    {   *s = E_text_Z_c_I_lower( *s );
        s++;
    }
}
void
E_text_Z_s_P_lower( Pc s
, Pc s_end
){  J_assert( s_end >= s );
    while( s != s_end )
    {   *s = E_text_Z_c_I_lower( *s );
        s++;
    }
}
void
E_text_Z_s0_P_upper( Pc s
){  while( *s )
    {   *s = E_text_Z_c_I_upper( *s );
        s++;
    }
}
void
E_text_Z_s_P_upper( Pc s
, Pc s_end
){  J_assert( s_end >= s );
    while( s != s_end )
    {   *s = E_text_Z_c_I_upper( *s );
        s++;
    }
}
//------------------------------------------------------------------------------
Pc
E_text_Z_s_P_s_copy( Pc s
, Pc t
, Pc t_end
){  J_assert( t_end >= t );
    J_assert( s < t || s >= t_end );
    while( t != t_end )
    {   *s = *t;
        s++;
        t++;
    }
    return s;
}
Pc
E_text_Z_s_P_s_copy_0( Pc s
, Pc t
, Pc t_end
){  return E_text_Z_s_P_0( E_text_Z_s_P_s_copy( s, t, t_end ));
}
//------------------------------------------------------------------------------
Pc
E_text_Z_s_P_sl_copy( Pc s
, Pc t
, N l
){  J_assert( s < t || s >= t + l );
    while( l-- )
    {   *s = *t;
        s++;
        t++;
    }
    return s;
}
Pc
E_text_Z_s_P_sl_copy_0( Pc s
, Pc t
, N l
){  return E_text_Z_s_P_0( E_text_Z_s_P_sl_copy( s, t, l ));
}
//------------------------------------------------------------------------------
Pc
E_text_Z_s_P_s0_copy( Pc s
, Pc t
){  J_assert( s < t || s >= E_text_Z_s0_R_0_end(t) );
    while( *t )
    {   *s = *t;
        s++;
        t++;
    }
    return s;
}
Pc
E_text_Z_s_P_s0_copy_0( Pc s
, Pc t
){  return E_text_Z_s_P_0( E_text_Z_s_P_s0_copy( s, t ));
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void
E_text_Z_sl_P_rev( Pc s
, N l
){  N i = 0;
    N l_ = l / 2;
    while( l_-- )
    {   J_swap( C, s[i], s[ l - 1 - i ] );
        i++;
    }
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
N
E_text_Z_s_I_s_append( Pc *s
, Pc t
, Pc t_end
){  J_assert( t_end >= t );
    Pc p;
    if( !( p = E_mem_Q_blk_I_append( s, t_end - t )))
        return 0;
    E_text_Z_s_P_s_copy( p, t, t_end );
    return t_end - t;
}
N
E_text_Z_s_I_s_append_0( Pc *s
, Pc t
, Pc t_end
){  J_assert( t_end >= t );
    Pc p;
    if( !( p = E_mem_Q_blk_I_append( s, t_end - t + 1 )))
        return 0;
    E_text_Z_s_P_s_copy_0( p, t, t_end );
    return t_end - t + 1;
}
N
E_text_Z_s_I_s0_append( Pc *s
, Pc t
){  N l = E_text_Z_s0_R_l(t);
    Pc p;
    if( !( p = E_mem_Q_blk_I_append( s, l )))
        return 0;
    E_text_Z_s_P_sl_copy( p, t, l );
    return l;
}
N
E_text_Z_s_I_s0_append_0( Pc *s
, Pc t
){  N l = E_text_Z_s0_R_l(t) + 1;
    Pc p;
    if( !( p = E_mem_Q_blk_I_append( s, l )))
        return 0;
    E_text_Z_s_P_sl_copy_0( p, t, l );
    return l;
}
//------------------------------------------------------------------------------
Pc
E_text_Z_s_I_s_prepend( Pc *s
, Pc t
, Pc t_end
){  J_assert( t_end >= t );
    Pc p;
    if( !( p = E_mem_Q_blk_I_prepend( s, t_end - t )))
        return 0;
    E_text_Z_s_P_s_copy( *s, t, t_end );
    return *s + ( t_end - t );
}
Pc
E_text_Z_s_I_s0_prepend( Pc *s
, Pc t
){  N l = E_text_Z_s0_R_l(t);
    Pc p;
    if( !( p = E_mem_Q_blk_I_prepend( s, l )))
        return 0;
    E_text_Z_s_P_sl_copy( *s, t, l );
    return p;
}
//------------------------------------------------------------------------------
N
E_text_Z_s0_I_clear( Pc *s
){  N l = E_text_Z_s0_R_l( *s );
    if( !l )
        return 0;
    if( !E_mem_Q_blk_I_remove( s, 0, l ))
        return ~0;
    return 0;
}
Pc
E_text_Z_s0_I_c_append( Pc *s
, C c
){  Pc p;
    if( !( p = E_mem_Q_blk_I_append( s, 1 )))
        return 0;
    *( p - 1 ) = c;
    *p = '\0';
    return p - 1;
}
Pc
E_text_Z_s0_I_s0_append( Pc *s
, Pc t
){  N l = E_text_Z_s0_R_l(t);
    if( !l )
        return *s + l;
    Pc p;
    if( !( p = E_mem_Q_blk_I_append( s, l )))
        return 0;
    E_text_Z_s_P_sl_copy_0( p - 1, t, l );
    return p - 1;
}
Pc
E_text_Z_s0_I_s_append( Pc *s
, Pc t
, Pc t_end
){  J_assert( t_end >= t );
    if( !( t_end - t ))
        return *s + ( t_end - t );
    Pc p;
    if( !( p = E_mem_Q_blk_I_append( s, t_end - t )))
        return 0;
    E_text_Z_s_P_s_copy_0( p - 1, t, t_end );
    return p - 1;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Pc
E_text_Z_s_Z_cmdline_T_quote_n( Pc s
, Pc s_end
){  J_assert( s_end >= s );
    while( s != s_end )
        if( E_text_Z_c_T_quote( *s++ ))
            break;
    return s;
}
Pc
E_text_Z_s0_Z_cmdline_T_quote( Pc s
){  while( *s )
    {   if( E_text_Z_c_T_quote( *s ))
            break;
        s++;
    }
    return s;
}
//------------------------------------------------------------------------------
_internal
void
E_text_Z_s_Z_cmdline_Z_arg_I_mode( S *cmd_mode
, Pc arg
){  switch( *cmd_mode )
    { case 0:
          if( E_text_Z_s0_T_s0_eq( arg, "gnome-terminal" ))
              *cmd_mode = 1;
          else if( E_text_Z_s0_T_s0_eq( arg, "su" ))
              *cmd_mode = 2;
          else if( E_text_Z_s0_T_s0_eq( arg, "sg" ))
              *cmd_mode = 3;
          else
              *cmd_mode = 0;
          break;
      case 1:
          if( E_text_Z_s0_T_s0_eq( arg, "-e" ))
              *cmd_mode = -*cmd_mode;
          break;
      case 2:
          if( E_text_Z_s0_T_s0_eq( arg, "-c" ))
              *cmd_mode = -*cmd_mode;
          break;
      case 3:
          if( !E_text_Z_s0_T_s0_eq( arg, "-" ))
              *cmd_mode = -*cmd_mode;
          break;
    }
}
//------------------------------------------------------------------------------
_internal
void
E_text_Z_s_Z_cmdline_N_quote_I_open( Pc cmdline
, N *l
, B *inside
, N level
){  for_n_rev( i, level )
    {   E_mem_Q_blk_P_fill_c( cmdline + *l, ( 1 << i ) - 1, '\\' );
        *l += ( 1 << i ) - 1;
        *( cmdline + *l ) = '\'';
        ++*l;
    }
    *inside = yes;
}
_internal
void
E_text_Z_s_Z_cmdline_N_quote_I_close( Pc cmdline
, N *l
, B *inside
, N level
){  for_n( i, level )
    {   E_mem_Q_blk_P_fill_c( cmdline + *l, ( 1 << i ) - 1, '\\' );
        *l += ( 1 << i ) - 1;
        *( cmdline + *l ) = '\'';
        ++*l;
    }
    *inside = no;
}
N
E_text_Z_s_Z_cmdline_N_quote( Pc cmdline
, N level
, struct E_flow_Z_args *args
, N args_n
){  N l = 0;
    S cmd_mode = 0;
    B inside = no;
    for_n( args_i, args_n )
    {   for_n( i, args->argc )
        {   Pc arg = args->argv[i];
            if( !*arg )
                continue;
            if(l)
            {   if( !inside )
                    E_text_Z_s_Z_cmdline_N_quote_I_open( cmdline, &l, &inside, level );
                *( cmdline + l ) = ' ';
                l++;
            }
            if( cmd_mode < 0 )
            {   if(inside)
                    E_text_Z_s_Z_cmdline_N_quote_I_close( cmdline, &l, &inside, level );
                cmd_mode = 0;
                level++;
            }
            E_text_Z_s_Z_cmdline_Z_arg_I_mode( &cmd_mode, arg );
            Pc arg_;
            if( *( arg_ = E_text_Z_s0_R_c_search( arg, '\'' )))
            {   if( arg_ != arg )
                {   N arg_quote = 0;
                    if( *E_text_Z_s_Z_cmdline_T_quote_n( arg, arg_ ) != '\'' )
                    {   if(inside)
                            E_text_Z_s_Z_cmdline_N_quote_I_close( cmdline, &l, &inside, level );
                        arg_quote = 1;
                        E_text_Z_s_Z_cmdline_N_quote_I_open( cmdline, &l, &inside, level + arg_quote );
                    }else if( !inside )
                        E_text_Z_s_Z_cmdline_N_quote_I_open( cmdline, &l, &inside, level );
                    E_mem_Q_blk_I_copy( cmdline + l, arg, arg_ - arg );
                    l += arg_ - arg;
                    E_text_Z_s_Z_cmdline_N_quote_I_close( cmdline, &l, &inside, level + arg_quote );
                }else if( inside )
                    E_text_Z_s_Z_cmdline_N_quote_I_close( cmdline, &l, &inside, level );
                E_mem_Q_blk_P_fill_c( cmdline + l, ( 2 << level ) - 1, '\\' );
                l += ( 2 << level ) - 1;
                *( cmdline + l ) = '\'';
                l++;
                arg = arg_ + 1;
            }
            if( *arg_ )
                for( ; *( arg_ = E_text_Z_s0_R_c_search( arg, '\'' )); arg = arg_ + 1 )
                {   if( arg_ != arg )
                    {   N arg_quote = 0;
                        if( *E_text_Z_s_Z_cmdline_T_quote_n( arg, arg_ ) != '\'' )
                        {   arg_quote = 1;
                            E_text_Z_s_Z_cmdline_N_quote_I_open( cmdline, &l, &inside, level + arg_quote );
                        }
                        E_mem_Q_blk_I_copy( cmdline + l, arg, arg_ - arg );
                        l += arg_ - arg;
                        if( arg_quote )
                            E_text_Z_s_Z_cmdline_N_quote_I_close( cmdline, &l, &inside, level + arg_quote );
                    }
                    E_mem_Q_blk_P_fill_c( cmdline + l, ( 2 << level ) - 1, '\\' );
                    l += ( 2 << level ) - 1;
                    *( cmdline + l ) = '\'';
                    l++;
                }
            if( arg == args->argv[i] ) // Nie znalazł żadnego cudzysłowu.
            {   if( arg == args->argv[i] )
                    arg_ = E_text_Z_s0_R_end( args->argv[i] );
                N arg_quote = 0;
                if( *E_text_Z_s_Z_cmdline_T_quote_n( arg, arg_ ))
                {   if(inside)
                        E_text_Z_s_Z_cmdline_N_quote_I_close( cmdline, &l, &inside, level );
                    arg_quote = 1;
                    E_text_Z_s_Z_cmdline_N_quote_I_open( cmdline, &l, &inside, level + arg_quote );
                }else if( !inside )
                    E_text_Z_s_Z_cmdline_N_quote_I_open( cmdline, &l, &inside, level );
                E_mem_Q_blk_I_copy( cmdline + l, arg, arg_ - arg );
                l += arg_ - arg;
                if( arg_quote )
                    E_text_Z_s_Z_cmdline_N_quote_I_close( cmdline, &l, &inside, level + arg_quote );
            }else if( *arg ) // Znalazł i na końcu jest jeszcze coś oprócz zastąpionego cudzysłowu.
            {   if( arg == args->argv[i] )
                    arg_ = E_text_Z_s0_R_end( args->argv[i] );
                N arg_quote = 0;
                if( *E_text_Z_s_Z_cmdline_T_quote_n( arg, arg_ ))
                {   arg_quote = 1;
                    E_text_Z_s_Z_cmdline_N_quote_I_open( cmdline, &l, &inside, level + arg_quote );
                }
                E_mem_Q_blk_I_copy( cmdline + l, arg, arg_ - arg );
                l += arg_ - arg;
                if( arg_quote )
                    E_text_Z_s_Z_cmdline_N_quote_I_close( cmdline, &l, &inside, level + arg_quote );
            }
        }
        args++;
    }
    if(inside)
        E_text_Z_s_Z_cmdline_N_quote_I_close( cmdline, &l, &inside, level );
    return l;
}
//------------------------------------------------------------------------------
_internal
void
E_text_Z_s_Z_cmdline_N_quote_G_open(
  N *l
, B *inside
, N level
){  for_n_rev( i, level )
        *l += 1 << i;
    *inside = yes;
}
_internal
void
E_text_Z_s_Z_cmdline_N_quote_G_close(
  N *l
, B *inside
, N level
){  for_n( i, level )
        *l += 1 << i;
    *inside = no;
}
N
E_text_Z_s_Z_cmdline_N_quote_G(
  N level
, struct E_flow_Z_args *args
, N args_n
){  N l = 0;
    S cmd_mode = 0;
    B inside = no;
    for_n( args_i, args_n )
    {   for_n( i, args->argc )
        {   Pc arg = args->argv[i];
            if( !*arg )
                continue;
            if(l)
            {   if( !inside )
                    E_text_Z_s_Z_cmdline_N_quote_G_open( &l, &inside, level );
                l++;
            }
            if( cmd_mode < 0 )
            {   if(inside)
                    E_text_Z_s_Z_cmdline_N_quote_G_close( &l, &inside, level );
                cmd_mode = 0;
                level++;
            }
            E_text_Z_s_Z_cmdline_Z_arg_I_mode( &cmd_mode, arg );
            Pc arg_;
            if( *( arg_ = E_text_Z_s0_R_c_search( arg, '\'' )))
            {   if( arg_ != arg )
                {   N arg_quote = 0;
                    if( *E_text_Z_s_Z_cmdline_T_quote_n( arg, arg_ ) != '\'' )
                    {   if(inside)
                            E_text_Z_s_Z_cmdline_N_quote_G_close( &l, &inside, level );
                        arg_quote = 1;
                        E_text_Z_s_Z_cmdline_N_quote_G_open( &l, &inside, level + arg_quote );
                    }else if( !inside )
                        E_text_Z_s_Z_cmdline_N_quote_G_open( &l, &inside, level );
                    l += arg_ - arg;
                    E_text_Z_s_Z_cmdline_N_quote_G_close( &l, &inside, level + arg_quote );
                }else if( inside )
                    E_text_Z_s_Z_cmdline_N_quote_G_close( &l, &inside, level );
                l += 2 << level;
                arg = arg_ + 1;
            }
            if( *arg_ )
                for( ; *( arg_ = E_text_Z_s0_R_c_search( arg, '\'' )); arg = arg_ + 1 )
                {   if( arg_ != arg )
                    {   N arg_quote = 0;
                        if( *E_text_Z_s_Z_cmdline_T_quote_n( arg, arg_ ) != '\'' )
                        {   arg_quote = 1;
                            E_text_Z_s_Z_cmdline_N_quote_G_open( &l, &inside, level + arg_quote );
                        }
                        l += arg_ - arg;
                        if( arg_quote )
                            E_text_Z_s_Z_cmdline_N_quote_G_close( &l, &inside, level + arg_quote );
                    }
                    l += 2 << level;
                }
            if( arg == args->argv[i] )
            {   if( arg == args->argv[i] )
                    arg_ = E_text_Z_s0_R_end( args->argv[i] );
                N arg_quote = 0;
                if( *E_text_Z_s_Z_cmdline_T_quote_n( arg, arg_ ))
                {   if(inside)
                        E_text_Z_s_Z_cmdline_N_quote_G_close( &l, &inside, level );
                    arg_quote = 1;
                    E_text_Z_s_Z_cmdline_N_quote_G_open( &l, &inside, level + arg_quote );
                }else if( !inside )
                    E_text_Z_s_Z_cmdline_N_quote_G_open( &l, &inside, level );
                l += arg_ - arg;
                if( arg_quote )
                    E_text_Z_s_Z_cmdline_N_quote_G_close( &l, &inside, level + arg_quote );
            }else if( *arg )
            {   if( arg == args->argv[i] )
                    arg_ = E_text_Z_s0_R_end( args->argv[i] );
                N arg_quote = 0;
                if( *E_text_Z_s_Z_cmdline_T_quote_n( arg, arg_ ))
                {   arg_quote = 1;
                    E_text_Z_s_Z_cmdline_N_quote_G_open( &l, &inside, level + arg_quote );
                }
                l += arg_ - arg;
                if( arg_quote )
                    E_text_Z_s_Z_cmdline_N_quote_G_close( &l, &inside, level + arg_quote );
            }
        }
        args++;
    }
    if(inside)
        E_text_Z_s_Z_cmdline_N_quote_G_close( &l, &inside, level );
    return l;
}
//==============================================================================
N
E_text_Z_su0_R_n( Pc s
){  N n = 0;
    while( *s )
    {   U u;
        s = E_text_Z_su_R_u( s, &u );;
        n++;
    }
    return n;
}
N // Ile bajtów zapisano lub błąd.
E_text_Z_u_R_su( U u
, Pc s
){  if( u <= 0x7f )
    {   s[0] = (C)u;
        return 1;
    }
    N first = 0x1f;
    N i = 0;
    while( u > first )
    {   s[i] = (C)(( u & 0x3f ) | 0x80 );
        first >>= 1;
        if( !first )
            return ~0;
        u >>= 6;
        i++;
    }
    s[i] = (C)(( ~first << 2 ) | u );
    E_text_Z_sl_P_rev( s, i + 1 );
    return i + 1;
}
N
E_text_Z_u_R_su_G( U u
){  if( u <= 0x7f )
        return 1;
    N first = 0x1f;
    N i = 0;
    while( u > first )
    {   first >>= 1;
        if( !first )
            return ~0;
        u >>= 6;
        i++;
    }
    return i + 1;
}
//TODO Dodać sprawdzanie najkrótszego kodowania oraz powiadamianie o nieprawidłowym znaku UTF-8.
Pc
E_text_Z_su_R_u( Pc s
, U *u
){  if( (S8)*s >= 0 )
    {   *u = *s;
        return s + 1;
    }
    U v = ~(S8)*s;
    N n = E_asm_I_bsr(v);
    if( n == ~0
    || n == 6
    )
        return s;
    v = *s & ( _v( v, 1 ) << n ) - 1;
    for_n( i, 6 - n )
    {   if(( *++s & 0xc0 ) != 0x80 )
            return s;
        v <<= 6;
        v |= *s & 0x3f;
    }
    *u = v;
    return s + 1;
}
Pc
E_text_Z_su_R_u_rev( Pc s
, U *u
){  if( (S8)*( s - 1 ) >= 0 )
    {   *u = *( s - 1 );
        return s - 1;
    }
    U v = 0;
    for_n( i, 7 )
    {   if(( *--s & 0xc0 ) != 0x80 )
            break;
        v |= ( *s & 0x3f ) << ( i * 6 );
    }
    N n = E_asm_I_bsr( ~(S8)*s );
    if( n == ~0
    || n != 6 - i
    )
        return s + i;
    v |= ( *s & (( _v( v, 1 ) << n ) - 1 )) << (( i + 1 ) * 6 );
    *u = v;
    return s;
}
N
E_text_Z_su0_R_l( Pc s
){  N i = 0;
    while( *s )
    {   U u = ~0;
        s = E_text_Z_su_R_u( s, &u );
        if( !~u )
            return ~0;
        i++;
    }
    return i;
}
N // Ile bajtów przeczytano lub błąd.
E_text_Z_getter_Z_c_R_u( N (*getter)(void)
, U *u
){  N c = getter();
    if( !~c
    || c == E_mem_Q_file_S_eof
    )
        return c;
    if( (S8)c >= 0 )
    {   *u = c;
        return 1;
    }
    N n = E_asm_I_bsr( ~(S8)c );
    if( n == ~0
    || n == 6
    )
        return ~0;
    U v = c & ( _v( v, 1 ) << n ) - 1;
    for_n( i, 6 - n )
    {   c = getter();
        if( !~c
        || c == E_mem_Q_file_S_eof
        )
            return c;
        if(( c & 0xc0 ) != 0x80 )
            return ~0;
        v <<= 6;
        v |= c & 0x3f;
    }
    *u = v;
    return 7 - n;
}
N
E_text_Z_getter_Z_c_R_u_rev( N (*getter)(void)
, U *u
){  N c = getter();
    if( !~c
    || c == E_mem_Q_file_S_eof
    )
        return c;
    if( (S8)c >= 0 )
    {   *u = c;
        return 1;
    }
    U v = 0;
    for_n( i, 7 )
    {   if(( c & 0xc0 ) != 0x80 )
            break;
        v |= ( c & 0x3f ) << ( i * 6 );
        c = getter();
        if( !~c
        || c == E_mem_Q_file_S_eof
        )
            return c;
    }
    N n = E_asm_I_bsr( ~(S8)c );
    if( n == ~0
    || n != 6 - i
    )
        return ~0;
    v |= ( c & (( _v( v, 1 ) << n ) - 1 )) << ( i * 6 );
    *u = v;
    return i;
}
/******************************************************************************/
