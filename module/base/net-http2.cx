/*******************************************************************************
*   ___   publicplace
*  ¦OUX¦  C+
*  ¦/C+¦  component
*   ---   base
*         network HTTP/2
* ©overcq                on ‟Gentoo Linux 17.1” “x86_64”             2021‒10‒2 O
*******************************************************************************/
#define S_keepalive_timeout     5
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
N E_net_http2_S_static_table_first_index = 15;
Pc
E_net_http2_S_static_table[] =
{ "accept-charset"
, "accept-encoding"
, "accept-language"
, "accept-ranges"
, "accept"
, "access-control-allow-origin"
, "age"
, "allow"
, "authorizatin"
, "cache-control"
, "content-disposition"
, "content-encoding"
, "content-language"
, "content-length"
, "content-location"
, "content-range"
, "content-type"
, "cookie"
, "date"
, "etag"
, "expect"
, "expires"
, "from"
, "host"
, "if-match"
, "if-modified-since"
, "if-none-match"
, "if-range"
, "if-unmodified-since"
, "last-modified"
, "link"
, "location"
, "max-forwards"
, "proxy-authenticate"
, "proxy-authorization"
, "range"
, "referer"
, "refresh"
, "retry-after"
, "server"
, "set-cookie"
, "strict-transport-security"
, "transfer-encoding"
, "user-agent"
, "vary"
, "via"
, "www-authenticate"
};
struct E_net_http2_Z_huffman_code
{ N32 code;
  N8 length;
};
struct E_net_http2_Z_huffman_code
E_net_http2_S_huffman_table[] =
{ { 0x1ff8, 13 }
, { 0x7fffd8, 23 }
, { 0xfffffe2, 28 }
, { 0xfffffe3, 28 }
, { 0xfffffe4, 28 }
, { 0xfffffe5, 28 }
, { 0xfffffe6, 28 }
, { 0xfffffe7, 28 }
, { 0xfffffe8, 28 }
, { 0xffffea, 24 }
, { 0x3ffffffc, 30 }
, { 0xfffffe9, 28 }
, { 0xfffffea, 28 }
, { 0x3ffffffd, 30 }
, { 0xfffffeb, 28 }
, { 0xfffffec, 28 }
, { 0xfffffed, 28 }
, { 0xfffffee, 28 }
, { 0xfffffef, 28 }
, { 0xffffff0, 28 }
, { 0xffffff1, 28 }
, { 0xffffff2, 28 }
, { 0x3ffffffe, 30 }
, { 0xffffff3, 28 }
, { 0xffffff4, 28 }
, { 0xffffff5, 28 }
, { 0xffffff6, 28 }
, { 0xffffff7, 28 }
, { 0xffffff8, 28 }
, { 0xffffff9, 28 }
, { 0xffffffa, 28 }
, { 0xffffffb, 28 }
, { 0x14, 6 }
, { 0x3f8, 10 }
, { 0x3f9, 10 }
, { 0xffa, 12 }
, { 0x1ff9, 13 }
, { 0x15, 6 }
, { 0xf8, 8 }
, { 0x7fa, 11 }
, { 0x3fa, 10 }
, { 0x3fb, 10 }
, { 0xf9, 8 }
, { 0x7fb, 11 }
, { 0xfa, 8 }
, { 0x16, 6 }
, { 0x17, 6 }
, { 0x18, 6 }
, { 0x0, 5 }
, { 0x1, 5 }
, { 0x2, 5 }
, { 0x19, 6 }
, { 0x1a, 6 }
, { 0x1b, 6 }
, { 0x1c, 6 }
, { 0x1d, 6 }
, { 0x1e, 6 }
, { 0x1f, 6 }
, { 0x5c, 7 }
, { 0xfb, 8 }
, { 0x7ffc, 15 }
, { 0x20, 6 }
, { 0xffb, 12 }
, { 0x3fc, 10 }
, { 0x1ffa, 13 }
, { 0x21, 6 }
, { 0x5d, 7 }
, { 0x5e, 7 }
, { 0x5f, 7 }
, { 0x60, 7 }
, { 0x61, 7 }
, { 0x62, 7 }
, { 0x63, 7 }
, { 0x64, 7 }
, { 0x65, 7 }
, { 0x66, 7 }
, { 0x67, 7 }
, { 0x68, 7 }
, { 0x69, 7 }
, { 0x6a, 7 }
, { 0x6b, 7 }
, { 0x6c, 7 }
, { 0x6d, 7 }
, { 0x6e, 7 }
, { 0x6f, 7 }
, { 0x70, 7 }
, { 0x71, 7 }
, { 0x72, 7 }
, { 0xfc, 8 }
, { 0x73, 7 }
, { 0xfd, 8 }
, { 0x1ffb, 13 }
, { 0x7fff0, 19 }
, { 0x1ffc, 13 }
, { 0x3ffc, 14 }
, { 0x22, 6 }
, { 0x7ffd, 15 }
, { 0x3, 5 }
, { 0x23, 6 }
, { 0x4, 5 }
, { 0x24, 6 }
, { 0x5, 5 }
, { 0x25, 6 }
, { 0x26, 6 }
, { 0x27, 6 }
, { 0x6, 5 }
, { 0x74, 7 }
, { 0x75, 7 }
, { 0x28, 6 }
, { 0x29, 6 }
, { 0x2a, 6 }
, { 0x7, 5 }
, { 0x2b, 6 }
, { 0x76, 7 }
, { 0x2c, 6 }
, { 0x8, 5 }
, { 0x9, 5 }
, { 0x2d, 6 }
, { 0x77, 7 }
, { 0x78, 7 }
, { 0x79, 7 }
, { 0x7a, 7 }
, { 0x7b, 7 }
, { 0x7ffe, 15 }
, { 0x7fc, 11 }
, { 0x3ffd, 14 }
, { 0x1ffd, 13 }
, { 0xffffffc, 28 }
, { 0xfffe6, 20 }
, { 0x3fffd2, 22 }
, { 0xfffe7, 20 }
, { 0xfffe8, 20 }
, { 0x3fffd3, 22 }
, { 0x3fffd4, 22 }
, { 0x3fffd5, 22 }
, { 0x7fffd9, 23 }
, { 0x3fffd6, 22 }
, { 0x7fffda, 23 }
, { 0x7fffdb, 23 }
, { 0x7fffdc, 23 }
, { 0x7fffdd, 23 }
, { 0x7fffde, 23 }
, { 0xffffeb, 24 }
, { 0x7fffdf, 23 }
, { 0xffffec, 24 }
, { 0xffffed, 24 }
, { 0x3fffd7, 22 }
, { 0x7fffe0, 23 }
, { 0xffffee, 24 }
, { 0x7fffe1, 23 }
, { 0x7fffe2, 23 }
, { 0x7fffe3, 23 }
, { 0x7fffe4, 23 }
, { 0x1fffdc, 21 }
, { 0x3fffd8, 22 }
, { 0x7fffe5, 23 }
, { 0x3fffd9, 22 }
, { 0x7fffe6, 23 }
, { 0x7fffe7, 23 }
, { 0xffffef, 24 }
, { 0x3fffda, 22 }
, { 0x1fffdd, 21 }
, { 0xfffe9, 20 }
, { 0x3fffdb, 22 }
, { 0x3fffdc, 22 }
, { 0x7fffe8, 23 }
, { 0x7fffe9, 23 }
, { 0x1fffde, 21 }
, { 0x7fffea, 23 }
, { 0x3fffdd, 22 }
, { 0x3fffde, 22 }
, { 0xfffff0, 24 }
, { 0x1fffdf, 21 }
, { 0x3fffdf, 22 }
, { 0x7fffeb, 23 }
, { 0x7fffec, 23 }
, { 0x1fffe0, 21 }
, { 0x1fffe1, 21 }
, { 0x3fffe0, 22 }
, { 0x1fffe2, 21 }
, { 0x7fffed, 23 }
, { 0x3fffe1, 22 }
, { 0x7fffee, 23 }
, { 0x7fffef, 23 }
, { 0xfffea, 20 }
, { 0x3fffe2, 22 }
, { 0x3fffe3, 22 }
, { 0x3fffe4, 22 }
, { 0x7ffff0, 23 }
, { 0x3fffe5, 22 }
, { 0x3fffe6, 22 }
, { 0x7ffff1, 23 }
, { 0x3ffffe0, 26 }
, { 0x3ffffe1, 26 }
, { 0xfffeb, 20 }
, { 0x7fff1, 19 }
, { 0x3fffe7, 22 }
, { 0x7ffff2, 23 }
, { 0x3fffe8, 22 }
, { 0x1ffffec, 25 }
, { 0x3ffffe2, 26 }
, { 0x3ffffe3, 26 }
, { 0x3ffffe4, 26 }
, { 0x7ffffde, 27 }
, { 0x7ffffdf, 27 }
, { 0x3ffffe5, 26 }
, { 0xfffff1, 24 }
, { 0x1ffffed, 25 }
, { 0x7fff2, 19 }
, { 0x1fffe3, 21 }
, { 0x3ffffe6, 26 }
, { 0x7ffffe0, 27 }
, { 0x7ffffe1, 27 }
, { 0x3ffffe7, 26 }
, { 0x7ffffe2, 27 }
, { 0xfffff2, 24 }
, { 0x1fffe4, 21 }
, { 0x1fffe5, 21 }
, { 0x3ffffe8, 26 }
, { 0x3ffffe9, 26 }
, { 0xffffffd, 28 }
, { 0x7ffffe3, 27 }
, { 0x7ffffe4, 27 }
, { 0x7ffffe5, 27 }
, { 0xfffec, 20 }
, { 0xfffff3, 24 }
, { 0xfffed, 20 }
, { 0x1fffe6, 21 }
, { 0x3fffe9, 22 }
, { 0x1fffe7, 21 }
, { 0x1fffe8, 21 }
, { 0x7ffff3, 23 }
, { 0x3fffea, 22 }
, { 0x3fffeb, 22 }
, { 0x1ffffee, 25 }
, { 0x1ffffef, 25 }
, { 0xfffff4, 24 }
, { 0xfffff5, 24 }
, { 0x3ffffea, 26 }
, { 0x7ffff4, 23 }
, { 0x3ffffeb, 26 }
, { 0x7ffffe6, 27 }
, { 0x3ffffec, 26 }
, { 0x3ffffed, 26 }
, { 0x7ffffe7, 27 }
, { 0x7ffffe8, 27 }
, { 0x7ffffe9, 27 }
, { 0x7ffffea, 27 }
, { 0x7ffffeb, 27 }
, { 0xffffffe, 28 }
, { 0x7ffffec, 27 }
, { 0x7ffffed, 27 }
, { 0x7ffffee, 27 }
, { 0x7ffffef, 27 }
, { 0x7fffff0, 27 }
, { 0x3ffffee, 26 }
, { 0x3fffffff, 30 }
};
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
N8 E_net_http2_S_alpn[] =
{ 2, 'h', '2'
, 8, 'h', 't', 't', 'p', '/', '1', '.', '1'
};
N8 E_net_http2_S_alpn_l = sizeof( E_net_http2_S_alpn );
B Q_ssl_S_http2;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
enum E_net_http2_Z_error
{ E_net_http2_Z_error_S_no_error
, E_net_http2_Z_error_S_protocol_error
, E_net_http2_Z_error_S_internal_error
, E_net_http2_Z_error_S_flow_control_error
, E_net_http2_Z_error_S_settings_timeout
, E_net_http2_Z_error_S_stream_closed
, E_net_http2_Z_error_S_frame_size_error
, E_net_http2_Z_error_S_refused_stream
, E_net_http2_Z_error_S_cancel
, E_net_http2_Z_error_S_compression_error
, E_net_http2_Z_error_S_connect_error
, E_net_http2_Z_error_S_enhance_your_calm
, E_net_http2_Z_error_S_inadequate_security
, E_net_http2_Z_error_S_http_1_1_required
};
enum E_net_http2_Z_frame_type
{ E_net_http2_Z_frame_type_S_data
, E_net_http2_Z_frame_type_S_headers
, E_net_http2_Z_frame_type_S_priority
, E_net_http2_Z_frame_type_S_rst_stream
, E_net_http2_Z_frame_type_S_settings
, E_net_http2_Z_frame_type_S_push_promise
, E_net_http2_Z_frame_type_S_ping
, E_net_http2_Z_frame_type_S_goaway
, E_net_http2_Z_frame_type_S_window_update
, E_net_http2_Z_frame_type_S_continuation
};
enum E_net_http2_Z_frame_flag
{ E_net_http2_Z_frame_type_data_Z_flag_S_end_stream = 1
, E_net_http2_Z_frame_type_data_Z_flag_S_padded = 8
, E_net_http2_Z_frame_type_headers_Z_flag_S_end_stream = 1
, E_net_http2_Z_frame_type_headers_Z_flag_S_end_headers = 4
, E_net_http2_Z_frame_type_headers_Z_flag_S_padded = 8
, E_net_http2_Z_frame_type_headers_Z_flag_S_priority = 0x20
, E_net_http2_Z_frame_type_settings_Z_flag_S_ack = 1
, E_net_http2_Z_frame_type_push_promise_Z_flag_S_end_headers = 4
, E_net_http2_Z_frame_type_push_promise_Z_flag_S_padded = 8
, E_net_http2_Z_frame_type_ping_Z_flag_S_ack = 1
, E_net_http2_Z_frame_type_continuation_Z_flag_S_end_headers = 4
};
enum E_net_http2_Z_frame_type_setting
{ E_net_http2_Z_frame_type_setting_Z_header_table_size = 1
, E_net_http2_Z_frame_type_setting_Z_enable_push
, E_net_http2_Z_frame_type_setting_Z_max_concurrent_streams
, E_net_http2_Z_frame_type_setting_Z_initial_window_size
, E_net_http2_Z_frame_type_setting_Z_max_frame_size
, E_net_http2_Z_frame_type_setting_Z_max_header_list_size
};
struct E_net_http2_Z_connect
{ int poll_fd;
  int listen_sock;
  SSL *ssl;
  Pc buf, buf_, buf_2, buf_2_;
  N buf_l;
  Z_clock_time keepalive_tv;
  N send_dynamic_table_size_max;
  B send_dynamic_table_size_max_hit;
  B push;
  N concurrent_streams_max;
  S recv_window_size;
  S send_window_size;
  N recv_frame_size_max;
  N send_frame_size_max;
  N header_list_size_max;
  Pc *dynamic_table_dec;
  N dynamic_table_dec_n;
  Pc *dynamic_table_enc;
  N dynamic_table_enc_n;
  struct E_mem_Q_tab_Z *stream;
} *E_net_http2_S_connect;
N E_net_http2_S_connect_n;
struct E_net_http2_Z_stream
{ S recv_window_size;
  S send_window_size;
  B end_stream;
  Pc *headers;
  N headers_n;
  Pc buf_headers;
  N buf_headers_l;
  B data_start;
  z_stream *z_stream;
  Pc zlib_data;
  I file_id;
  Pc file_name;
};
//==============================================================================
N
Q_headers_R_std_l( Pc *headers
, N headers_n
){  N l = 0;
    for_n( i, headers_n )
        l += E_text_Z_s0_R_l( headers[i] ) + 32;
    return l;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
N
Q_buffer_I_read_v( Pc *buffer
, N prefix_l
, N value
){  N max = ( 1 << prefix_l ) - 1;
    value &= max;
    if( value == max )
    {   value = 0;
        N i = 0;
        O{  N b = E_net_http2_Q_buffer_I_read_n( buffer, 1 );
            value |= ( b & 0x7f ) << i;
            if(!( b & 0x80 ))
                break;
            i += 7;
        }
        value += max;
    }
    return value;
}
void
Q_buffer_I_write_v( Pc *buffer
, N prefix_mask
, N prefix_l
, N value
){  N max = ( 1 << prefix_l ) - 1;
    if( value < max )
    {   E_net_http2_Q_buffer_I_write_n( buffer, prefix_mask | value, 1 );
        return;
    }
    E_net_http2_Q_buffer_I_write_n( buffer, prefix_mask | max, 1 );
    value -= max;
    while( value > 0x7f )
    {   E_net_http2_Q_buffer_I_write_n( buffer, 0x80 | ( value & 0x7f ), 1 );
        value >>= 7;
    }
    E_net_http2_Q_buffer_I_write_n( buffer, value, 1 );
}
Pc
Q_buffer_I_decode( Pc *buffer
, N length
){  Pc s = M(1);
    if( !s )
        return 0;
    s[0] = '\0';
    N64 v = 0;
    N v_l = 0;
    O{  if( v_l < 30
        && length
        )
        {   v <<= 8;
            v |= E_net_http2_Q_buffer_I_read_n( buffer, 1 );
            v_l += 8;
            length--;
        }
        for_n( i, sizeof( E_net_http2_S_huffman_table ) / sizeof( E_net_http2_S_huffman_table[0] ))
        {   if( v_l < E_net_http2_S_huffman_table[i].length )
                continue;
            if(( v >> ( v_l - E_net_http2_S_huffman_table[i].length )) == E_net_http2_S_huffman_table[i].code )
            {   if( !E_text_Z_s0_I_c_append( &s, i ))
                {   W(s);
                    return 0;
                }
                v_l -= E_net_http2_S_huffman_table[i].length;
                if( v_l )
                    v &= (N64)~0 >> ( sizeof(N64) * 8 - v_l );
                else
                    v = 0;
                goto For_end;
            }
        }
        if( v_l < 30
        && length
        )
            continue;
        if( !length
        && v_l < 8
        )
            return s;
        W(s);
        return 0;
For_end:;
    }
}
N
Q_buffer_I_encode( Pc s
, Pc *buffer
, N *length
){  *buffer = M(0);
    if( !*buffer )
        return ~0;
    *length = 0;
    N64 v = 0;
    N v_l = 0;
    while( *s )
    {   v <<= E_net_http2_S_huffman_table[ (int)*s ].length;
        v |= E_net_http2_S_huffman_table[ (int)*s ].code;
        v_l += E_net_http2_S_huffman_table[ (int)*s ].length;
        while( v_l >= 8 )
        {   Pc p = E_mem_Q_blk_I_append( buffer, 1 );
            if( !p )
            {   W( *buffer );
                return ~0;
            }
            v_l -= 8;
            *p = v >> v_l;
            v &= ( 1 << v_l ) - 1;
            (*length)++;
        }
        s++;
    }
    if( v_l )
    {   Pc p = E_mem_Q_blk_I_append( buffer, 1 );
        if( !p )
        {   W( *buffer );
            return ~0;
        }
        *p = ( v << ( 8 - v_l )) | ( (N8)~0 >> v_l );
        (*length)++;
    }
    return 0;
}
N
Q_buffer_I_encode_or_plain( Pc *buffer
, Pc s
){  Pc buffer_;
    N length;
    if( !~Q_buffer_I_encode( s, &buffer_, &length ))
        return ~0;
    N l = E_text_Z_s0_R_l(s);
    if( l > length )
    {   Q_buffer_I_write_v( buffer, 0x80, 7, length );
        for_n( i, length )
            E_net_http2_Q_buffer_I_write_n( buffer, buffer_[i], 1 );
    }else
    {   W( buffer_ );
        Q_buffer_I_write_v( buffer, 0, 7, l );
        while( *s )
        {   E_net_http2_Q_buffer_I_write_n( buffer, *s, 1 );
            s++;
        }
    }
    return 0;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
N
E_net_http2_Q_buffer_I_read_n( Pc *buffer
, N n
){  N ret = 0;
    for_n( i, n )
    {   ret <<= 8;
        ret |= (N8)**buffer;
        (*buffer)++;
    }
    return ret;
}
void
E_net_http2_Q_buffer_I_read_s_l( Pc *buffer
, Pc s
, N l
){  for_n( i, l )
    {   *s = **buffer;
        s++;
        (*buffer)++;
    }
}
void
E_net_http2_Q_buffer_I_write_n( Pc *buffer
, N v
, N n
){  for_n_rev( i, n )
    {   **buffer = ( v >> ( 8 * i )) & 0xff;
        (*buffer)++;
    }
}
void
E_net_http2_Q_buffer_I_write_s_l( Pc *buffer
, Pc s
, N l
){  for_n( i, l )
    {   **buffer = *s;
        s++;
        (*buffer)++;
    }
}
//------------------------------------------------------------------------------
N
E_net_http2_Q_buffer_I_read_headers( Pc *buffer
, N length
, Pc **headers
, N *headers_n
, Pc **dynamic_table
, N *dynamic_table_n
){  while(length)
    {   N v = E_net_http2_Q_buffer_I_read_n( buffer, 1 );
        length--;
        if( v & 0x80 )
        {   Pc buffer_ = *buffer;
            v = Q_buffer_I_read_v( buffer, 7, v );
            length -= *buffer - buffer_;
            if( v < E_net_http2_S_static_table_first_index )
            {   Pc name;
                switch(v)
                { default:
                        return ~0;
                  case 2:
                        name = ":method: GET";
                        break;
                  case 3:
                        name = ":method: POST";
                        break;
                  case 4:
                        name = ":path: /";
                        break;
                  case 5:
                        name = ":path: /index.html";
                        break;
                  case 6:
                        name = ":scheme: http";
                        break;
                  case 7:
                        name = ":scheme: https";
                        break;
                  case 8:
                        name = ":status: 200";
                        break;
                  case 9:
                        name = ":status: 204";
                        break;
                  case 10:
                        name = ":status: 206";
                        break;
                  case 11:
                        name = ":status: 304";
                        break;
                  case 12:
                        name = ":status: 400";
                        break;
                  case 13:
                        name = ":status: 404";
                        break;
                  case 14:
                        name = ":status: 500";
                        break;
                }
                if( !E_mem_Q_blk_I_append( headers, 1 ))
                    return ~0;
                (*headers_n)++;
                N l = E_text_Z_s0_R_0_l(name);
                (*headers)[ *headers_n - 1 ] = M(l);
                if( !(*headers)[ *headers_n - 1 ] )
                {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                    return ~0;
                }
                E_text_Z_s_P_s0_copy_0( (*headers)[ *headers_n - 1 ], name );
            }else if( v == 16 )
            {   if( !E_mem_Q_blk_I_append( headers, 1 ))
                    return ~0;
                (*headers_n)++;
                (*headers)[ *headers_n - 1 ] = M(31);
                if( !(*headers)[ *headers_n - 1 ] )
                {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                    return ~0;
                }
                E_text_Z_s_P_s0_copy_0( (*headers)[ *headers_n - 1 ], "accept-encoding: gzip, deflate" );
            }else
            {   v -= E_net_http2_S_static_table_first_index;
                if( v < sizeof( E_net_http2_S_static_table ) / sizeof( E_net_http2_S_static_table[0] ))
                    return ~0;
                v -= sizeof( E_net_http2_S_static_table ) / sizeof( E_net_http2_S_static_table[0] );
                if( v >= *dynamic_table_n )
                    return ~0;
                if( !E_mem_Q_blk_I_append( headers, 1 ))
                    return ~0;
                (*headers_n)++;
                N l = E_text_Z_s0_R_0_l( (*dynamic_table)[v] );
                (*headers)[ *headers_n - 1 ] = M(l);
                if( !(*headers)[ *headers_n - 1 ] )
                {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                    return ~0;
                }
                E_text_Z_s_P_s0_copy_0( (*headers)[ *headers_n - 1 ], (*dynamic_table)[v] );
            }
        }else if(( v & 0xc0 ) == 0x40 )
        {   Pc buffer_ = *buffer;
            v = Q_buffer_I_read_v( buffer, 6, v );
            length -= *buffer - buffer_;
            Pc name;
            if( !v )
            {   if( !length )
                    return ~0;
                N8 name_length = E_net_http2_Q_buffer_I_read_n( buffer, 1 );
                length--;
                Pc buffer_ = *buffer;
                N l = Q_buffer_I_read_v( buffer, 7, name_length );
                length -= *buffer - buffer_;
                if( length < l )
                    return ~0;
                length -= l;
                if( name_length & 0x80 )
                {   name = Q_buffer_I_decode( buffer, l );
                    if( !name )
                        return ~0;
                }else
                {   name = M( l + 1 );
                    if( !name )
                        return ~0;
                    E_net_http2_Q_buffer_I_read_s_l( buffer, name, l );
                    name[l] = '\0';
                }
            }else
            {   if( v < E_net_http2_S_static_table_first_index )
                {   switch(v)
                    { case 1:
                            name = M(11);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":authority" );
                            break;
                      case 2:
                      case 3:
                            name = M(8);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":method" );
                            break;
                      case 4:
                      case 5:
                            name = M(6);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":path" );
                            break;
                      case 6:
                      case 7:
                            name = M(8);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":scheme" );
                            break;
                      case 8:
                      case 9:
                      case 10:
                      case 11:
                      case 12:
                      case 13:
                      case 14:
                            name = M(8);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":status" );
                            break;
                    }
                }else
                {   v -= E_net_http2_S_static_table_first_index;
                    if( v < sizeof( E_net_http2_S_static_table ) / sizeof( E_net_http2_S_static_table[0] ))
                    {   N l = E_text_Z_s0_R_0_l( E_net_http2_S_static_table[v] );
                        name = M(l);
                        if( !name )
                            return ~0;
                        E_text_Z_s_P_s0_copy_0( name, E_net_http2_S_static_table[v] );
                    }else
                    {   v -= sizeof( E_net_http2_S_static_table ) / sizeof( E_net_http2_S_static_table[0] );
                        if( v >= *dynamic_table_n )
                            return ~0;
                        Pc s = E_text_Z_s0_R_c_search( (*dynamic_table)[v] + 1, ':' );
                        if( !*s )
                            return ~0;
                        N l = s - (*dynamic_table)[v] + 1;
                        name = M(l);
                        if( !name )
                            return ~0;
                        E_text_Z_s_P_s_copy_0( name, (*dynamic_table)[v], s );
                    }
                }
            }
            if( !length )
            {   W(name);
                return ~0;
            }
            N8 value_length = E_net_http2_Q_buffer_I_read_n( buffer, 1 );
            length--;
            Pc value;
            buffer_ = *buffer;
            N l = Q_buffer_I_read_v( buffer, 7, value_length );
            length -= *buffer - buffer_;
            if( length < l )
            {   W(name);
                return ~0;
            }
            length -= l;
            if( value_length & 0x80 )
            {   value = Q_buffer_I_decode( buffer, l );
                if( !value )
                {   W(name);
                    return ~0;
                }
            }else
            {   value = M( l + 1 );
                if( !value )
                {   W(name);
                    return ~0;
                }
                E_net_http2_Q_buffer_I_read_s_l( buffer, value, l );
                value[l] = '\0';
            }
            if( !E_mem_Q_blk_I_append( headers, 1 ))
            {   W(value);
                W(name);
                return ~0;
            }
            (*headers_n)++;
            l = E_text_Z_s0_R_l(name) + 2 + E_text_Z_s0_R_l(value) + 1;
            (*headers)[ *headers_n - 1 ] = M(l);
            if( !(*headers)[ *headers_n - 1 ] )
            {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                W(value);
                W(name);
                return ~0;
            }
            E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( E_text_Z_s_P_s0_copy( (*headers)[ *headers_n - 1 ], name ), ": " ), value );
            if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
            {   W(value);
                W(name);
                return ~0;
            }
            (*dynamic_table_n)++;
            (*dynamic_table)[ *dynamic_table_n - 1 ] = M(l);
            if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
            {   E_mem_Q_blk_I_remove( dynamic_table, --*dynamic_table_n, 1 );
                W(value);
                W(name);
                return ~0;
            }
            E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( E_text_Z_s_P_s0_copy( (*dynamic_table)[ *dynamic_table_n - 1 ], name ), ": " ), value );
            W(value);
            W(name);
        }else if(( v & 0xf0 ) == 0
        || ( v & 0xf0 ) == 0x10
        )
        {   Pc buffer_ = *buffer;
            v = Q_buffer_I_read_v( buffer, 4, v );
            length -= *buffer - buffer_;
            Pc name;
            if( !v )
            {   if( !length )
                    return ~0;
                N8 name_length = E_net_http2_Q_buffer_I_read_n( buffer, 1 );
                length--;
                Pc buffer_ = *buffer;
                N l = Q_buffer_I_read_v( buffer, 7, name_length );
                length -= *buffer - buffer_;
                if( length < l )
                    return ~0;
                length -= l;
                if( name_length & 0x80 )
                {   name = Q_buffer_I_decode( buffer, l );
                    if( !name )
                        return ~0;
                }else
                {   name = M( l + 1 );
                    if( !name )
                        return ~0;
                    E_net_http2_Q_buffer_I_read_s_l( buffer, name, l );
                    name[l] = '\0';
                }
                if( !length )
                {   W(name);
                    return ~0;
                }
                N8 value_length = E_net_http2_Q_buffer_I_read_n( buffer, 1 );
                length--;
                Pc value;
                buffer_ = *buffer;
                l = Q_buffer_I_read_v( buffer, 7, value_length );
                length -= *buffer - buffer_;
                if( length < l )
                {   W(name);
                    return ~0;
                }
                length -= l;
                if( value_length & 0x80 )
                {   value = Q_buffer_I_decode( buffer, l );
                    if( !value )
                    {   W(name);
                        return ~0;
                    }
                }else
                {   value = M( l + 1 );
                    if( !value )
                    {   W(name);
                        return ~0;
                    }
                    E_net_http2_Q_buffer_I_read_s_l( buffer, value, l );
                    value[l] = '\0';
                }
                if( !E_mem_Q_blk_I_append( headers, 1 ))
                {   W(value);
                    W(name);
                    return ~0;
                }
                (*headers_n)++;
                l = E_text_Z_s0_R_l(name) + 2 + E_text_Z_s0_R_l(value) + 1;
                (*headers)[ *headers_n - 1 ] = M(l);
                if( !(*headers)[ *headers_n - 1 ] )
                {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                    W(value);
                    W(name);
                    return ~0;
                }
                E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( E_text_Z_s_P_s0_copy( (*headers)[ *headers_n - 1 ], name ), ": " ), value );
                W(value);
                W(name);
            }else
            {   if( !length )
                    return ~0;
                N8 value_length = E_net_http2_Q_buffer_I_read_n( buffer, 1 );
                length--;
                Pc value;
                Pc buffer_ = *buffer;
                N l = Q_buffer_I_read_v( buffer, 7, value_length );
                length -= *buffer - buffer_;
                if( length < l )
                    return ~0;
                length -= l;
                if( value_length & 0x80 )
                {   value = Q_buffer_I_decode( buffer, l );
                    if( !value )
                        return ~0;
                }else
                {   value = M( l + 1 );
                    if( !value )
                        return ~0;
                    E_net_http2_Q_buffer_I_read_s_l( buffer, value, l );
                    value[l] = '\0';
                }
                if( v < E_net_http2_S_static_table_first_index )
                    switch(v)
                    { case 1:
                            name = M(11);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":authority" );
                            break;
                      case 2:
                      case 3:
                            name = M(8);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":method" );
                            break;
                      case 4:
                      case 5:
                            name = M(6);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":path" );
                            break;
                      case 6:
                      case 7:
                            name = M(8);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":scheme" );
                            break;
                      case 8:
                      case 9:
                      case 10:
                      case 11:
                      case 12:
                      case 13:
                      case 14:
                            name = M(8);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":status" );
                            break;
                    }
                else
                {   v -= E_net_http2_S_static_table_first_index;
                    N l = E_text_Z_s0_R_0_l( E_net_http2_S_static_table[v] );
                    name = M(l);
                    if( !name )
                        return ~0;
                    E_text_Z_s_P_s0_copy_0( name, E_net_http2_S_static_table[v] );
                }
                if( !E_mem_Q_blk_I_append( headers, 1 ))
                {   W(value);
                    W(name);
                    return ~0;
                }
                (*headers_n)++;
                l = E_text_Z_s0_R_l(name) + 2 + E_text_Z_s0_R_l(value) + 1;
                (*headers)[ *headers_n - 1 ] = M(l);
                if( !(*headers)[ *headers_n - 1 ] )
                {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                    W(value);
                    W(name);
                    return ~0;
                }
                E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( E_text_Z_s_P_s0_copy( (*headers)[ *headers_n - 1 ], name ), ": " ), value );
                W(value);
                W(name);
            }
        }else if(( v & 0xe0 ) == 0x20 )
        {   Pc buffer_ = *buffer;
            v = Q_buffer_I_read_v( buffer, 5, v );
            length -= *buffer - buffer_;
            N l = 0;
            for_n( dynamic_table_i, *dynamic_table_n )
            {   l += E_text_Z_s0_R_l( (*dynamic_table)[ dynamic_table_i ] ) + 32;
                if( l > v )
                    break;
            }
            if( dynamic_table_i != *dynamic_table_n )
            {   for_n( i, *dynamic_table_n - dynamic_table_i )
                    W( (*dynamic_table)[ dynamic_table_i + i ] );
                E_mem_Q_blk_I_remove( dynamic_table, dynamic_table_i, *dynamic_table_n - dynamic_table_i );
                *dynamic_table_n = dynamic_table_i;
            }
        }
    }
    return 0;
}
N
E_net_http2_Q_buffer_I_write_headers( Pc *buffer
, Pc *headers
, N headers_n
, Pc **dynamic_table
, N *dynamic_table_n
, N dynamic_table_size_max
, B *dynamic_table_size_max_hit
){  N headers_l = Q_headers_R_std_l( *dynamic_table, *dynamic_table_n );
    if( *dynamic_table_size_max_hit
    || headers_l > dynamic_table_size_max
    )
    {   Q_buffer_I_write_v( buffer, 0x20, 5, 0 );
        for_n( i, *dynamic_table_n )
            W( (*dynamic_table)[i] );
        E_mem_Q_blk_I_remove( dynamic_table, 0, *dynamic_table_n );
        headers_l = 0;
        *dynamic_table_n = 0;
        Q_buffer_I_write_v( buffer, 0x20, 5, dynamic_table_size_max );
        *dynamic_table_size_max_hit = no;
    }
    for_n( headers_i, headers_n )
    {   N index;
        if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], ":authority: " ))
        {   index = 1;
            N l = E_text_Z_s0_R_l( headers[ headers_i ] );
            headers_l += l + 32;
            if( headers_l <= dynamic_table_size_max )
            {   if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                    return ~0;
                (*dynamic_table_n)++;
                (*dynamic_table)[ *dynamic_table_n - 1 ] = M( l + 1 );
                if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                    return ~0;
                E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                Q_buffer_I_write_v( buffer, 0x40, 6, index );
            }else
            {   *dynamic_table_size_max_hit = yes;
                Q_buffer_I_write_v( buffer, 0, 4, index );
            }
            if( !~Q_buffer_I_encode_or_plain( buffer, headers[ headers_i ] + 12 ))
                return ~0;
        }else if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], ":method: " ))
        {   if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "GET" ))
            {   index = 2;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "POST" ))
            {   index = 3;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else
            {   index = 2;
                N l = E_text_Z_s0_R_l( headers[ headers_i ] );
                headers_l += l + 32;
                if( headers_l <= dynamic_table_size_max )
                {   if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                        return ~0;
                    (*dynamic_table_n)++;
                    (*dynamic_table)[ *dynamic_table_n - 1 ] = M( l + 1 );
                    if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                        return ~0;
                    E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                    Q_buffer_I_write_v( buffer, 0x40, 6, index );
                }else
                {   *dynamic_table_size_max_hit = yes;
                    Q_buffer_I_write_v( buffer, 0, 4, index );
                }
                if( !~Q_buffer_I_encode_or_plain( buffer, headers[ headers_i ] + 9 ))
                    return ~0;
            }
        }else if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], ":path: " ))
        {   if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 7, "/" ))
            {   index = 4;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 7, "/index.html" ))
            {   index = 5;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else
            {   index = 4;
                N l = E_text_Z_s0_R_l( headers[ headers_i ] );
                headers_l += l + 32;
                if( headers_l <= dynamic_table_size_max )
                {   if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                        return ~0;
                    (*dynamic_table_n)++;
                    (*dynamic_table)[ *dynamic_table_n - 1 ] = M( l + 1 );
                    if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                        return ~0;
                    E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                    Q_buffer_I_write_v( buffer, 0x40, 6, index );
                }else
                {   *dynamic_table_size_max_hit = yes;
                    Q_buffer_I_write_v( buffer, 0, 4, index );
                }
                if( !~Q_buffer_I_encode_or_plain( buffer, headers[ headers_i ] + 7 ))
                    return ~0;
            }
        }else if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], ":scheme: " ))
        {   if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "http" ))
            {   index = 6;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "https" ))
            {   index = 7;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else
            {   index = 6;
                N l = E_text_Z_s0_R_l( headers[ headers_i ] );
                headers_l += l + 32;
                if( headers_l <= dynamic_table_size_max )
                {   if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                        return ~0;
                    (*dynamic_table_n)++;
                    (*dynamic_table)[ *dynamic_table_n - 1 ] = M( l + 1 );
                    if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                        return ~0;
                    E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                    Q_buffer_I_write_v( buffer, 0x40, 6, index );
                }else
                {   *dynamic_table_size_max_hit = yes;
                    Q_buffer_I_write_v( buffer, 0, 4, index );
                }
                if( !~Q_buffer_I_encode_or_plain( buffer, headers[ headers_i ] + 9 ))
                    return ~0;
            }
        }else if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], ":status: " ))
        {   if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "200" ))
            {   index = 8;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "204" ))
            {   index = 9;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "206" ))
            {   index = 10;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "304" ))
            {   index = 11;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "400" ))
            {   index = 12;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "404" ))
            {   index = 13;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "500" ))
            {   index = 14;
                Q_buffer_I_write_v( buffer, 0x80, 7, index );
            }else
            {   index = 8;
                N l = E_text_Z_s0_R_l( headers[ headers_i ] );
                headers_l += l + 32;
                if( headers_l <= dynamic_table_size_max )
                {   if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                        return ~0;
                    (*dynamic_table_n)++;
                    (*dynamic_table)[ *dynamic_table_n - 1 ] = M( l + 1 );
                    if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                        return ~0;
                    E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                    Q_buffer_I_write_v( buffer, 0x40, 6, index );
                }else
                {   *dynamic_table_size_max_hit = yes;
                    Q_buffer_I_write_v( buffer, 0, 4, index );
                }
                if( !~Q_buffer_I_encode_or_plain( buffer, headers[ headers_i ] + 9 ))
                    return ~0;
            }
        }else
        {   for_n( i, sizeof( E_net_http2_S_static_table ) / sizeof( E_net_http2_S_static_table[0] ))
            {   N l = E_text_Z_s0_R_l( E_net_http2_S_static_table[i] ) + 2;
                Pc s = M( l + 1 );
                if( !s )
                    return ~0;
                E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( s, E_net_http2_S_static_table[i] ), ": " );
                if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], s ))
                {   W(s);
                    index = E_net_http2_S_static_table_first_index + i;
                    if( index == 16 ) // accept-encoding
                    {   if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + l, "gzip, deflate" ))
                            Q_buffer_I_write_v( buffer, 0x80, 7, index );
                        else
                        {   N l_ = E_text_Z_s0_R_l( headers[ headers_i ] );
                            headers_l += l_ + 32;
                            if( headers_l <= dynamic_table_size_max )
                            {   if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                                    return ~0;
                                (*dynamic_table_n)++;
                                (*dynamic_table)[ *dynamic_table_n - 1 ] = M( l_ + 1 );
                                if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                                    return ~0;
                                E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                                Q_buffer_I_write_v( buffer, 0x40, 6, index );
                            }else
                            {   *dynamic_table_size_max_hit = yes;
                                Q_buffer_I_write_v( buffer, 0, 4, index );
                            }
                            if( !~Q_buffer_I_encode_or_plain( buffer, headers[ headers_i ] + l ))
                                return ~0;
                        }
                    }else
                    {   switch(index)
                        { case 50: // range
                          case 51: // referer
                          case 55: // set-cookie
                                Q_buffer_I_write_v( buffer, 0, 4, index );
                                break;
                          default:
                            {   N l_ = E_text_Z_s0_R_l( headers[ headers_i ] );
                                headers_l += l_ + 32;
                                if( headers_l <= dynamic_table_size_max )
                                {   if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                                        return ~0;
                                    (*dynamic_table_n)++;
                                    (*dynamic_table)[ *dynamic_table_n - 1 ] = M( l_ + 1 );
                                    if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                                        return ~0;
                                    E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                                    Q_buffer_I_write_v( buffer, 0x40, 6, index );
                                }else
                                {   *dynamic_table_size_max_hit = yes;
                                    Q_buffer_I_write_v( buffer, 0, 4, index );
                                }
                                break;
                            }
                        }
                        if( !~Q_buffer_I_encode_or_plain( buffer, headers[ headers_i ] + l ))
                            return ~0;
                    }
                    break;
                }
                W(s);
            }
            if( i == sizeof( E_net_http2_S_static_table ) / sizeof( E_net_http2_S_static_table[0] ))
            {   for_n( i, *dynamic_table_n )
                {   N l = E_text_Z_s0_R_l( (*dynamic_table)[i] ) + 2;
                    Pc s = M( l + 1 );
                    if( !s )
                        return ~0;
                    E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( s, (*dynamic_table)[i] ), ": " );
                    if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], s )
                    && E_text_Z_s0_T_s0_eq( headers[ headers_i ] + l, (*dynamic_table)[i] + l )
                    )
                        Q_buffer_I_write_v( buffer, 0x80, 7, index );
                    W(s);
                }
                if( i == *dynamic_table_n )
                {   for_n( i, *dynamic_table_n )
                    {   N l = E_text_Z_s0_R_l( (*dynamic_table)[i] ) + 2;
                        Pc s = M( l + 1 );
                        if( !s )
                            return ~0;
                        E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( s, (*dynamic_table)[i] ), ": " );
                        if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], s ))
                        {   W(s);
                            index = E_net_http2_S_static_table_first_index + sizeof( E_net_http2_S_static_table ) / sizeof( E_net_http2_S_static_table[0] ) + i;
                            N l_ = E_text_Z_s0_R_l( headers[ headers_i ] );
                            headers_l += l_ + 32;
                            if( headers_l <= dynamic_table_size_max )
                            {   if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                                    return ~0;
                                (*dynamic_table_n)++;
                                (*dynamic_table)[ *dynamic_table_n - 1 ] = M( l_ + 1 );
                                if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                                    return ~0;
                                E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                                Q_buffer_I_write_v( buffer, 0x40, 6, index );
                            }else
                            {   *dynamic_table_size_max_hit = yes;
                                Q_buffer_I_write_v( buffer, 0, 4, index );
                            }
                            if( !~Q_buffer_I_encode_or_plain( buffer, headers[ headers_i ] + l ))
                                return ~0;
                        }else
                            W(s);
                    }
                    if( i == *dynamic_table_n )
                    {   N l_ = E_text_Z_s0_R_l( headers[ headers_i ] );
                        headers_l += l_ + 32;
                        if( headers_l <= dynamic_table_size_max )
                            E_net_http2_Q_buffer_I_write_n( buffer, 0x40, 1 );
                        else
                        {   *dynamic_table_size_max_hit = yes;
                            E_net_http2_Q_buffer_I_write_n( buffer, 0, 1 );
                        }
                        Pc s = E_text_Z_s0_R_c_search( headers[ headers_i ], ':' );
                        *s = '\0';
                        if( !~Q_buffer_I_encode_or_plain( buffer, headers[ headers_i ] ))
                        {   *s = ':';
                            return ~0;
                        }
                        *s = ':';
                        if( headers_l <= dynamic_table_size_max )
                        {   if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                                return ~0;
                            (*dynamic_table_n)++;
                            (*dynamic_table)[ *dynamic_table_n - 1 ] = M( l_ + 1 );
                            if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                        }
                        if( !~Q_buffer_I_encode_or_plain( buffer, s + 2 ))
                            return ~0;
                    }
                }
            }
        }
    }
    return 0;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void
E_net_http2_Q_buffer_I_write_frame_header( Pc *buffer
, N frame_length
, N frame_type
, N frame_flags
, N frame_stream
){  E_net_http2_Q_buffer_I_write_n( buffer, frame_length, 3 );
    E_net_http2_Q_buffer_I_write_n( buffer, frame_type, 1 );
    E_net_http2_Q_buffer_I_write_n( buffer, frame_flags, 1 );
    E_net_http2_Q_buffer_I_write_n( buffer, frame_stream, 4 );
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
int
Q_ssl_I_alpn_select( SSL *ssl
, const unsigned char **out
, unsigned char *outlen
, const unsigned char *in
, unsigned inlen
, void *arg
){  int ret = SSL_select_next_proto( out, outlen, &E_net_http2_S_alpn[0], E_net_http2_S_alpn_l, in, inlen ) == OPENSSL_NPN_NEGOTIATED
    ? SSL_TLSEXT_ERR_OK
    : SSL_TLSEXT_ERR_ALERT_FATAL;
    if( ret == SSL_TLSEXT_ERR_OK )
        Q_ssl_S_http2 = *out == &E_net_http2_S_alpn[1];
    return ret;
}
SSL_CTX *
E_net_http2_Q_ssl_M( void
){  SSL_CTX *ssl_ctx;
        #ifdef __gnu_linux__
    ssl_ctx = SSL_CTX_new( TLS_client_method() );
        #else
    ssl_ctx = SSL_CTX_new( TLSv1_client_method() );
        #endif
    if( !ssl_ctx
        #ifdef __gnu_linux__
    || SSL_CTX_set_min_proto_version( ssl_ctx, TLS1_VERSION ) != 1
        #endif
    )
        return 0;
    SSL_CTX_set_alpn_select_cb( ssl_ctx, &Q_ssl_I_alpn_select, 0 );
    Mt_( E_net_http2_S_connect, 0 );
    if( !E_net_http2_S_connect )
    {   SSL_CTX_free( ssl_ctx );
        return 0;
    }
    E_net_http2_S_connect_n = 0;
    return ssl_ctx;
}
N
E_net_http2_Q_ssl_I_connect( SSL_CTX *ssl_ctx
, Pc hostname
, B *http2
){  struct addrinfo ai_hints =
    { .ai_flags = AI_NUMERICSERV
    , .ai_family = 0
    , .ai_socktype = SOCK_STREAM
    , .ai_protocol = 0
    };
    struct addrinfo *ai;
    V0( getaddrinfo( hostname, "443", &ai_hints, &ai ))
        return ~0;
    int fd;
    SSL *ssl;
    int e = ~0;
    struct addrinfo *ai_1 = ai;
    do
    {   V1( fd = socket( ai_1->ai_family, ai_1->ai_socktype, ai_1->ai_protocol ))
            break;
        V0( connect( fd, ai_1->ai_addr, ai_1->ai_addrlen ))
        {   V0( close(fd) ){}
            goto Cont;
        }
        ssl = SSL_new( ssl_ctx );
        if( !ssl )
        {   V0( close(fd) ){}
            break;
        }
        if( SSL_set_fd( ssl, fd ) != 1 )
        {   SSL_free(ssl);
            V0( close(fd) ){}
            break;
        }
        e = SSL_connect(ssl);
        if( !e )
        {   SSL_free(ssl);
            V0( close(fd) ){}
            goto Cont;
        }
        if( e < 0 )
        {   int e_ = SSL_get_error( ssl, e );
            if( e_ != SSL_ERROR_SYSCALL
            && e_ != SSL_ERROR_SSL
            )
                SSL_shutdown(ssl);
            SSL_free(ssl);
            V0( close(fd) ){}
            goto Cont;
        }
        break;
Cont:   ai_1 = ai_1->ai_next;
    }while( ai_1 );
    freeaddrinfo(ai);
    if( e <= 0 )
        return e;
    if( Q_ssl_S_http2 )
    {   C buf[ 24 + 9 ] = "PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n";
        Pc buf_ = (Pc)&buf[24];
        E_net_http2_Q_buffer_I_write_frame_header( &buf_, 0, E_net_http2_Z_frame_type_S_settings, 0, 0 );
        e = E_net_cli_I_write_data( ssl, fd, buf, sizeof(buf) );
        if( e <= 0 )
        {   e = SSL_get_error( ssl, e );
            if( e != SSL_ERROR_SYSCALL
            && e != SSL_ERROR_SSL
            )
                SSL_shutdown(ssl);
            SSL_free(ssl);
            V0( close(fd) ){}
            goto Fail;
        }
        if( !E_mem_Q_blk_I_append( &E_net_http2_S_connect, 1 ))
        {   C buf[ 9 + 8 ];
            Pc buf_ = (Pc)&buf[0];
            E_net_http2_Q_buffer_I_write_frame_header( &buf_, 8, E_net_http2_Z_frame_type_S_goaway, 0, 0 );
            E_net_http2_Q_buffer_I_write_n( &buf_, 0, 4 );
            E_net_http2_Q_buffer_I_write_n( &buf_, E_net_http2_Z_error_S_internal_error, 4 );
            E_net_cli_I_write_data( ssl, fd, &buf[0], buf_ - (Pc)&buf[0] );
            SSL_shutdown(ssl);
            SSL_free(ssl);
            V0( close(fd) ){}
            goto Fail;
        }
        E_net_http2_S_connect_n++;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].ssl = ssl;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].listen_sock = fd;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf_l = 0;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].send_dynamic_table_size_max = 4096;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].send_dynamic_table_size_max_hit = no;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].push = yes;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].concurrent_streams_max = ~0;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].recv_window_size = 1024 * 1024;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].send_window_size = 65535;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].recv_frame_size_max = 64 * 1024;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].send_frame_size_max = 16384;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].header_list_size_max = ~0;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf = M( 9 + E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].recv_frame_size_max );
        if( !E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf )
        {   SSL_shutdown(ssl);
            SSL_free(ssl);
            E_mem_Q_blk_I_remove( &E_net_http2_S_connect, --E_net_http2_S_connect_n, 1 );
            V0( close(fd) ){}
            goto Fail;
        }
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf_ = E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf_2 = M( 9 + E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].send_frame_size_max );
        if( !E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf_2 )
        {   W( E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf );
            SSL_shutdown(ssl);
            SSL_free(ssl);
            E_mem_Q_blk_I_remove( &E_net_http2_S_connect, --E_net_http2_S_connect_n, 1 );
            V0( close(fd) ){}
            goto Fail;
        }
        Mt_( E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].dynamic_table_dec, 0 );
        if( !E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].dynamic_table_dec )
        {   W( E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf_2 );
            W( E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf );
            SSL_shutdown(ssl);
            SSL_free(ssl);
            E_mem_Q_blk_I_remove( &E_net_http2_S_connect, --E_net_http2_S_connect_n, 1 );
            V0( close(fd) ){}
            goto Fail;
        }
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].dynamic_table_dec_n = 0;
        Mt_( E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].dynamic_table_enc, 0 );
        if( !E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].dynamic_table_enc )
        {   W( E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].dynamic_table_dec );
            W( E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf_2 );
            W( E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf );
            SSL_shutdown(ssl);
            SSL_free(ssl);
            E_mem_Q_blk_I_remove( &E_net_http2_S_connect, --E_net_http2_S_connect_n, 1 );
            V0( close(fd) ){}
            goto Fail;
        }
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].dynamic_table_enc_n = 0;
        E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].stream = E_mem_Q_tab_M( sizeof( struct E_net_http2_Z_stream ), 0 );
        if( !E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].stream )
        {   W( E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].dynamic_table_enc );
            W( E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].dynamic_table_dec );
            W( E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf_2 );
            W( E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].buf );
            SSL_shutdown(ssl);
            SSL_free(ssl);
            E_mem_Q_blk_I_remove( &E_net_http2_S_connect, --E_net_http2_S_connect_n, 1 );
            V0( close(fd) ){}
            goto Fail;
        }
        _gettime( &E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].keepalive_tv );
        Z_clock_time tv;
        tv.tv_sec = S_keepalive_timeout;
        tv.Z_clock_time_minor_field = 0;
        _timeradd( &E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].keepalive_tv, &tv, &E_net_http2_S_connect[ E_net_http2_S_connect_n - 1 ].keepalive_tv );
    }
    *http2 = Q_ssl_S_http2;
Fail:
    return e <= 0 ? ~0 : 0;
}
N
E_net_http2_Q_ssl_I_loop( N i
){
        #ifdef __gnu_linux__
    N ssl_ret;
        #else
    int ssl_ret;
        #endif
    N32 goaway_error;
    O{  if( E_net_http2_S_connect[i].buf_ + 9 > E_net_http2_S_connect[i].buf + E_net_http2_S_connect[i].buf_l )
            break;
        N frame_length = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 3 );
        N frame_type = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 1 );
        N frame_flags = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 1 );
        N frame_stream = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 4 ) & 0x7fffffff;
        G_(); Gd( frame_length ); Gd( frame_type ); Gd( frame_flags ); Gd( frame_stream );
        if( E_net_http2_S_connect[i].buf_ + frame_length > E_net_http2_S_connect[i].buf + E_net_http2_S_connect[i].buf_l )
        {   E_net_http2_S_connect[i].buf_ -= 9;
            break;
        }
        E_net_http2_S_connect[i].buf_2_ = E_net_http2_S_connect[i].buf_2;
        switch( frame_type )
        { case E_net_http2_Z_frame_type_S_data:
            {   G_();
                S data_length = frame_length;
                N8 pad_length;
                if( frame_flags & E_net_http2_Z_frame_type_data_Z_flag_S_padded )
                {   pad_length = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 1 );
                    data_length -= 1 + pad_length;
                }else
                    pad_length = 0;
                if( data_length < 0 )
                {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                    goto End2_2;
                }
                struct E_net_http2_Z_stream *stream = E_mem_Q_tab_R( E_net_http2_S_connect[i].stream, frame_stream - 1 );
                E_net_http2_Q_buffer_I_write_frame_header( &E_net_http2_S_connect[i].buf_2_, 4, E_net_http2_Z_frame_type_S_window_update, 0, frame_stream );
                E_net_http2_Q_buffer_I_write_n( &E_net_http2_S_connect[i].buf_2_, data_length, 4 );
                if( stream->data_start )
                {   stream->file_name = M( 23 + 1 );
                    if( !stream->file_name )
                    {   goaway_error = E_net_http2_Z_error_S_internal_error;
                        goto End2_2;
                    }
                    E_text_Z_s_P_s0_copy_0( stream->file_name, "/tmp/oux-net-cli-XXXXXX" );
                    int fd;
                    V1( fd = mkstemp( stream->file_name ) )
                    {   W( stream->file_name );
                        goaway_error = E_net_http2_Z_error_S_internal_error;
                        goto End2_2;
                    }
                    stream->file_id = E_mem_Q_file_M_fd(fd);
                    if( !~stream->file_id )
                    {   VO0( close(fd)){}
                        V0( unlink( stream->file_name ) ){}
                        W( stream->file_name );
                        goaway_error = E_net_http2_Z_error_S_internal_error;
                        goto End2_2;
                    }
                    Pc enc = E_net_cli_Q_headers_R( stream->headers, stream->headers_n, "content-encoding" );
                    if( E_text_Z_s0_T_s0_eq( enc, "gzip" ))
                    {   M_( stream->z_stream );
                        if( !stream->z_stream )
                        {   E_mem_Q_file_W_nosave( stream->file_id );
                            V0( unlink( stream->file_name ) ){}
                            W( stream->file_name );
                            goaway_error = E_net_http2_Z_error_S_internal_error;
                            goto End2_2;
                        }
                        stream->z_stream->next_in = ( Bytef * )E_net_http2_S_connect[i].buf_;
                        stream->z_stream->avail_in = frame_length;
                        stream->z_stream->zalloc = Z_NULL;
                        stream->z_stream->zfree = Z_NULL;
                        int zlib_error = inflateInit2( stream->z_stream, 15 + 16 );
                        if( zlib_error != Z_OK )
                        {   inflateEnd( stream->z_stream );
                            W_( stream->z_stream );
                            E_mem_Q_file_W_nosave( stream->file_id );
                            V0( unlink( stream->file_name ) ){}
                            W( stream->file_name );
                            goaway_error = E_net_http2_Z_error_S_internal_error;
                            goto End2_2;
                        }
                        stream->z_stream->avail_out = 64 * 1024; //CONF
                        stream->z_stream->next_out = M( stream->z_stream->avail_out );
                        if( !stream->z_stream->next_out )
                        {   inflateEnd( stream->z_stream );
                            W_( stream->z_stream );
                            E_mem_Q_file_W_nosave( stream->file_id );
                            V0( unlink( stream->file_name ) ){}
                            W( stream->file_name );
                            goaway_error = E_net_http2_Z_error_S_internal_error;
                            goto End2_2;
                        }
                        stream->zlib_data = (Pc)stream->z_stream->next_out;
                    }
                    stream->data_start = no;
                }
                if( stream->z_stream )
                {   int zlib_error;
                    O{  zlib_error = inflate( stream->z_stream, Z_SYNC_FLUSH );
                        if( zlib_error != Z_OK
                        && zlib_error != Z_STREAM_END
                        )
                        {   inflateEnd( stream->z_stream );
                            W_( stream->z_stream );
                            E_mem_Q_file_W_nosave( stream->file_id );
                            V0( unlink( stream->file_name ) ){}
                            W( stream->file_name );
                            goaway_error = E_net_http2_Z_error_S_internal_error;
                            goto End2_2;
                        }
                        E_mem_Q_file_P_pos( stream->file_id, E_mem_Q_file_R_pos( stream->file_id ));
                        if( !~E_mem_Q_file_P_insert_s( stream->file_id, stream->zlib_data, 64 * 1024 - stream->z_stream->avail_out )) //CONF
                        {   inflateEnd( stream->z_stream );
                            W_( stream->z_stream );
                            E_mem_Q_file_W_nosave( stream->file_id );
                            V0( unlink( stream->file_name ) ){}
                            W( stream->file_name );
                            goaway_error = E_net_http2_Z_error_S_internal_error;
                            goto End2_2;
                        }
                        if( zlib_error == Z_STREAM_END
                        || stream->z_stream->avail_out
                        )
                            break;
                        stream->z_stream->avail_out = 64 * 1024; //CONF
                        stream->z_stream->next_out = ( Bytef * )stream->zlib_data;
                    }
                    if( zlib_error == Z_STREAM_END )
                    {   inflateEnd( stream->z_stream );
                        W_( stream->z_stream );
                        if( !( frame_flags & E_net_http2_Z_frame_type_data_Z_flag_S_end_stream ))
                        {   E_mem_Q_file_W_nosave( stream->file_id );
                            V0( unlink( stream->file_name ) ){}
                            W( stream->file_name );
                            goaway_error = E_net_http2_Z_error_S_internal_error;
                            goto End2_2;
                        }
                        E_mem_Q_file_W( stream->file_id );
                        //TODO Zachować nazwę pliku w połączeniu z ‘requestem’.
                        E_net_http2_Q_buffer_I_write_frame_header( &E_net_http2_S_connect[i].buf_2_, 4, E_net_http2_Z_frame_type_S_rst_stream, 0, frame_stream );
                        E_net_http2_Q_buffer_I_write_n( &E_net_http2_S_connect[i].buf_2_, E_net_http2_Z_error_S_no_error, 4 );
                        goto Reset_stream;
                    }
                }else
                {   E_mem_Q_file_P_pos( stream->file_id, E_mem_Q_file_R_pos( stream->file_id ));
                    if( !~E_mem_Q_file_P_insert_s( stream->file_id, stream->zlib_data, 64 * 1024 - stream->z_stream->avail_out )) //CONF
                    {   inflateEnd( stream->z_stream );
                        W_( stream->z_stream );
                        E_mem_Q_file_W_nosave( stream->file_id );
                        V0( unlink( stream->file_name ) ){}
                        W( stream->file_name );
                        goaway_error = E_net_http2_Z_error_S_internal_error;
                        goto End2_2;
                    }
                    if( frame_flags & E_net_http2_Z_frame_type_data_Z_flag_S_end_stream )
                    {   E_mem_Q_file_W( stream->file_id );
                        //TODO Zachować nazwę pliku w połączeniu z ‘requestem’.
                        E_net_http2_Q_buffer_I_write_frame_header( &E_net_http2_S_connect[i].buf_2_, 4, E_net_http2_Z_frame_type_S_rst_stream, 0, frame_stream );
                        E_net_http2_Q_buffer_I_write_n( &E_net_http2_S_connect[i].buf_2_, E_net_http2_Z_error_S_no_error, 4 );
                        goto Reset_stream;
                    }
                }
                break;
            }
          case E_net_http2_Z_frame_type_S_headers:
            {   G_(); Gd( frame_stream );
                if( !frame_stream
                || frame_stream - 1 >= (I)~0
                || E_mem_Q_tab_T( E_net_http2_S_connect[i].stream, frame_stream - 1 )
                )
                {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                    goto End2_2;
                }
                if( !~E_mem_Q_tab_I_add_i( E_net_http2_S_connect[i].stream, frame_stream - 1 ))
                {   goaway_error = E_net_http2_Z_error_S_internal_error;
                    goto End2_2;
                }
                struct E_net_http2_Z_stream *stream = E_mem_Q_tab_R( E_net_http2_S_connect[i].stream, frame_stream - 1 );
                stream->buf_headers = 0;
                stream->recv_window_size = E_net_http2_S_connect[i].recv_window_size;
                stream->send_window_size = E_net_http2_S_connect[i].send_window_size;
                stream->data_start = yes;
                stream->z_stream = 0;
                Mt_( stream->headers, 0 );
                if( !stream->headers )
                {   goaway_error = E_net_http2_Z_error_S_internal_error;
                    goto End2_2;
                }
                stream->headers_n = 0;
                S headers_length = frame_length;
                N8 pad_length;
                if( frame_flags & E_net_http2_Z_frame_type_headers_Z_flag_S_padded )
                {   if( !headers_length )
                    {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                        goto End2_2;
                    }
                    pad_length = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 1 );
                    if( headers_length < 1 + pad_length )
                    {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                        goto End2_2;
                    }
                    headers_length -= 1 + pad_length;
                }else
                    pad_length = 0;
                N stream_dependency;
                N8 weight;
                if( frame_flags & E_net_http2_Z_frame_type_headers_Z_flag_S_priority )
                {   if( headers_length < 4 + 1 )
                    {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                        goto End2_2;
                    }
                    stream_dependency = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 4 ) & 0x7fffffff;
                    weight = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 1 );
                    headers_length -= 4 + 1;
                }
                if( !( frame_flags & E_net_http2_Z_frame_type_headers_Z_flag_S_end_headers ))
                {   stream->buf_headers = M( headers_length );
                    if( !stream->buf_headers )
                    {   goaway_error = E_net_http2_Z_error_S_internal_error;
                        goto End2_2;
                    }
                    stream->buf_headers_l = headers_length;
                    E_mem_Q_blk_I_copy( stream->buf_headers, E_net_http2_S_connect[i].buf_, headers_length );
                    E_net_http2_S_connect[i].buf_ += headers_length + pad_length;
                    stream->end_stream = frame_flags & E_net_http2_Z_frame_type_headers_Z_flag_S_end_stream;
                }else
                {   if( !~E_net_http2_Q_buffer_I_read_headers( &E_net_http2_S_connect[i].buf_, headers_length, &stream->headers, &stream->headers_n, &E_net_http2_S_connect[i].dynamic_table_dec, &E_net_http2_S_connect[i].dynamic_table_dec_n ))
                    {   goaway_error = E_net_http2_Z_error_S_internal_error;
                        goto End2_2;
                    }
                    E_net_http2_S_connect[i].buf_ += pad_length;
                    for_n( headers_i, stream->headers_n )
                    {   G_(); Gs0( stream->headers[ headers_i ] );
                    }
                    if( frame_flags & E_net_http2_Z_frame_type_headers_Z_flag_S_end_stream )
                    {   
Http2_empty_data:              ;
                        Pc status = E_net_cli_Q_headers_R( stream->headers, stream->headers_n, ":status" );
                        if( !status
                        || !E_text_Z_s0_T_s0_eq( status, "200" )
                        )
                            ;
                        E_net_http2_Q_buffer_I_write_frame_header( &E_net_http2_S_connect[i].buf_2_, 4, E_net_http2_Z_frame_type_S_rst_stream, 0, frame_stream );
                        E_net_http2_Q_buffer_I_write_n( &E_net_http2_S_connect[i].buf_2_, E_net_http2_Z_error_S_no_error, 4 );
                        goto Reset_stream;
                    }
                }
                break;
            }
          case E_net_http2_Z_frame_type_S_rst_stream:
            {   if( frame_length != 4 )
                {   goaway_error = E_net_http2_Z_error_S_frame_size_error;
                    goto End2_2;
                }
                N error = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 4 );
                G_(); Gd( frame_stream ); Gd(error); Gd( E_mem_Q_tab_T( E_net_http2_S_connect[i].stream, frame_stream - 1 ));
                if( frame_stream - 1 >= (I)~0
                || !E_mem_Q_tab_T( E_net_http2_S_connect[i].stream, frame_stream - 1 )
                )
                {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                    goto End2_2;
                }
                struct E_net_http2_Z_stream *stream = E_mem_Q_tab_R( E_net_http2_S_connect[i].stream, frame_stream - 1 );
Reset_stream:   ;
                for_n( k, stream->headers_n )
                    W( stream->headers[k] );
                W( stream->headers );
                if( !~E_mem_Q_tab_I_remove( E_net_http2_S_connect[i].stream, frame_stream - 1 ))
                {   goaway_error = E_net_http2_Z_error_S_internal_error;
                    goto End2_2;
                }
                break;
            }
          case E_net_http2_Z_frame_type_S_settings:
            {   if( frame_length % 6 )
                {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                    goto End2_2;
                }
                if( frame_flags == E_net_http2_Z_frame_type_settings_Z_flag_S_ack )
                    break;
                E_net_http2_Q_buffer_I_write_frame_header( &E_net_http2_S_connect[i].buf_2_, 0, E_net_http2_Z_frame_type_S_settings, E_net_http2_Z_frame_type_settings_Z_flag_S_ack, 0 );
                for_n( j, frame_length / 6 )
                {   N identifier = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 2 );
                    N value = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 4 );
                    G_(); Gd(identifier); Gd(value);
                    switch(identifier)
                    { case E_net_http2_Z_frame_type_setting_Z_header_table_size:
                            E_net_http2_S_connect[i].send_dynamic_table_size_max = value;
                            break;
                      case E_net_http2_Z_frame_type_setting_Z_enable_push:
                            E_net_http2_S_connect[i].push = value;
                            break;
                      case E_net_http2_Z_frame_type_setting_Z_max_concurrent_streams:
                            if( value > (I)~0 )
                            {   E_net_http2_Q_buffer_I_write_frame_header( &E_net_http2_S_connect[i].buf_2_, 6, E_net_http2_Z_frame_type_S_settings, 0, 0 );
                                E_net_http2_Q_buffer_I_write_n( &E_net_http2_S_connect[i].buf_2_, E_net_http2_Z_frame_type_setting_Z_max_concurrent_streams, 2 );
                                E_net_http2_Q_buffer_I_write_n( &E_net_http2_S_connect[i].buf_2_, (I)~0, 4 );
                            }
                            E_net_http2_S_connect[i].concurrent_streams_max = value;
                            break;
                      case E_net_http2_Z_frame_type_setting_Z_initial_window_size:
                            E_net_http2_S_connect[i].send_window_size = value;
                            for_each( stream_id, E_net_http2_S_connect[i].stream, E_mem_Q_tab )
                            {   struct E_net_http2_Z_stream *stream = E_mem_Q_tab_R( E_net_http2_S_connect[i].stream, stream_id );
                                if( E_net_http2_S_connect[i].send_window_size < stream->send_window_size )
                                    stream->send_window_size = E_net_http2_S_connect[i].send_window_size - stream->send_window_size;
                                else
                                    stream->send_window_size = E_net_http2_S_connect[i].send_window_size;
                            }
                            break;
                      case E_net_http2_Z_frame_type_setting_Z_max_frame_size:
                            if( value == E_net_http2_S_connect[i].send_frame_size_max )
                                break;
                            if( value > E_net_http2_S_connect[i].send_frame_size_max )
                            {   if( !E_mem_Q_blk_I_append( &E_net_http2_S_connect[i].buf_2, value - E_net_http2_S_connect[i].send_frame_size_max ))
                                {   goaway_error = E_net_http2_Z_error_S_internal_error;
                                    goto End2_2;
                                }
                            }else
                            {   if( !E_mem_Q_blk_I_remove( &E_net_http2_S_connect[i].buf_2, 9 + value, E_net_http2_S_connect[i].send_frame_size_max - value ))
                                {   goaway_error = E_net_http2_Z_error_S_internal_error;
                                    goto End2_2;
                                }
                            }
                            E_net_http2_S_connect[i].send_frame_size_max = value;
                            break;
                      case E_net_http2_Z_frame_type_setting_Z_max_header_list_size:
                            E_net_http2_S_connect[i].header_list_size_max = value;
                            break;
                    }
                }
                break;
            }
          case E_net_http2_Z_frame_type_S_push_promise:
            {   G_();
                if( !E_net_http2_S_connect[i].push )
                {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                    goto End2_2;
                }
                if( !frame_stream
                || frame_stream - 1 >= (I)~0
                || !E_mem_Q_tab_T( E_net_http2_S_connect[i].stream, frame_stream - 1 )
                )
                {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                    goto End2_2;
                }
                S headers_length = frame_length;
                N8 pad_length;
                if( frame_flags & E_net_http2_Z_frame_type_push_promise_Z_flag_S_padded )
                {   if( !headers_length )
                    {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                        goto End2_2;
                    }
                    pad_length = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 1 );
                    if( headers_length < 1 + pad_length )
                    {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                        goto End2_2;
                    }
                    headers_length -= 1 + pad_length;
                }else
                    pad_length = 0;
                if( headers_length < 4 )
                {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                    goto End2_2;
                }
                N promised_stream = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, 4 ) & 0x7fffffff;
                if( E_mem_Q_tab_T( E_net_http2_S_connect[i].stream, promised_stream - 1 ))
                {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                    goto End2_2;
                }
                headers_length -= 4;
                if( !~E_mem_Q_tab_I_add_i( E_net_http2_S_connect[i].stream, promised_stream - 1 ))
                {   goaway_error = E_net_http2_Z_error_S_internal_error;
                    goto End2_2;
                }
                struct E_net_http2_Z_stream *stream = E_mem_Q_tab_R( E_net_http2_S_connect[i].stream, frame_stream - 1 );
                stream->buf_headers = 0;
                stream->recv_window_size = E_net_http2_S_connect[i].recv_window_size;
                stream->send_window_size = E_net_http2_S_connect[i].send_window_size;
                stream->data_start = yes;
                stream->z_stream = 0;
                Mt_( stream->headers, 0 );
                if( !stream->headers )
                {   goaway_error = E_net_http2_Z_error_S_internal_error;
                    goto End2_2;
                }
                stream->headers_n = 0;
                if( !( frame_flags & E_net_http2_Z_frame_type_push_promise_Z_flag_S_end_headers ))
                {   stream->buf_headers = M( headers_length );
                    if( !stream->buf_headers )
                    {   goaway_error = E_net_http2_Z_error_S_internal_error;
                        goto End2_2;
                    }
                    stream->buf_headers_l = headers_length;
                    E_mem_Q_blk_I_copy( stream->buf_headers, E_net_http2_S_connect[i].buf_, headers_length );
                    E_net_http2_S_connect[i].buf_ += headers_length + pad_length;
                    stream->end_stream = frame_flags & E_net_http2_Z_frame_type_headers_Z_flag_S_end_stream;
                }else
                {   if( !~E_net_http2_Q_buffer_I_read_headers( &E_net_http2_S_connect[i].buf_, headers_length, &stream->headers, &stream->headers_n, &E_net_http2_S_connect[i].dynamic_table_dec, &E_net_http2_S_connect[i].dynamic_table_dec_n ))
                    {   goaway_error = E_net_http2_Z_error_S_internal_error;
                        goto End2_2;
                    }
                    E_net_http2_S_connect[i].buf_ += pad_length;
                    for_n( headers_i, stream->headers_n )
                    {   G_(); Gs0( stream->headers[ headers_i ] );
                    }
                    if( frame_flags & E_net_http2_Z_frame_type_headers_Z_flag_S_end_stream )
                    {   if( stream->buf_headers )
                            W_( stream->buf_headers );
                        Pc status = E_net_cli_Q_headers_R( stream->headers, stream->headers_n, ":status" );
                        if( !status
                        || !E_text_Z_s0_T_s0_eq( status, "200" )
                        )
                            ;
                        E_net_http2_Q_buffer_I_write_frame_header( &E_net_http2_S_connect[i].buf_2_, 4, E_net_http2_Z_frame_type_S_rst_stream, 0, frame_stream );
                        E_net_http2_Q_buffer_I_write_n( &E_net_http2_S_connect[i].buf_2_, E_net_http2_Z_error_S_no_error, 4 );
                        goto Reset_stream;
                    }
                }
                break;
            }
          case E_net_http2_Z_frame_type_S_ping:
            {   G_();
                if( frame_length != 8 )
                {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                    goto End2_2;
                }
                E_net_http2_S_connect[i].buf_ += frame_length;
                E_net_http2_Q_buffer_I_write_frame_header( &E_net_http2_S_connect[i].buf_2_, frame_length, E_net_http2_Z_frame_type_S_ping, E_net_http2_Z_frame_type_ping_Z_flag_S_ack, 0 );
                E_net_http2_Q_buffer_I_write_s_l( &E_net_http2_S_connect[i].buf_2_, E_net_http2_S_connect[i].buf_, frame_length );
                break;
            }
          case E_net_http2_Z_frame_type_S_goaway:
            {   G_();
                if(( ssl_ret = E_net_cli_I_write_data( E_net_http2_S_connect[i].ssl, E_net_http2_S_connect[i].listen_sock, E_net_http2_S_connect[i].buf_2, E_net_http2_S_connect[i].buf_2_ - E_net_http2_S_connect[i].buf_2 )) != E_net_http2_S_connect[i].buf_2_ - E_net_http2_S_connect[i].buf_2 )
                    goto End2_1;
                goaway_error = E_net_http2_Z_error_S_no_error;
                goto End2_2;
            }
          case E_net_http2_Z_frame_type_S_window_update:
            {   if( frame_length != 4 )
                {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                    goto End2_2;
                }
                N window_increment = E_net_http2_Q_buffer_I_read_n( &E_net_http2_S_connect[i].buf_, frame_length ) & 0x7fffffff;
                G_(); Gd( window_increment );
                if( !window_increment )
                {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                    goto End2_2;
                }
                if( !frame_stream )
                {   for_each( stream_id, E_net_http2_S_connect[i].stream, E_mem_Q_tab )
                    {   struct E_net_http2_Z_stream *stream = E_mem_Q_tab_R( E_net_http2_S_connect[i].stream, stream_id );
                        stream->send_window_size += window_increment;
                    }
                }else
                {   if( frame_stream - 1 >= (I)~0
                    || !E_mem_Q_tab_T( E_net_http2_S_connect[i].stream, frame_stream - 1 )
                    )
                    {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                        goto End2_2;
                    }
                    struct E_net_http2_Z_stream *stream = E_mem_Q_tab_R( E_net_http2_S_connect[i].stream, frame_stream - 1 );
                    stream->send_window_size += window_increment;
                }
                break;
            }
          case E_net_http2_Z_frame_type_S_continuation:
            {   G_();
                if( !frame_stream
                || frame_stream - 1 >= (I)~0
                || !E_mem_Q_tab_T( E_net_http2_S_connect[i].stream, frame_stream - 1 )
                )
                {   goaway_error = E_net_http2_Z_error_S_protocol_error;
                    goto End2_2;
                }
                struct E_net_http2_Z_stream *stream = E_mem_Q_tab_R( E_net_http2_S_connect[i].stream, frame_stream - 1 );
                Pc p = E_mem_Q_blk_I_append( &stream->buf_headers, frame_length );
                if( !p )
                {   goaway_error = E_net_http2_Z_error_S_internal_error;
                    goto End2_2;
                }
                stream->buf_headers_l += frame_length;
                E_mem_Q_blk_I_copy( p, E_net_http2_S_connect[i].buf_, frame_length );
                E_net_http2_S_connect[i].buf_ += frame_length;
                if( frame_flags & E_net_http2_Z_frame_type_continuation_Z_flag_S_end_headers )
                {   p = stream->buf_headers;
                    if( !~E_net_http2_Q_buffer_I_read_headers( &stream->buf_headers, stream->buf_headers_l, &stream->headers, &stream->headers_n, &E_net_http2_S_connect[i].dynamic_table_dec, &E_net_http2_S_connect[i].dynamic_table_dec_n ))
                    {   goaway_error = E_net_http2_Z_error_S_internal_error;
                        goto End2_2;
                    }
                    W_( stream->buf_headers );
                    for_n( i, stream->headers_n )
                    {   G_(); Gs0( stream->headers[i] );
                    }
                    if( stream->end_stream )
                        goto Http2_empty_data;
                }
                break;
            }
          default:
            {   G_();
                goaway_error = E_net_http2_Z_error_S_protocol_error;
                goto End2_2;
            }
        }
    }
    return 0;
End2_2:
    E_net_http2_Q_buffer_I_write_frame_header( &E_net_http2_S_connect[i].buf_2_, 8, E_net_http2_Z_frame_type_S_goaway, 0, 0 );
    E_net_http2_Q_buffer_I_write_n( &E_net_http2_S_connect[i].buf_2_, E_mem_Q_tab_R_n( E_net_http2_S_connect[i].stream ) + 1, 4 );
    E_net_http2_Q_buffer_I_write_n( &E_net_http2_S_connect[i].buf_2_, goaway_error, 4 );
    G_(); Gd( goaway_error );
    ssl_ret = E_net_cli_I_write_data( E_net_http2_S_connect[i].ssl, E_net_http2_S_connect[i].listen_sock, E_net_http2_S_connect[i].buf_2, E_net_http2_S_connect[i].buf_2_ - E_net_http2_S_connect[i].buf_2 );
End2_1:;
    int e = SSL_get_error( E_net_http2_S_connect[i].ssl, ssl_ret );
    if( e != SSL_ERROR_SYSCALL
    && e != SSL_ERROR_SSL
    )
        SSL_shutdown( E_net_http2_S_connect[i].ssl );
    SSL_free( E_net_http2_S_connect[i].ssl );
    W( E_net_http2_S_connect[i].dynamic_table_dec );
    W( E_net_http2_S_connect[i].dynamic_table_enc );
    for_each( stream_i, E_net_http2_S_connect[i].stream, E_mem_Q_tab )
    {   struct E_net_http2_Z_stream *stream = E_mem_Q_tab_R( E_net_http2_S_connect[i].stream, stream_i );
        for_n( k, stream->headers_n )
            W( stream->headers[k] );
        W( stream->headers );
        if( stream->buf_headers )
            W( stream->buf_headers );
        if( stream->z_stream )
        {   inflateEnd( stream->z_stream );
            W( stream->z_stream );
            W( stream->zlib_data );
        }
    }
    E_mem_Q_tab_W( E_net_http2_S_connect[i].stream );
    W( E_net_http2_S_connect[i].buf_2 );
    if( E_net_http2_S_connect[i].buf )
        W( E_net_http2_S_connect[i].buf );
    V0( close( E_net_http2_S_connect[i].listen_sock )){}
    if( !E_mem_Q_blk_I_remove( &E_net_http2_S_connect, i, 1 ))
        V();
    E_net_http2_S_connect_n--;
    return ~0;
}
/******************************************************************************/
