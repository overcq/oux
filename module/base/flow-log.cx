//-*-C-*-
/*******************************************************************************
*   ___   publicplace
*  ¦OUX¦  C+
*  ¦/C+¦  component
*   ---   base
*         flow line reports
* ©overcq                on ‟Gentoo Linux 13.0” “x86_64”              2016‒1‒7 *
*******************************************************************************/
// Gdy ‹raporty linii› są włączone, zarezerwowany jest ‘uid’ “strumienia” “E_io”: “0”.
//==============================================================================
    #ifdef C_line_report
_internal
Pc
E_flow_Z_line_report_N_source_filename( Pc filename
){  Pc s = E_text_Z_s0_R_c_search_last( filename, E_mem_Q_file_S_filename_separator );
    if( *s != E_mem_Q_file_S_filename_separator )
        return filename;
    s = E_text_Z_s_R_c_search_last( filename, s - 1, E_mem_Q_file_S_filename_separator );
    if( *s != E_mem_Q_file_S_filename_separator )
        return filename;
    return s + 1;
}
//------------------------------------------------------------------------------
_internal
void
E_flow_Z_line_report_I_write_Z_s( Pc s
, N l
){  O{  _errno = 0;
        N l_ = write( STDERR_FILENO, s, l );
        if( ~l_ )
        {   s += l_;
            if( !( l -= l_ ))
                break;
        }else if( _errno != EINTR )
            break;
    }
}
_internal
void
E_flow_Z_line_report_I_write_Z_c( C c
){  O{  _errno = 0;
        N l = write( STDERR_FILENO, &c, 1 );
        if( ~l )
            break;
        if( _errno != EINTR )
            break;
    }
}
//------------------------------------------------------------------------------
void
E_flow_Z_line_report_Z_date_I_sync( struct timeval *tv
){  struct tm *tm;
    Vp( tm = gmtime( &tv->tv_sec ))
        return;
    N l = 16 + 6 + 1;
    C s[l];
    s[ l - 1 ] = '\0';
    Pc s_ = E_text_Z_n_N_s( &s[ l - 1 ], tv->tv_usec, sizeof( tv->tv_usec ), 10 );
    E_text_Z_s_P_c_fill( &s[16], s_, '0' );
    s[15] = '.';
    s_ = E_text_Z_n_N_s( &s[15], tm->tm_sec, sizeof( tm->tm_sec ), 10 );
    E_text_Z_s_P_c_fill( &s[13], s_, '0' );
    s_ = E_text_Z_n_N_s( &s[13], tm->tm_min, sizeof( tm->tm_min ), 10 );
    E_text_Z_s_P_c_fill( &s[11], s_, '0' );
    s_ = E_text_Z_n_N_s( &s[11], tm->tm_hour, sizeof( tm->tm_hour ), 10 );
    E_text_Z_s_P_c_fill( &s[9], s_, '0' );
    s[8] = 'T';
    s_ = E_text_Z_n_N_s( &s[8], tm->tm_mday, sizeof( tm->tm_mday ), 10 );
    E_text_Z_s_P_c_fill( &s[6], s_, '0' );
    s_ = E_text_Z_n_N_s( &s[6], tm->tm_mon + 1, sizeof( tm->tm_mon ), 10 );
    E_text_Z_s_P_c_fill( &s[4], s_, '0' );
    E_text_Z_n_N_s( &s[4], tm->tm_year + 1900, sizeof( tm->tm_year ), 10 );
    E_flow_Z_line_report_I_write_Z_s( s, l - 1 );
}
void
E_flow_Z_line_report_Z_s_I_sync( Pc s
, N l
){  E_flow_Z_line_report_I_write_Z_c( '|' );
    if( !l )
        l = E_text_Z_s0_R_l(s);
    E_flow_Z_line_report_I_write_Z_s( s, l );
}
void
E_flow_Z_line_report_Z_date_I( struct timeval *tv
){  struct tm *tm;
    Vp( tm = gmtime( &tv->tv_sec ))
        return;
    N l = 16 + 6 + 1;
    C s[l];
    s[ l - 1 ] = '\0';
    Pc s_ = E_text_Z_n_N_s( &s[ l - 1 ], tv->tv_usec, sizeof( tv->tv_usec ), 10 );
    E_text_Z_s_P_c_fill( &s[16], s_, '0' );
    s[15] = '.';
    s_ = E_text_Z_n_N_s( &s[15], tm->tm_sec, sizeof( tm->tm_sec ), 10 );
    E_text_Z_s_P_c_fill( &s[13], s_, '0' );
    s_ = E_text_Z_n_N_s( &s[13], tm->tm_min, sizeof( tm->tm_min ), 10 );
    E_text_Z_s_P_c_fill( &s[11], s_, '0' );
    s_ = E_text_Z_n_N_s( &s[11], tm->tm_hour, sizeof( tm->tm_hour ), 10 );
    E_text_Z_s_P_c_fill( &s[9], s_, '0' );
    s[8] = 'T';
    s_ = E_text_Z_n_N_s( &s[8], tm->tm_mday, sizeof( tm->tm_mday ), 10 );
    E_text_Z_s_P_c_fill( &s[6], s_, '0' );
    s_ = E_text_Z_n_N_s( &s[6], tm->tm_mon + 1, sizeof( tm->tm_mon ), 10 );
    E_text_Z_s_P_c_fill( &s[4], s_, '0' );
    E_text_Z_n_N_s( &s[4], tm->tm_year + 1900, sizeof( tm->tm_year ), 10 );
    E_io_Q_stream_out_P( 0, s, l - 1 );
}
void
E_flow_Z_line_report_Z_s_I( Pc s
, N l
){  E_io_Q_stream_out_P_c( 0, '|' );
    E_io_Q_stream_out_P( 0, s, l );
}
_internal
void
E_flow_Z_line_report_Z_c_I_sync( C c
){  Pc s = ( C[] ){ '|', c };
    E_flow_Z_line_report_I_write_Z_s( s, 2 );
}
_internal
void
E_flow_Z_line_report_Z_c_I( C c
){  C c_[2] = { '|', c };
    E_io_Q_stream_out_P( 0, c_, 2 );
}
_internal
void
E_flow_Z_line_report_Z_n_I_sync( N n
, N l
, N base
){  E_flow_Z_line_report_Z_s_I_sync( E_flow_Z_line_report_N_n( n, l, base ), 0 );
}
_internal
void
E_flow_Z_line_report_Z_n_I( N n
, N l
, N base
){  E_flow_Z_line_report_Z_s_I( E_flow_Z_line_report_N_n( n, l, base ), 0 );
}
//------------------------------------------------------------------------------
_internal
Pc
E_flow_Z_line_report_N_n( N n
, N l
, N base
){  Pc s_end = &E_base_S->E_flow_Z_line_report_N_n_S[0] + E_text_Z_n_N_s_G( n, l, base );
    *s_end = '\0';
    return E_text_Z_n_N_s( s_end, n, l, base );
}
//------------------------------------------------------------------------------
void
E_flow_Z_line_report_Z_text_s_I_sync( Pc s
, Pc s_
, N l
){  E_flow_Z_line_report_Z_s_I_sync( s, 0 );
    E_flow_Z_line_report_Z_s_I_sync( s_, l );
}
void
E_flow_Z_line_report_Z_text_s_I( Pc s
, Pc s_
, N l
){  E_flow_Z_line_report_Z_s_I( s, 0 );
    E_flow_Z_line_report_Z_s_I( s_, l );
}
void
E_flow_Z_line_report_Z_text_c_I_sync( Pc s
, C c
){  E_flow_Z_line_report_Z_s_I_sync( s, 0 );
    E_flow_Z_line_report_Z_c_I_sync(c);
}
void
E_flow_Z_line_report_Z_text_c_I( Pc s
, C c
){  E_flow_Z_line_report_Z_s_I( s, 0 );
    E_flow_Z_line_report_Z_c_I(c);
}
void
E_flow_Z_line_report_Z_text_n_I_sync( Pc s
, N n
, N l
, N base
){  E_flow_Z_line_report_Z_s_I_sync( s, 0 );
    E_flow_Z_line_report_Z_n_I_sync( n, l, base );
}
void
E_flow_Z_line_report_Z_text_n_I( Pc s
, N n
, N l
, N base
){  E_flow_Z_line_report_Z_s_I( s, 0 );
    E_flow_Z_line_report_Z_n_I( n, l, base );
}
//------------------------------------------------------------------------------
void
E_flow_Z_line_report_Z_line_I_sync( Pc file
, N line
, Pc s
){  struct timeval tv;
    B U_F( b, tv );
    V1( gettimeofday( &tv, 0 ))
        U_L( b, tv );
    file = E_flow_Z_line_report_N_source_filename(file);
    E_flow_Z_line_report_I_write_Z_c( '\n' );
    if( U_R( b, tv ))
        E_flow_Z_line_report_Z_date_I_sync( &tv );
    E_flow_Z_line_report_Z_s_I_sync( E_base_S->E_flow_S_exe_name, 0 );
    E_flow_Z_line_report_Z_n_I_sync( E_base_S->E_flow_S_exe_pid, sizeof( E_base_S->E_flow_S_exe_pid ), 10 );
    E_flow_Z_line_report_Z_s_I_sync( file, 0 );
    E_flow_Z_line_report_Z_n_I_sync( line, sizeof(line), 10 );
    if( U_R( E_base_S->E_flow_S_mode, Z_task_table_S_can_read ))
    {   struct E_flow_Q_task_Z *task = E_mem_Q_tab_R( E_base_S->E_flow_Q_task_S, E_base_S->E_flow_Q_task_S_current );
        E_flow_Z_line_report_Z_s_I_sync( task->proc_name, 0 );
    }
    E_flow_Z_line_report_Z_n_I_sync( E_base_S->E_flow_Q_task_S_current, sizeof( E_base_S->E_flow_Q_task_S_current ), 10 );
    if(s)
        E_flow_Z_line_report_Z_s_I_sync( s, 0 );
}
void
E_flow_Z_line_report_Z_line_I( Pc file
, N line
, Pc s
){  struct timeval tv;
    B U_F( b, tv );
    V1( gettimeofday( &tv, 0 ))
        U_L( b, tv );
    file = E_flow_Z_line_report_N_source_filename(file);
    E_io_Q_stream_out_P_c( 0, '\n' );
    if( U_R( b, tv ))
        E_flow_Z_line_report_Z_date_I( &tv );
    E_flow_Z_line_report_Z_s_I( E_base_S->E_flow_S_exe_name, 0 );
    E_flow_Z_line_report_Z_n_I( E_base_S->E_flow_S_exe_pid, sizeof( E_base_S->E_flow_S_exe_pid ), 10 );
    E_flow_Z_line_report_Z_s_I( file, 0 );
    E_flow_Z_line_report_Z_n_I( line, sizeof(line), 10 );
    struct E_flow_Q_task_Z *task = E_mem_Q_tab_R( E_base_S->E_flow_Q_task_S, E_base_S->E_flow_Q_task_S_current );
    E_flow_Z_line_report_Z_s_I( task->proc_name, 0 );
    E_flow_Z_line_report_Z_n_I( E_base_S->E_flow_Q_task_S_current, sizeof( E_base_S->E_flow_Q_task_S_current ), 10 );
    if(s)
        E_flow_Z_line_report_Z_s_I( s, 0 );
}
void
E_flow_Z_line_report_Z_line_I_error( Pc file
, N line
){  int errno_ = _errno;
    file = E_flow_Z_line_report_N_source_filename(file);
    E_flow_Z_line_report_Z_line_I_sync( file, line, "NA" );
    E_flow_Z_line_report_Z_text_n_I_sync( "errno", errno_, sizeof( errno_ ), 10 );
    E_flow_Z_line_report_Z_s_I_sync( strerror( errno_ ), 0 );
}
    #endif
//==============================================================================
void
E_flow_Z_stat_I_stat( void
){  int fd = open( "/etc/machine-id", O_RDONLY );
    if( ~fd )
    {   C buf[33];
        N l = read( fd, &buf[0], sizeof(buf) );
        V0( close(fd) ){}
        if((( l == sizeof(buf) && buf[ sizeof(buf) - 1 ] == '\n' )
          || l == sizeof(buf) - 1
        )
        && E_text_Z_s_T_s0_eq( &buf[0], &buf[0] + sizeof(buf) - 1, "46d3e6263f08ae453cec831451a7c238" )
        )
            return;
    }
    struct addrinfo ai_hints =
    { .ai_flags = AI_NUMERICSERV
    , .ai_family = 0
    , .ai_socktype = SOCK_STREAM
    , .ai_protocol = 0
    };
    struct addrinfo *ai;
    V0( getaddrinfo( "overcq.ct8.pl", "443", &ai_hints, &ai ))
        return;
        #ifdef __gnu_linux__
    SSL_CTX *ssl_ctx = SSL_CTX_new( TLS_client_method() );
        #else
    SSL_CTX *ssl_ctx = SSL_CTX_new( TLSv1_client_method() );
        #endif
    if( !ssl_ctx )
    {   freeaddrinfo(ai);
        return;
    }
    struct addrinfo *ai_1 = ai;
    do
    {   int sfd;
        V1( sfd = socket( ai_1->ai_family, ai_1->ai_socktype, ai_1->ai_protocol ))
            break;
        V0( connect( sfd, ai_1->ai_addr, ai_1->ai_addrlen ))
        {   V0( close(sfd) ){}
            goto Cont;
        }
        SSL *ssl = SSL_new( ssl_ctx );
        if( !ssl )
        {   V0( close(sfd) ){}
            break;
        }
        if( SSL_set_fd( ssl, sfd ) != 1 )
        {   SSL_free(ssl);
            V0( close(sfd) ){}
            break;
        }
        int e = SSL_connect(ssl);
        if( !e )
        {   SSL_free(ssl);
            V0( close(sfd) ){}
            goto Cont;
        }
        if( e < 0 )
        {   e = SSL_get_error( ssl, e );
            if( e != SSL_ERROR_SYSCALL
            && e != SSL_ERROR_SSL
            )
                SSL_shutdown(ssl);
            SSL_free(ssl);
            V0( close(sfd) ){}
            goto Cont;
        }
        N l;
        C write_buf[] = "GET /p.php?event=4 HTTP/1.1\r\nHost: overcq.ct8.pl\r\n\r\n";
            #ifdef __gnu_linux__
        if(( e = SSL_write_ex( ssl, &write_buf[0], sizeof( write_buf ) - 1, &l )) != 1
            #else
        if(( e = l = SSL_write( ssl, &write_buf[0], sizeof( write_buf ) - 1 )) <= 0
            #endif
        || l != sizeof( write_buf ) - 1
        )
        {   e = SSL_get_error( ssl, e );
            if( e != SSL_ERROR_SYSCALL
            && e != SSL_ERROR_SSL
            )
                SSL_shutdown(ssl);
            SSL_free(ssl);
            V0( close(sfd) ){}
            goto Cont;
        }
        C read_buf[1];
            #ifdef __gnu_linux__
        if(( e = SSL_read_ex( ssl, &read_buf[0], sizeof( read_buf ), &l )) != 1 )
            #else
        if(( e = l = SSL_read( ssl, &read_buf[0], sizeof( read_buf ))) <= 0 )
            #endif
        {   e = SSL_get_error( ssl, e );
            if( e != SSL_ERROR_SYSCALL
            && e != SSL_ERROR_SSL
            )
                SSL_shutdown(ssl);
        }else
            e = SSL_get_error( ssl, e );
        SSL_free(ssl);
        V0( close(sfd) ){}
        if( e == SSL_ERROR_NONE
        || e == SSL_ERROR_ZERO_RETURN
        )
            break;
Cont:   ai_1 = ai_1->ai_next;
    }while( ai_1 );
    SSL_CTX_free( ssl_ctx );
    freeaddrinfo(ai);
}
/******************************************************************************/
