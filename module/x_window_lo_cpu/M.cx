/*******************************************************************************
*   ___   publicplace
*  ¦OUX¦  ‟Coux”
*  ¦Inc¦  component
*   ---   ‟X window”
*         tworzenie ‹modułu› przy rozpoczęciu programu
* ©overcq                on ‟Gentoo Linux 17.0” “x86_64”             2018‒12‒7 T
*******************************************************************************/
void
E_x_M( void
){  E_x_S_wm_icon_S_n =
    #if 1
    16 * 16 + 32 * 32 + 64 * 64 + 128 * 128;
    #else
    3;
    #endif
    Mt_( E_x_S_wm_icon, E_x_S_wm_icon_S_n );
    N32 *E_x_S_wm_icon_ = &(( N32 [] )
    #if 1
#include "wm_icon_data_1.h"
    #else
    { 1, 1, 0xff00007f
    }
    #endif
    )[0];
    E_mem_Q_blk_I_copy( E_x_S_wm_icon, E_x_S_wm_icon_, E_x_S_wm_icon_S_n * sizeof( *E_x_S_wm_icon ));
    E_x_Q_window_S_hidden_x = E_x_Q_window_C_hidden_x;
    E_x_Q_window_S_hidden_y = E_x_Q_window_C_hidden_y;
    E_x_Q_display_S = E_mem_Q_tab_M( sizeof( struct E_x_Q_display_Z ), 0 );
    if( !E_x_Q_display_S )
    {   GV_( "" );
    }
    E_x_font_M();
    E_x_theme_M();
}
void
E_x_font_M( void
){  E_x_Q_font_S = E_mem_Q_tab_M( sizeof( struct E_mem_Q_tab_Z ), 1 );
    if( !E_x_Q_font_S )
    {   GV_( "" );
    }
    struct E_x_Q_font_Z *font = E_mem_Q_tab_R( E_x_Q_font_S, 0 );
    font->name = "default";
    font->height = 8;
    font->bitmaps_n = 13;
    Mt_( font->bitmaps, font->bitmaps_n );
    if( !font->bitmaps )
    {   GV_( "" );
    }
    for_n( i, font->bitmaps_n )
    {   N8 *bitmap;
        switch(i)
        { case 0:
              font->bitmaps[i].u = 'a';
              font->bitmaps[i].width = 5;
              bitmap = &((N8 [])
              { 0, 0, 0, 0, 0
              , 1, 3, 3, 3, 1
              , 0, 0, 0, 0, 3
              , 1, 3, 3, 3, 3
              , 3, 0, 0, 0, 3
              , 1, 3, 3, 2, 3
              , 0, 0, 0, 0, 0
              , 0, 0, 0, 0, 0
              })[0];
              break;
          case 1:
              font->bitmaps[i].u = L'ą';
              font->bitmaps[i].width = 5;
              bitmap = &((N8 [])
              { 0, 0, 0, 0, 0
              , 1, 3, 3, 3, 1
              , 0, 0, 0, 0, 3
              , 1, 3, 3, 3, 3
              , 3, 0, 0, 0, 3
              , 1, 3, 3, 2, 3
              , 0, 0, 0, 3, 0
              , 0, 0, 0, 2, 3
              })[0];
              break;
          case 2:
              font->bitmaps[i].u = 'b';
              font->bitmaps[i].width = 5;
              bitmap = &((N8 [])
              { 3, 0, 0, 0, 0
              , 3, 0, 0, 0, 0
              , 3, 2, 3, 3, 1
              , 3, 0, 0, 0, 3
              , 3, 0, 0, 0, 3
              , 3, 2, 3, 3, 1
              , 0, 0, 0, 0, 0
              , 0, 0, 0, 0, 0
              })[0];
              break;
          case 3:
              font->bitmaps[i].u = 'c';
              font->bitmaps[i].width = 4;
              bitmap = &((N8 [])
              { 0, 0, 0, 0
              , 1, 3, 3, 3
              , 3, 0, 0, 0
              , 3, 0, 0, 0
              , 3, 0, 0, 0
              , 1, 3, 3, 3
              , 0, 0, 0, 0
              , 0, 0, 0, 0
              })[0];
              break;
          case 4:
              font->bitmaps[i].u = L'ć';
              font->bitmaps[i].width = 4;
              bitmap = &((N8 [])
              { 0, 0, 3, 0
              , 1, 3, 3, 3
              , 3, 0, 0, 0
              , 3, 0, 0, 0
              , 3, 0, 0, 0
              , 1, 3, 3, 3
              , 0, 0, 0, 0
              , 0, 0, 0, 0
              })[0];
              break;
          case 5:
              font->bitmaps[i].u = 'd';
              font->bitmaps[i].width = 5;
              bitmap = &((N8 [])
              { 0, 0, 0, 0, 3
              , 0, 0, 0, 0, 3
              , 1, 3, 3, 2, 3
              , 3, 0, 0, 0, 3
              , 3, 0, 0, 0, 3
              , 1, 3, 3, 2, 3
              , 0, 0, 0, 0, 0
              , 0, 0, 0, 0, 0
              })[0];
              break;
          case 6:
              font->bitmaps[i].u = 'e';
              font->bitmaps[i].width = 5;
              bitmap = &((N8 [])
              { 0, 0, 0, 0, 0
              , 1, 3, 3, 3, 1
              , 3, 0, 0, 0, 3
              , 2, 3, 3, 3, 2
              , 3, 0, 0, 0, 0
              , 1, 3, 3, 3, 2
              , 0, 0, 0, 0, 0
              , 0, 0, 0, 0, 0
              })[0];
              break;
          case 7:
              font->bitmaps[i].u = L'ę';
              font->bitmaps[i].width = 5;
              bitmap = &((N8 [])
              { 0, 0, 0, 0, 0
              , 1, 3, 3, 3, 1
              , 3, 0, 0, 0, 3
              , 2, 3, 3, 3, 2
              , 3, 0, 0, 0, 0
              , 1, 3, 3, 3, 2
              , 0, 0, 0, 3, 0
              , 0, 0, 0, 2, 3
              })[0];
              break;
          case 8:
              font->bitmaps[i].u = 'f';
              font->bitmaps[i].width = 3;
              bitmap = &((N8 [])
              { 0, 2, 3
              , 0, 3, 0
              , 3, 3, 3
              , 0, 3, 0
              , 0, 3, 0
              , 0, 3, 0
              , 0, 0, 0
              , 0, 0, 0
              })[0];
              break;
          case 9:
              font->bitmaps[i].u = 'g';
              font->bitmaps[i].width = 5;
              bitmap = &((N8 [])
              { 0, 0, 0, 0, 0
              , 0, 0, 0, 0, 0
              , 1, 3, 3, 3, 2
              , 3, 0, 0, 0, 3
              , 3, 0, 0, 0, 3
              , 1, 3, 3, 3, 2
              , 0, 0, 0, 0, 3
              , 2, 3, 3, 3, 2
              })[0];
              break;
          case 10:
              font->bitmaps[i].u = 'h';
              font->bitmaps[i].width = 4;
              bitmap = &((N8 [])
              { 3, 0, 0, 0
              , 3, 0, 0, 0
              , 2, 3, 3, 1
              , 3, 0, 0, 3
              , 3, 0, 0, 3
              , 3, 0, 0, 3
              , 0, 0, 0, 0
              , 0, 0, 0, 0
              })[0];
              break;
          case 11:
              font->bitmaps[i].u = 'i';
              font->bitmaps[i].width = 1;
              bitmap = &((N8 [])
              { 3
              , 0
              , 3
              , 3
              , 3
              , 3
              , 0
              , 0
              })[0];
              break;
          case 12:
              font->bitmaps[i].u = 'j';
              font->bitmaps[i].width = 2;
              bitmap = &((N8 [])
              { 0, 3
              , 0, 0
              , 0, 3
              , 0, 3
              , 0, 3
              , 0, 3
              , 0, 3
              , 3, 2
              })[0];
              break;
          case 100:
              font->bitmaps[i].u = 'a';
              font->bitmaps[i].width = 5;
              bitmap = &((N8 [])
              { 0, 0, 0, 0, 0
              , 0, 0, 0, 0, 0
              , 0, 0, 0, 0, 0
              , 0, 0, 0, 0, 0
              , 0, 0, 0, 0, 0
              , 0, 0, 0, 0, 0
              , 0, 0, 0, 0, 0
              , 0, 0, 0, 0, 0
              })[0];
              break;
        }
        Mt_( font->bitmaps[i].bitmap, font->bitmaps[i].width * font->height / 4 + ( font->bitmaps[i].width * font->height % 4 ? 1 : 0 ));
        if( !font->bitmaps[i].bitmap )
        {   GV_( "" );
        }
        N8 c;
        N k = 0;
        for_n( j, font->bitmaps[i].width * font->height )
        {   if( j % 4 == 0 )
                c = 0;
            c |= bitmap[j] << ( j % 4 * 2 );
            if( j % 4 == 3 )
            {   font->bitmaps[i].bitmap[k] = c;
                k++;
            }
        }
        if( j % 4 == 1 || j % 4 == 2 || j % 4 == 3 )
            font->bitmaps[i].bitmap[k] = c;
    }
}
void
E_x_theme_M( void
){  E_x_theme_Q_theme = ( struct E_x_theme_Q_theme_Z )
    { .window_bg = E_x_Z_color_M( 0xa2, 0xa2, 0xa2 )
    , .object_bg = E_x_Z_color_M( 0xca, 0xca, 0xca )
    , .volatile_window_bg = E_x_Z_color_M( 0xdf, 0xde, 0xff )
    , .line = E_x_Z_color_M( 0x7a, 0x7a, 0x7f )
    , .text = E_x_Z_color_M( 0, 0, 0 )
    , .inactive_text = E_x_Z_color_M( 0x57, 0x57, 0x57 )
    , .line_numbers = E_x_Z_color_M( 0x5f, 0x5f, 0x5f )
    , .current_line_number = E_x_Z_color_M( 0x4a, 0x4a, 0x4f )
    , .current_line = E_x_Z_color_M( 0xce, 0xce, 0xce )
    , .cursor = E_x_Z_color_M( 0xbf, 0x5f, 0 )
    , .current_brace = E_x_Z_color_M( 0x2b, 0x5f, 0xff )
    , .search_bg = E_x_Z_color_M( 0xc7, 0x9c, 0x9c )
    , .selection_bg = E_x_Z_color_M( 0xc4, 0x9c, 0x9c )
    , .line_selection_bg = E_x_Z_color_M( 0xb8, 0xb8, 0xb8 )
    , .cursor_jump_bg = E_x_Z_color_M( 0xb6, 0xb6, 0xb6 )
    , .code = 
      { .comment = E_x_Z_color_M( 0x5f, 0x5f, 0x5f )
      , .doc_comment = E_x_Z_color_M( 0x2b, 0x37, 0x5f )
      , .label = E_x_Z_color_M( 0x5f, 0, 0 )
      , .keyword = E_x_Z_color_M( 0, 0, 0x5f )
      , .preprocessor_markup = E_x_Z_color_M( 0, 0x2b, 0 )
      , .type = E_x_Z_color_M( 0, 0x5f, 0 )
      , .number = E_x_Z_color_M( 0x5f, 0, 0x37 )
      , .text = E_x_Z_color_M( 0x5f, 0x37, 0 )
      , .character = E_x_Z_color_M( 0x5f, 0x37, 0 )
      }
    , .terminal =
      { .bg = E_x_Z_color_M( 0, 0, 0 )
      , .text = E_x_Z_color_M( 0xee, 0xee, 0xec )
      }
    };
}
/******************************************************************************/
