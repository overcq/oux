/*******************************************************************************
*   ___   publicplace
*  ¦OUX¦  ‟Coux”
*  ¦Inc¦  component
*   ---   ‟X window”
*         window objects manager
* ©overcq                on ‟Gentoo Linux 13.0” “x86_64”             2015‒4‒28 *
*******************************************************************************/
///są to obiekty wizualne.
//każdy obiekt okna jest jednokrotny w konkretnym oknie i jest tylko wizualny. typy obiektów w celu przypisania referencyjnego funkcji obiektu ewentualnie do zrobienia później, jeśli to rozwiązanie okaże się potrzebne zamiast zwykłego ustawiania wskaźników do procedur.
//==============================================================================
typedef
void
(*draw_object_proc)(
  struct E_x_Q_display_Z *
, struct E_x_Q_screen_Z *
, struct E_x_Q_window_Z *
, struct E_x_Q_object_Z *
);
struct E_x_Q_object_Z
{   void ///ale obiekt zawiera punkty, które narysuje ta funkcja w czasie wywołania.
    (*draw)(
      struct E_x_Q_display_Z *
    , struct E_x_Q_screen_Z *
    , struct E_x_Q_window_Z *
    , struct E_x_Q_object_Z *
    );
    N child_n;
    I *child;
    S16 x, y;
    N16 width, height; ///prostokąt oczekiwanej widoczności obiektu.
    unsigned U_R( mode, lay_height ):1;
    unsigned U_R( mode, drag_src )  :1;
};
//==============================================================================
S16 E_x_Q_object_S_layout_dx = 4, E_x_Q_object_S_layout_dy = 4;
//==============================================================================
I
E_x_Q_object_M(
  struct E_x_Q_display_Z *display
, struct E_x_Q_window_Z *window
, N child_n
, N x
, N y
, N width
, N height
, void
  (*draw)(
    struct E_x_Q_display_Z *
  , struct E_x_Q_screen_Z *
  , struct E_x_Q_window_Z *
  , struct E_x_Q_object_Z *
  )
){  I object_id = E_mem_Q_tab_I_add( window->object );
    E_x_Q_object_M_( display, window, object_id, child_n, x, y, width, height, draw );
    return object_id;
}
I
E_x_Q_object_M_(
  struct E_x_Q_display_Z *display
, struct E_x_Q_window_Z *window
, I object_id
, N child_n
, S16 x
, S16 y
, N16 width
, N16 height
, void
  (*draw)(
    struct E_x_Q_display_Z *
  , struct E_x_Q_screen_Z *
  , struct E_x_Q_window_Z *
  , struct E_x_Q_object_Z *
  )
){  struct E_x_Q_object_Z *object = E_mem_Q_tab_R( window->object, object_id );
    object->draw = draw;
    object->child_n = child_n;
    if( child_n )
        object->child = Mt( sizeof(I), child_n );
    object->x = x;
    object->y = y;
    object->width = child_n ? 0 : width;
    object->height = child_n ? 0 : height;
    U_L( object->mode, lay_height );
    U_L( object->mode, drag_src );
    U_F( window->req, draw );
    U_F( display->req, draw );
    return object_id;
}
void
E_x_Q_object_W(
  struct E_x_Q_display_Z *display
, struct E_x_Q_window_Z *window
, N object_id
){  struct E_x_Q_object_Z *object = E_mem_Q_tab_R( window->object, object_id );
    if( object->child_n )
        W( object->child );
    E_mem_Q_tab_I_rem( window->object, object_id );
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void
E_x_Q_object_I_draw_P_color(
  struct E_x_Q_display_Z *display
, struct E_x_Q_screen_Z *screen
, struct E_x_Q_object_Z *object
, N32 color
){  if( !U_R( object->mode, drag_src ))
        E_x_Q_window_I_draw_P_color( display, screen, color );
}
//------------------------------------------------------------------------------
void
E_x_Q_object_I_draw_Z_points(
  struct E_x_Q_display_Z *display
, struct E_x_Q_screen_Z *screen
, struct E_x_Q_window_Z *window
, struct E_x_Q_object_Z *object
, N32 n
, xcb_point_t *points
){  for_n( i, n )
    {   points[i].x += object->x;
        points[i].y += object->y;
    }
    E_x_Q_window_I_draw_Z_points( display, screen, window, n, points );
}
void
E_x_Q_object_I_draw_Z_segments(
  struct E_x_Q_display_Z *display
, struct E_x_Q_screen_Z *screen
, struct E_x_Q_window_Z *window
, struct E_x_Q_object_Z *object
, N32 n
, xcb_segment_t *segments
){  for_n( i, n )
    {   segments[i].x1 += object->x;
        segments[i].y1 += object->y;
        segments[i].x2 += object->x;
        segments[i].y2 += object->y;
    }
    E_x_Q_window_I_draw_Z_segments( display, screen, window, n, segments );
}
void
E_x_Q_object_I_draw_Z_line(
  struct E_x_Q_display_Z *display
, struct E_x_Q_screen_Z *screen
, struct E_x_Q_window_Z *window
, struct E_x_Q_object_Z *object
, N32 n
, xcb_point_t *points
){  for_n( i, n )
    {   points[i].x += object->x;
        points[i].y += object->y;
    }
    E_x_Q_window_I_draw_Z_line( display, screen, window, n, points );
}
void
E_x_Q_object_I_draw_Z_rectangles(
  struct E_x_Q_display_Z *display
, struct E_x_Q_screen_Z *screen
, struct E_x_Q_window_Z *window
, struct E_x_Q_object_Z *object
, N32 n
, xcb_rectangle_t *rectangles
){  for_n( i, n )
    {   rectangles[i].x += object->x;
        rectangles[i].y += object->y;
    }
    E_x_Q_window_I_draw_Z_rectangles( display, screen, window, n, rectangles );
}
void
E_x_Q_object_I_draw_Z_arcs(
  struct E_x_Q_display_Z *display
, struct E_x_Q_screen_Z *screen
, struct E_x_Q_window_Z *window
, struct E_x_Q_object_Z *object
, N32 n
, xcb_arc_t *arcs
){  for_n( i, n )
    {   arcs[i].x += object->x;
        arcs[i].y += object->y;
    }
    E_x_Q_window_I_draw_Z_arcs( display, screen, window, n, arcs );
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void
E_x_Q_object_I_lay(
  struct E_x_Q_display_Z *display
, struct E_x_Q_window_Z *window
){  if( !E_mem_Q_tab_R_n( window->object ))
        return;
    struct Z_stack
    { struct E_x_Q_object_Z *object;
      N i;
    };
Restart:;
    struct E_x_Q_object_Z *object = E_mem_Q_tab_R( window->object, 0 );
    if( object->child_n )
    {   struct Z_stack *stack = Mt( sizeof( struct Z_stack ), 0 );
        N stack_i = ~0;
        S16 next_x = E_x_Q_object_S_layout_dx;
        S16 next_y = E_x_Q_object_S_layout_dy;
        S16 after_x = E_x_Q_object_S_layout_dx;
        S16 after_y = E_x_Q_object_S_layout_dy;
        O{  if( object->child_n )
            {   if( ~stack_i )
                    if( U_R( object->mode, lay_height ))
                    {   next_x = stack[ stack_i ].object->x + E_x_Q_object_S_layout_dx;
                        after_x = next_x + E_x_Q_object_S_layout_dx;
                        next_y = after_y + E_x_Q_object_S_layout_dy;
                    }else
                        after_y = next_y + E_x_Q_object_S_layout_dy;
                struct Z_stack *stack_top = E_mem_Q_blk_I_append( &stack, 1 );
                stack_i++;
                stack_top->object = object;
                stack_top->i = 0;
                object->x = next_x;
                object->y = next_y;
                object->width = E_x_Q_object_S_layout_dx;
                object->height = E_x_Q_object_S_layout_dy;
                next_x += E_x_Q_object_S_layout_dx;
                if( next_x > window->width
                && !U_R( object->mode, lay_height )
                ){  U_F( object->mode, lay_height );
                    do
                    {   object = stack[ stack_i ].object;
                    }while( ~--stack_i
                    && !stack[ stack_i ].i
                    );
                    U_F( object->mode, lay_height );
                    W(stack);
                    goto Restart;
                }
                next_y += E_x_Q_object_S_layout_dy;
                object = E_mem_Q_tab_R( window->object, object->child[0] );
                continue;
            }
            if( stack[ stack_i ].i != stack[ stack_i ].object->child_n )
            {   stack[ stack_i ].i++;
                if( U_R( object->mode, lay_height )
                && stack[ stack_i ].i != 1
                ){  next_x = stack[ stack_i ].object->x + E_x_Q_object_S_layout_dx;
                    next_y = after_y;
                }
                object->x = next_x;
                object->y = next_y;
                if( after_x < next_x + object->width + E_x_Q_object_S_layout_dx )
                    after_x = next_x + object->width + E_x_Q_object_S_layout_dx;
                if( after_y < next_y + object->height + E_x_Q_object_S_layout_dy )
                    after_y = next_y + object->height + E_x_Q_object_S_layout_dy;
                struct E_x_Q_object_Z *object_ = object;
                N stack_i_ = stack_i;
                N16 after_x_ = after_x;
                N16 after_y_ = after_y;
                do
                {   object_ = stack[ stack_i_ ].object;
                    if( object_->width < after_x_ - object_->x )
                        object_->width = after_x_ - object_->x;
                    if( object_->height < after_y_ - object_->y )
                        object_->height = after_y_ - object_->y;
                    after_x_ += E_x_Q_object_S_layout_dx;
                    after_y_ += E_x_Q_object_S_layout_dy;
                }while( ~--stack_i_ );
                next_x += object->width + E_x_Q_object_S_layout_dx;
                if( next_x > window->width
                && !U_R( object->mode, lay_height )
                ){  U_F( object->mode, lay_height );
                    if( stack[ stack_i ].i == 1 )
                    {   do
                        {   object = stack[ stack_i ].object;
                        }while( ~--stack_i
                        && !stack[ stack_i ].i
                        );
                        U_F( object->mode, lay_height );
                    }
                    W(stack);
                    goto Restart;
                }
                if( stack[ stack_i ].i != stack[ stack_i ].object->child_n )
                {   object = E_mem_Q_tab_R( window->object, stack[ stack_i ].object->child[ stack[ stack_i ].i ] );
                    continue;
                }
            }
            N stack_i_1 = stack_i;
            next_x = stack[ stack_i ].object->x + stack[ stack_i ].object->width + E_x_Q_object_S_layout_dx;
            next_y -= E_x_Q_object_S_layout_dy;
            object = stack[ stack_i ].object;
            while( ~--stack_i
            && ++stack[ stack_i ].i == stack[ stack_i ].object->child_n
            ){  next_x = stack[ stack_i ].object->x + stack[ stack_i ].object->width + E_x_Q_object_S_layout_dx;
                if( next_x > window->width
                && !U_R( object->mode, lay_height )
                ){  U_F( object->mode, lay_height );
                    do
                    {   object = stack[ stack_i-- ].object;
                    }while( ~stack_i
                    && !stack[ stack_i ].i
                    );
                    U_F( object->mode, lay_height );
                    W(stack);
                    goto Restart;
                }
                after_y += E_x_Q_object_S_layout_dy;
                next_y -= E_x_Q_object_S_layout_dy;
                object = stack[ stack_i ].object;
            }
            if( !~stack_i )
                break;
            E_mem_Q_blk_I_rem( &stack, stack_i + 1, stack_i_1 - stack_i );
            object = E_mem_Q_tab_R( window->object, stack[ stack_i ].object->child[ stack[ stack_i ].i ] );
        }
        W(stack);
    }
}
//------------------------------------------------------------------------------
I
E_x_Q_object_Z_text_field_M(
  struct E_x_Q_display_Z *display
, struct E_x_Q_window_Z *window
, N child_n
){  I object_id = E_mem_Q_tab_I_add( window->object );
    E_x_Q_object_Z_text_field_M_( display, window, object_id, child_n );
    return object_id;
}
void
E_x_Q_object_Z_text_field_M_(
  struct E_x_Q_display_Z *display
, struct E_x_Q_window_Z *window
, I object_id
, N child_n
){  E_x_Q_object_M_( display, window
    , object_id
    , child_n
    , 0
    , 0
    , 40
    , 30
    , E_x_Q_object_Z_text_field_I_draw
    );
}
void
E_x_Q_object_Z_text_field_I_draw(
  struct E_x_Q_display_Z *display
, struct E_x_Q_screen_Z *screen
, struct E_x_Q_window_Z *window
, struct E_x_Q_object_Z *object
){  E_x_Q_object_I_draw_P_color_( E_x_Z_color_M( 0xff, 0, 0 ));
    E_x_Q_object_I_draw_Z_rectangles_((
      ( xcb_rectangle_t[] )
      { { .x = 0
        , .y = 0
        , .width = object->width
        , .height = object->height
        }
      }
    ));
}
/******************************************************************************/
