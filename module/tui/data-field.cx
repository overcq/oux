//-*-C-*-
/*******************************************************************************
*   ___   publicplace
*  ¦OUX¦  C+
*  ¦/C+¦  component
*   ---   user interface
*         data fields
* ©overcq                on ‟Gentoo Linux 17.1” “x86_64”             2022‒5‒28 R
*******************************************************************************/
enum E_tui_data_Q_field_Z_type
{ E_tui_data_Q_field_S_text
, E_tui_data_Q_field_S_url //TODO
, E_tui_data_Q_field_S_password
, E_tui_data_Q_field_S_number
, E_tui_data_Q_field_S_bignum
, E_tui_data_Q_field_S_datetime
};
struct E_tui_data_Q_field_Z
{ Pc label;
  N width;
  Pc s;
  N s_i; // Pozycja bajtowa bieżącego znaku.
  Pc *select;
  N select_n;
  enum E_tui_data_Q_field_Z_type type;
  union
  { struct
    { Pc regex; // Wyrażenie regularne obejmowane podczas ustawiania w “^(?:” i “)$”.
      regex_t regex_comp;
    }text; // Dla “E_tui_data_Q_field_S_text”.
    struct
    { unsigned slider           :1;
      unsigned signed_          :1;
      unsigned floating_point   :1;
      union
      { struct
        { N min, max, step;
        }unsigned_;
        struct
        { S min, max, step;
        }signed_;
        struct
        { F min, max, step;
        }floating_point;
      }value;
      N8 base;
    }number; // Dla “E_tui_data_Q_field_S_number”.
    struct
    { unsigned slider           :1;
      struct E_math_Z_bignum *min, *max, *step;
      N min_prec;
      N8 base;
    }bignum; // Dla “E_tui_data_Q_field_S_bignum”.
    struct
    { unsigned slider           :1;
      struct E_datetime_Z min, max, step;
    }datetime; // Dla “E_tui_data_Q_field_S_datetime”.
  }conf;
};
//==============================================================================
_internal
N
E_tui_data_Q_field_M_( struct E_tui_data_Q_field_Z *input
, Pc label
, N width
){  J_assert( width > 2 );
    J_assert( E_text_Z_su0_R_n(label) <= ~0 >> 1 );
    input->label = M( E_text_Z_s0_R_l_0(label) );
    if( !input->label )
        return ~0;
    input->width = width;
    E_text_Z_s_P_copy_s0_0( input->label, label );
    input->s = M(1);
    *input->s = '\0';
    input->s_i = 0;
    input->select = 0;
    input->select_n = 0;
    return 0;
}
_export
N
E_tui_data_Q_field_M( struct E_tui_data_Q_field_Z *input
, enum E_tui_data_Q_field_Z_type type
, Pc label
, N width
){  N ret = E_tui_data_Q_field_M_( input, label, width );
    if(ret)
        return ret;
    input->type = type;
    switch(type)
    { case E_tui_data_Q_field_S_text:
            input->conf.text.regex = 0;
            break;
      case E_tui_data_Q_field_S_number:
            input->conf.number.slider = 0;
            input->conf.number.signed_ = 0;
            input->conf.number.floating_point = 0;
            input->conf.number.base = 10;
            break;
      case E_tui_data_Q_field_S_bignum:
            input->conf.bignum.slider = 0;
            input->conf.bignum.min_prec = 0;
            break;
    }
    return 0;
}
_export
N
E_tui_data_Q_field_W( struct E_tui_data_Q_field_Z *input
){  N ret = W( input->label );
    if(ret)
        return ret;
    if( input->type == E_tui_data_Q_field_S_text
    && input->conf.text.regex
    )
        regfree( &input->conf.text.regex_comp );
    if( input->type == E_tui_data_Q_field_S_bignum
    && input->conf.bignum.slider
    )
    {   ret = E_math_Q_bignum_W( input->conf.bignum.min );
        if(ret)
            return ~1;
        ret = E_math_Q_bignum_W( input->conf.bignum.max );
        if(ret)
            return ~1;
    }
    ret = W(input->s);
    return ret ? ret : 0;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_internal
N
E_tui_data_Q_field_R_valid( struct E_tui_data_Q_field_Z *input
){  switch(input->type)
    { case E_tui_data_Q_field_S_text:
            if( input->conf.text.regex
            && regexec( &input->conf.text.regex_comp, input->s, 0, 0, 0 )
            )
                return no;
            break;
      case E_tui_data_Q_field_S_url:
        {   if( !E_text_Z_s0_T_starts_case_s0( input->s, "https:/""/" )
            && !E_text_Z_s0_T_starts_case_s0( input->s, "http:/""/" )
            )
                return no;
            Pc domain = E_text_Z_s_R_search_c_( input->s, '/' ) + 2;
            Pc path = E_text_Z_s0_R_search_c( domain, '/' );
            if( !*path
            || domain == path
            )
                return no;
            Pc hash = E_text_Z_s0_R_search_c( domain, '#' );
            if( *hash
            && hash < path
            )
                return no;
            Pc query = E_text_Z_s_R_search_c( domain, hash, '?' );
            if( *query
            && query < path
            )
                return no;
            break;
        }
      case E_tui_data_Q_field_S_number:
            if( input->conf.number.slider )
                if( input->conf.number.floating_point )
                {   Pc ret_s;
                    F v = E_text_Z_s0_N_f( input->s, &ret_s, input->conf.number.base );
                    if( *ret_s
                    || v < input->conf.number.value.floating_point.min
                    || v > input->conf.number.value.floating_point.max
                    )
                        return no;
                }else if( input->conf.number.signed_ )
                {   Pc ret_s;
                    S v = E_text_Z_s0_N_sn( input->s, &ret_s, input->conf.number.base );
                    if( *ret_s
                    || v < input->conf.number.value.signed_.min
                    || v > input->conf.number.value.signed_.max
                    )
                        return no;
                }else
                {   Pc ret_s;
                    N v = E_text_Z_s0_N_n( input->s, &ret_s, input->conf.number.base );
                    if( *ret_s
                    || v < input->conf.number.value.unsigned_.min
                    || v > input->conf.number.value.unsigned_.max
                    )
                        return no;
                }
            break;
      case E_tui_data_Q_field_S_bignum:
            if( input->conf.bignum.slider )
            {   Pc ret_s;
                struct E_math_Z_bignum *v = E_text_Z_s0_N_bignum( input->s, &ret_s, input->conf.bignum.base, input->conf.bignum.min_prec );
                if( !v )
                    return ~0;
                if( *ret_s )
                    return no;
                S ret_min = E_math_Q_bignum_I_compare( v, input->conf.bignum.min );
                if( ret_min != -5
                && ret_min != 0
                && ret_min != -5
                )
                    return (N)ret_min;
                S ret_max = E_math_Q_bignum_I_compare( v, input->conf.bignum.max );
                if( ret_max != -5
                && ret_max != 0
                && ret_max != -5
                )
                    return (N)ret_max;
                if( ret_min == -5
                || ret_max == 5
                )
                    return no;
            }
            break;
      case E_tui_data_Q_field_S_datetime:
            if( input->conf.datetime.slider )
            {   Pc ret_s;
                struct E_datetime_Z v = E_text_Z_s0_N_datetime( input->s, &ret_s );
                if( *ret_s
                || E_datetime_I_compare( v, input->conf.datetime.min ) < 0
                || E_datetime_I_compare( v, input->conf.datetime.max ) > 0
                )
                    return no;
            }
            break;
    }
    return yes;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_export
N
E_tui_data_Q_field_Z_text_P_regex( struct E_tui_data_Q_field_Z *input
, Pc regex
){  if( input->conf.text.regex )
        regfree( &input->conf.text.regex_comp );
    if(regex)
    {   input->conf.text.regex = M( 2 + E_text_Z_s0_R_l(regex) + 2 + 1 );
        E_text_Z_s_P_copy_s0_0( E_text_Z_s_P_copy_s0( E_text_Z_s_P_copy_s0( input->conf.text.regex, "^(" ), regex ), ")$" );
        if( regcomp( &input->conf.text.regex_comp, input->conf.text.regex, REG_EXTENDED | REG_NOSUB ))
        {   N ret = W( input->conf.text.regex );
            if(ret)
                return ~1;
            input->conf.text.regex = 0;
            return no;
        }
    }else
        input->conf.text.regex = 0;
    return yes;
}
_internal
B
E_tui_data_Q_field_P_left( struct E_tui_data_Q_field_Z *input
){  if( input->s_i )
    {   U u;
        N l = input->s + input->s_i - E_text_Z_su_R_u_rev( input->s + input->s_i, &u );
        input->s_i -= l;
        return yes;
    }
    return no;
}
_internal
B
E_tui_data_Q_field_P_right( struct E_tui_data_Q_field_Z *input
){  if( *( input->s + input->s_i ))
    {   U u;
        N l = E_text_Z_su_R_u( input->s + input->s_i, &u ) - ( input->s + input->s_i );
        input->s_i += l;
        return yes;
    }
    return no;
}
_internal
N
E_tui_data_Q_field_P_insert( struct E_tui_data_Q_field_Z *input
, U u
){  N l = E_text_Z_u_R_su_G(u);
    if( !~l )
        return l;
    if( !E_mem_Q_blk_I_insert( &input->s, input->s_i, l ))
        return ~0;
    E_text_Z_u_R_su( u, input->s + input->s_i );
    input->s_i += l;
    return 0;
}
_internal
N
E_tui_data_Q_field_P_overwrite( struct E_tui_data_Q_field_Z *input
, U u
){  N l_1, l_2 = E_text_Z_u_R_su_G(u);
    if( *( input->s + input->s_i ))
    {   U u;
        l_1 = E_text_Z_su_R_u( input->s + input->s_i, &u ) - ( input->s + input->s_i );
        if( !~l_2 )
            return l_2;
        if( l_1 > l_2 )
        {   if( !E_mem_Q_blk_I_remove( &input->s, input->s_i, l_1 - l_2 ))
                return ~0;
        }else if( l_1 < l_2 )
            if( !E_mem_Q_blk_I_insert( &input->s, input->s_i, l_2 - l_1 ))
                return ~0;
    }else if( !E_mem_Q_blk_I_insert( &input->s, input->s_i, l_2 ))
        return ~0;
    E_text_Z_u_R_su( u, input->s + input->s_i );
    input->s_i += l_2;
    return 0;
}
_internal
N
E_tui_data_Q_field_P_remove_back( struct E_tui_data_Q_field_Z *input
){  if( input->s_i )
    {   U u;
        N l = input->s + input->s_i - E_text_Z_su_R_u_rev( input->s + input->s_i, &u );
        if( !E_mem_Q_blk_I_remove( &input->s, input->s_i - l, l ))
            return ~0;
        input->s_i -= l;
        return yes;
    }
    return no;
}
_internal
N
E_tui_data_Q_field_P_remove_on( struct E_tui_data_Q_field_Z *input
){  if( *( input->s + input->s_i ))
    {   U u;
        N l = E_text_Z_su_R_u( input->s + input->s_i, &u ) - ( input->s + input->s_i );
        if( !E_mem_Q_blk_I_remove( &input->s, input->s_i, l ))
            return ~0;
        return yes;
    }
    return no;
}
_internal
N
E_tui_data_Q_field_P_select( struct E_tui_data_Q_field_Z *input
, N i
){  J_assert( i < input->select_n );
    N l = E_text_Z_s0_R_l_0( input->select[i] );
    if( E_text_Z_s0_R_l_0( input->s ) != l )
        if( !E_mem_Q_blk_M_replace( &input->s, l ))
            return ~0;
    E_text_Z_s_P_copy_s0_0( input->s, input->select[i] );
    input->s_i = 0;
    return 0;
}
_internal
N
E_tui_data_Q_field_R_u_i( struct E_tui_data_Q_field_Z *input
){  U u;
    N i = 0;
    for( Pc s = input->s; s != input->s + input->s_i; s = E_text_Z_su_R_u( s, &u ))
        i++;
    return i;
}
/******************************************************************************/
